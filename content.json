{"meta":{"title":"Hexotest","subtitle":"hei","description":"ha","author":"Maydaychen","url":"https://maydaychen.github.io","root":"/"},"pages":[{"title":"关于","date":"2024-12-31T01:11:47.685Z","updated":"2024-12-30T15:58:13.000Z","comments":false,"path":"about/index.html","permalink":"https://maydaychen.github.io/about/index.html","excerpt":"","text":"一个用于记录自己成长的网站所有的文章都会带有自己的思考内容比较杂，关于开发，运维，摄影，智能家居，数码，旅行，感兴趣的都会记下来 网站更新：20230827 —— 开始尝试建站202311 —— 疯狂输出20240315 —— 把之前写的文章从其他平台搬运过来20240316 —— 评论系统搞定了，还请尽情骂我吧！20240316 —— 一鼓作气，图床搞定了，七牛云 + PicGo，嘎嘎够用了20241225 —— 研究了一下图床的缺点，比如有人刷流量啊之类的，所以图片改成了本地图片，够用肯定是够用了20241228 —— 充满纪念意义的一天，呜呼20241230 —— 突发奇想，以后记录一下做菜的相关经验，以后失业了可以去当个厨子 Todo-list[Done] 评论系统好像挂了？—— 20240316搞定 问题记录 [Done] 图床得修改一下，研究下怎么弄合适 —— 20240316搞定 这篇文章讲得不错 [Done] 哭了，图裂了，难道是http的问题？ 既然没时间解决问题，加上隐形的风险，那就完美规避这个问题吧 [InProgress] 文章搬运 (自己原创的!) 并修改格式"},{"title":"404 Not Found：该页无法显示","date":"2024-12-10T13:33:21.481Z","updated":"2023-08-12T02:08:42.446Z","comments":false,"path":"/404.html","permalink":"https://maydaychen.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2024-12-10T13:33:24.242Z","updated":"2023-08-12T02:08:42.447Z","comments":false,"path":"books/index.html","permalink":"https://maydaychen.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2024-12-10T13:33:24.238Z","updated":"2023-08-12T02:08:42.447Z","comments":true,"path":"links/index.html","permalink":"https://maydaychen.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2024-12-10T13:33:25.576Z","updated":"2023-08-12T02:08:42.447Z","comments":false,"path":"repository/index.html","permalink":"https://maydaychen.github.io/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2024-12-10T13:33:24.236Z","updated":"2023-08-12T02:08:42.447Z","comments":false,"path":"categories/index.html","permalink":"https://maydaychen.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2024-12-10T13:33:24.434Z","updated":"2023-08-12T02:08:42.447Z","comments":false,"path":"tags/index.html","permalink":"https://maydaychen.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker-把image上传到阿里云仓库并在国内服务器下载","slug":"Docker-把image上传到阿里云仓库并在国内服务器下载","date":"2024-12-31T03:17:02.000Z","updated":"2024-12-31T06:04:52.000Z","comments":true,"path":"2024/12/31/Docker-把image上传到阿里云仓库并在国内服务器下载/","link":"","permalink":"https://maydaychen.github.io/2024/12/31/Docker-%E6%8A%8Aimage%E4%B8%8A%E4%BC%A0%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%93%E5%BA%93%E5%B9%B6%E5%9C%A8%E5%9B%BD%E5%86%85%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD/","excerpt":"","text":"背景由于众所周知的原因，目前国内的服务器拉docker镜像非常困难，基本可以说是完全没法用因此，怎么把image下载下来成了很多人头疼的问题，这里分享一下一种解决办法，就是在已有该镜像的服务器上把镜像推给阿里云，然后再从阿里云上下载该镜像 步骤进入容器镜像服务在阿里云的控制台找到容器镜像服务 创建个人实例进入以后可以看到有个人实例跟企业实例选项，在这里我们选择个人实例 注意，在这边应该会选区域，请务必选择跟你服务器所在地一样的区域，否则无法连接 看了一下，个人实例有命名空间和镜像数量限制，但是对我们个人而言已经绰绰有余 创建命名空间 创建镜像仓库 镜像仓库 -&gt; 创建镜像仓库 -&gt; 填写相关内容仓库名称：可以是image name仓库类型：公有或者私有填写完成后点击下一步 在这边你可以选择镜像的来源，比如GitHub或者本地，由于我在其他服务器上已经下载过了，所以我选择本地仓库 上传&#x2F;下载镜像这一段我直接复制官网的说法 登录阿里云Docker Registry 1$ docker login --username=xxxx*****@xx.com [公网地址] 用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。(您可以在访问凭证页面修改凭证密码) 从Registry中拉取镜像 1$ docker pull [公网地址]/maydaychen/postgres:[镜像版本号] 将镜像推送到Registry 1234$ docker login --username=2458*****@qq.com [公网地址]$ docker tag [ImageId] [公网地址]/maydaychen/postgres:[镜像版本号]$ docker push [公网地址]/maydaychen/postgres:[镜像版本号]请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。 选择合适的镜像仓库地址从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。 如果您使用的机器位于VPC网络，请使用 [专有网络] 作为Registry的域名登录。 示例使用”docker tag”命令重命名镜像，并将它通过专有网络地址推送至Registry。 1234$ docker imagesREPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZEregistry.aliyuncs.com/acs/agent 0.7-dfb6816 37bb9c63c8b2 7 days ago 37.89 MB$ docker tag 37bb9c63c8b2 [专有地址]/acs/agent:0.7-dfb6816 使用 “docker push” 命令将该镜像推送至远程。 1$ docker push [专有地址]/acs/agent:0.7-dfb6816","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://maydaychen.github.io/tags/Docker/"}]},{"title":"RockyLinux9安装docker及docker-compose","slug":"RockyLinux9安装docker及docker-compose","date":"2024-12-31T01:34:38.000Z","updated":"2024-12-31T02:01:28.142Z","comments":true,"path":"2024/12/31/RockyLinux9安装docker及docker-compose/","link":"","permalink":"https://maydaychen.github.io/2024/12/31/RockyLinux9%E5%AE%89%E8%A3%85docker%E5%8F%8Adocker-compose/","excerpt":"","text":"Docker的安装如果是Rocky Linux9的话，目前使用podman而不是docker，所以命令变成了 1dnf install podman 如果不是用的Rocky而是别的操作系统的话，命令会有些许的不同，如下图 启动并设置开机自启启动 Docker 服务并设置 Docker 服务开机自启： 12systemctl start dockersystemctl enable docker Docker-compose检查最新版本号前往 https://github.com/docker/compose/releases， 查看最新的release信息 下载最新的release包方法一1sudo curl -L &quot;https://github.com/docker/compose/releases/download/v[版本号]/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose 方法二12cd /usr/local/bin/wget https://github.com/docker/compose/releases/download/v[版本号]/docker-compose-linux-x86_64 方法三手动下载，通过SFTP发送到服务器 设置可执行权限1sudo chmod +x /usr/local/bin/docker-compose 验证1docker-compose --version 如果配置生效，就会显示docker compose的版本号","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/tags/Linux/"}]},{"title":"食谱-鱼香肉丝非标准版","slug":"食谱-鱼香肉丝非标准版","date":"2024-12-30T15:33:33.000Z","updated":"2024-12-30T15:50:29.013Z","comments":true,"path":"2024/12/30/食谱-鱼香肉丝非标准版/","link":"","permalink":"https://maydaychen.github.io/2024/12/30/%E9%A3%9F%E8%B0%B1-%E9%B1%BC%E9%A6%99%E8%82%89%E4%B8%9D%E9%9D%9E%E6%A0%87%E5%87%86%E7%89%88/","excerpt":"","text":"食材 猪通脊肉 250g（三个人感觉吃不完） 笋丝（也可以直接买笋） 木耳 葱姜蒜 美人蕉 淀粉 油 番茄酱 白糖&#x2F;味精&#x2F;醋&#x2F;酱油 蚝油(非必须) 小苏打(非必须) 步骤 将猪通脊肉切丝，清水洗，控完水之后加盐+味精，搅拌，加水再搅拌 直到水进到肉里了，肉有粘滑感的时候，over (非必须) 可以加点小苏打， 一丢丢的量就行，然后静置一小时 加淀粉，用手掌心揉肉丝，保证每一根肉丝都有淀粉 倒入适量油，防止肉丝发干，也可保证滑油时不会散开 锅里加一勺油，热锅凉油（锅中油烧热至冒烟，再加一勺凉油） 关小火，倒入肉丝，定型后开大火，待肉丝变色后把肉丝拨到一边，倒入美人蕉&#x2F;葱姜蒜末，煸炒后倒入番茄酱上色 翻炒均匀后倒入焯水之后的笋丝和木耳，关小火，加入酱油和醋（比例约1:1，爱吃酸的人可以1:1.5） 加入白糖&#x2F;味精&#x2F;盐&#x2F;胡椒粉，（非必须）也可加入适量蚝油提鲜，翻炒均匀 大伙勾芡，可以再加一丢丢油，然后炒两下就可以出锅了 总结 笋丝跟木耳记得先焯水 焯水的时候可以把葱姜蒜和美人蕉都切了，反正没事干 别忘记勾芡！不然太干了 如果没有美人蕉，我用的一根小米辣+一点红椒，感觉味道也不差 笋丝可真不好买啊","categories":[{"name":"生活","slug":"生活","permalink":"https://maydaychen.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"食谱","slug":"食谱","permalink":"https://maydaychen.github.io/tags/%E9%A3%9F%E8%B0%B1/"}]},{"title":"Hexo-如何使用本地图片进行展示","slug":"Hexo-如何使用本地图片进行展示","date":"2024-12-29T06:45:54.000Z","updated":"2024-12-30T15:30:46.630Z","comments":true,"path":"2024/12/29/Hexo-如何使用本地图片进行展示/","link":"","permalink":"https://maydaychen.github.io/2024/12/29/Hexo-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E5%B1%95%E7%A4%BA/","excerpt":"","text":"背景由于图床的使用可能会导致一定的风险，再加上莫名其妙的裂图问题，因为近期内没有时间去查看这个问题，所以不得不采用本地图片文件的方案，所幸目前看来问题不大 具体操作修改hexo配置修改_config.yml文件，找到这个参数并且修改为true 1post_asset_folder: true 在修改完上述配置后，每次通过命令hexo new xxx都会生成一个xxx文件夹，该文件夹用来存放对应的资源文件 安装插件插件地址： https://github.com/yiyungent/hexo-asset-img/blob/main/README_zh.md在readme中可以看到，我们只需要把图片放到对应的资源文件中，然后在md内容中通过这样的方式进行饮用 1&#123;% asset_img xxx.png 描述 %&#125;","categories":[{"name":"博客相关","slug":"博客相关","permalink":"https://maydaychen.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://maydaychen.github.io/tags/Hexo/"}]},{"title":"Zabbix-小知识点记录(持续更新)","slug":"Zabbix-小知识点记录-持续更新","date":"2024-12-27T08:27:15.000Z","updated":"2024-12-27T08:30:40.000Z","comments":true,"path":"2024/12/27/Zabbix-小知识点记录-持续更新/","link":"","permalink":"https://maydaychen.github.io/2024/12/27/Zabbix-%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/","excerpt":"","text":"User type区别 Zabbix User 可以访问“Monitoring”，默认情况下无权访问任何资源 Zabbix Admin 可以访问“Monitoring”和“Configuration”，默认情况下无权访问任何资源 Zabbix Super Admin 可以访问所有内容，对所有主机具有读写访问权限 Zabbix Alert限制Zabbix只会把报警发送给对这个Host至少有“Read”权限的用户 Discovery actions跟Autoregistration actionsauto-registration can only find the servers installed agent or proxy, but network discovery can find not only servers, but also VM or othersauto-registration can configure some actions after it find and add the servers, such as link template or others, but network discovery can’t 公示计算最好是计算具有相同update time的item，不然的话如果部分item数据已更新但另一部分没有，容易导致计算错误 默认账号Account: AdminPass: zabbix Zabbix组件 Zabbix Server 根据监控规模和数据量确定服务器配置，建议数据库使用SSD存储，并合理调整相关参数，如MySQL的“innodb buffer pool size”大小，一般为主机内存的75% - 80%。 Zabbix Proxy 配置需考虑监控主机数量和NVPS（每秒新值数量），建议一个proxy上的NVPS不要超过2000。 Zabbix Agent 版本应与Zabbix Server或Proxy兼容，大版本不能高于Server","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Zabbix-K8S监控浅尝","slug":"Zabbix-K8S监控浅尝","date":"2024-12-26T08:41:05.000Z","updated":"2024-12-27T07:43:15.000Z","comments":true,"path":"2024/12/26/Zabbix-K8S监控浅尝/","link":"","permalink":"https://maydaychen.github.io/2024/12/26/Zabbix-K8S%E7%9B%91%E6%8E%A7%E6%B5%85%E5%B0%9D/","excerpt":"","text":"背景由于项目中需要使用AWS EKS进行部署，传统的在服务器上安装zabbix agent的方法变得不再使用，还好Zabbix从6.0LTS开始就开始适配K8S，所以正好尝试一下 为什么不用Prometheus诚然，在K8S监控领域，Prometheus可以说是绝对的主流，但是我主要有以下几点顾虑，仅为个人观点，欢迎讨论 监控人员没有EKS manager服务器的权限，这就意味着，没法上服务器修改配置文件，每次有配置变更会很被动 监控人员需要有较强的K8S知识才能修改相关的配置，比如alertmanager，而Zabbix从界面上进行配置，会简单很多 Zabbix对各种自定义监控项的支持比较好，例如自定义shell，各种API health check等，而在prometheus中这些都需要自定义exporter，略显繁琐综上所述，导致了我希望可以尝试用Zabbix去监控K8S中的各项指标，才有了这一次的尝试 尝试过程321上链接 https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/app/kubernetes_http这个就是官方的步骤，跟着最下面的setup一步步做就行 安装Install the kubectl and helm tools following the instructions. Clone the repository: 123cd ~git clone https://git.zabbix.com/scm/zt/kubernetes-helm.gitcd kubernetes-helm Export the default values of the chart helm-zabbix to the file $HOME&#x2F;zabbix_values.yaml: 1helm show values . &gt; $HOME/zabbix_values.yaml Change the zabbixProxy.env.ZBX_SERVER_HOST environment variable value in the file $HOME&#x2F;zabbix_values.yaml to the address of the Zabbix server that is used for monitoring and which is reachable by the Zabbix proxy. Other values can be changed according to the environment if needed. List the namespaces of the cluster. 1kubectl get namespaces Create the namespace monitoring if it does not exist in the cluster. 1kubectl create namespace monitoring Deploy the chart in the Kubernetes cluster (update the YAML files paths if necessary). 1helm install zabbix . --dependency-update -f $HOME/zabbix_values.yaml -n monitoring Get the token automatically created for the service account. 1kubectl get secret zabbix-service-account -n monitoring -o jsonpath=&#123;.data.token&#125; | base64 -d 导入模版这一步其实没必要，新的zabbix都会自带这些模版，如果没有再下载导入即可 获取token就是上面的最后一步 创建一个proxy我们将转到Administration -&gt; Proxies来添加Proxy 因为这默认是主动Proxy，所以我们只需要根据zabbix_values.yaml文件中的- name: ZBX_HOSTNAME字段填入对应的Proxy name，其他的保持默认即可(默认名称为zabbix-proxy) 创建一个监控node的host我们需要创建一个主机，用来采集与监控Kubernetes节点相关的指标，并且我们将使用Zabbix低级别自动发现来发现节点并创建新主机 给此主机命名Kubernetes Nodes,并关联模板kubernetes nodes by HTTP.在这个模版里，有两个宏需要被修改 {KUBE.API.ENDPOINT.URL}, 应该设置为Kubernetes API endpoint, 例如https://kubernetes.default.svc.cluster.local:443 {$KUBE.API.TOKEN}, 应该设置为我们之前获取的token添加完主机几分钟后，我们就可以在host页面看到很多新的host，每个host都代表一个node 创建一个监控cluster的host创建一个新的host，该host将代表通过Kubernetes API和kube-state-metrics端点可用的指标 再次单击Create Host按钮，将此主机命名为k8s-cluster-host。 同样选择之前创建的proxy 为该主机关联模板Kubernetes cluster state by HTTP 在Macro部分中，将kube.api.url更改为我们之前使用的相同内容，但这次在末尾省略&#x2F;api。简单地：default.svc.cluster.local:443。 {$KUBE.API.TOKEN} 设置为同样的内容 问题Todo Agent无法连接的问题 Agent照理来说应该是DaemonSet自动创建的，但是现在只有proxy服务器的一个agent，其他node没有agent，很奇怪 Prometheus数据接入，怎么对接prometheus的exporter","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Zabbix-进程逐个理解","slug":"Zabbix-进程逐个理解","date":"2024-12-25T07:39:59.000Z","updated":"2024-12-27T07:51:55.000Z","comments":true,"path":"2024/12/25/Zabbix-进程逐个理解/","link":"","permalink":"https://maydaychen.github.io/2024/12/25/Zabbix-%E8%BF%9B%E7%A8%8B%E9%80%90%E4%B8%AA%E7%90%86%E8%A7%A3/","excerpt":"","text":"Zabbix服务端进程被分为不同的种类，每一种进程负责相应的任务，包括收集原始监控数据、对原始监控数据进行预处理、将预处理后的监控数据同步到数据库、对监控数据进行计算以生成事件、计算和获取内部监控数据，以及对数据库中的数据进行清理等。 zabbix_agentd客户端守护进程，此进程收集客户端数据，例如cpu负载、内存、硬盘使用情况等 zabbix_getzabbix工具，单独使用的命令，通常在server或者proxy端执行获取远程客户端信息的命令。通常用户排错。例如在server端获取不到客户端的内存数据，我们可以使用zabbix_get获取客户端的内容的方式来做故障排查。 zabbix_senderzabbix工具，用于发送数据给server或者proxy，通常用于耗时比较长的检查。很多检查非常耗时间，导致zabbix超时。于是我们在脚本执行完毕之后，使用sender主动提交数据。 zabbix_serverzabbix服务端守护进程。zabbix_agentd、zabbix_get、zabbix_sender、zabbix_proxy、zabbix_java_gateway的数据最终都是提交到server备注：当然不是数据都是主动提交给zabbix_server,也有的是server主动去取数据。 zabbix_proxyzabbix代理守护进程。功能类似server，唯一不同的是它只是一个中转站，它需要把收集到的数据提交&#x2F;被提交到server里。为什么要用代理？代理是做什么的？卖个关子，请继续关注运维生存时间zabbix教程系列。 zabbix_java_gatewayzabbix2.0之后引入的一个功能。顾名思义：Java网关，类似agentd，但是只用于Java方面。需要特别注意的是，它只能主动去获取数据，而不能被动获取数据。它的数据最终会给到server或者proxy。 监控数据的收集进程Zabbix服务器的重要任务之一就是被动接收由Zabbix代理和各种Zabbix客户端发送的监控数据，以及主动向Zabbix代理、Zabbix java gateway和Zabbix客户端等数据源请求数据，其中被动接收数据由trapper类进程实现，主动请求数据则由poller类进程实现。 trapper类进程通过监听TCP套接字来捕获符合通信协议的原始监控数据，poller类进程则使用ConfigCache作为输入，根据缓存信息实现完善的任务调度。trapper类和poller类进程的下游是预处理进程，这两类进程需要将收集到的原始监控数据发送到预处理进程。trapper类进程和poller类进程都会在进程内部维护一个静态变量cached_message，用于暂存待发送的监控数据，并在各种必要的时机将该变量中的消息发送到预处理进程。 trapper类进程Zabbix服务器端的trapper进程负责接收来自Zabbix Agent、Zabbix Proxy、zabbix_sender及其他外部进程发来的请求并进行处理，按照Zabbix 5.0的通信协议规范，trapper进程只能接收JSON格式字符串的请求。 trapper进程由配置文件中的StartTrappers参数决定其启动数量（允许启动0～1000个进程，默认为5个） 注意：至少要运行一个trapper进程用于在web前端展示服务器可用性和队列视图 总体而言，trapper进程所做的事情就是循环从TCP 套接字读取请求消息，然后根据消息类型调用不同的函数进行处理，处理完毕后关闭该套接字连接。即每个循环处理一个请求，每个请求的处理都是在新的连接中进行通信的。 数据处理： 处理agent data和sender data请求：两者处理过程类似，唯一区别是验证过程，agent data要求监控项属于主动客户端（active agent）类型，而发送者数据（sender data）要求监控项属于Zabbix trapper类型。请求的过程中，trapper进程的作用在于验证数据的有效性，包括监控项状态、监控项类型和主机状态等。 处理proxy config请求：将Zabbix服务器的配置信息传输到Zabbix代理。可以由Zabbix代理发送到Zabbix服务器(主动模式，默认)，也可以由Zabbix服务器发送到Zabbix代理（被动模式）。 处理proxy data请求：可能由Zabbix服务器或者被动模式下的Zabbix代理来处理。如果是Zabbix服务器，说明它接收了一批来自Zabbix代理的监控值，此时需要将数据写入缓存或者进行LLD(Low-level discovery，自动发现)处理；如果是被动代理，说明它接收了Zabbix服务器发送的数据请求，此时需要做的是将监控数据回复给Zabbix服务器。从Zabbix 5.0开始，Zabbix代理具有了预处理的能力，所以proxy data中的监控值其实是已经预处理过的，不需要在Zabbix服务器端再次预处理。 snmp trapper进程snmp trapper进程由配置参数StartSNMPTrapper决定其启动数量（允许0或1个进程），默认为0。该进程的工作方式是循环调用get_latest_data()和read_traps()函数，从trap文件（文件路径由SNMPTrapperFile配置参数决定）中读取数据，然后调用parse_traps()函数进行解析处理 poller类进程poller类进程是指以主动方式获取原始监控数据的进程，包括poller进程、unreachable poller进程、ipmi manager&#x2F;poller进程、icmp pinger进程、javapoller进程、proxy poller进程和http poller进程，一共有7种，它们各自负责采集不同类型的监控项数据。与trapper类进程不同的是，poller类进程需要自己执行监控数据采集逻辑，每一种监控项都需要调用不同的函数进行处理才能得到监控数据，而trapper类进程可以直接接收监控数据。从这个角度来说，对于同样数量的监控任务，使用poller工作方式要比使用trapper工作方式的负载更高 unreachable poller进程在网络通信良好并且各方服务正常的情况下，poller进程所处理的Zabbix客户端和SNMP客户端监控项，以及IPMI进程处理的IPMI客户端（IPMIagent）监控项和java poller进程处理的JMX监控项，都能够成功执行并获取监控数据。但是，当出现agent服务故障时，如果继续由原来的poller类进程处理对应的监控项，大量的连接超时就有可能引起整体服务水平下降。unreachable poller进程就是对该问题的解决方案，当客户端（包括Zabbix客户端、SNMP客户端、IPMI客户端和JMX客户端）服务不可用时，对应的监控项会转移到unreachable poller队列中处理。当unreachable poller进程发现某个客户端已经恢复正常时，则将对应的监控项再转移回原始队列中。 一般情况下，由于大部分客户端状态是良好的，因此unreachable poller进程的负载并不高。但是，一旦发生大面积网络故障，会有大量监控项转移到unreachablepoller进程的任务队列中，此时进程的负载会飙升。如果要降低负载，可以考虑增加UnavailableDelay参数值，或者增加unreachable poller进程的启动数量。 预处理进程预处理（preprocessing）进程是从Zabbix 3.4开始新增的一种进程类型，它用于对原始的监控数据进行各种形式的变换和计算，并通过共享内存，将输出结果传递到history syncer进程进行处理。在Zabbix的早期版本中，预处理进程只能运行在Zabbix服务器端，当数据量大时会给Zabbix服务器端造成较大的压力。因此从Zabbix 4.2版本开始，预处理进程可以同时运行在Zabbix服务器端和Zabbix代理端。在这种情况下，由Zabbix代理负责采集的监控数据在传输到Zabbix服务器端之前就已经完成了预处理，直接从Zabbix客户端传输到Zabbix服务器端的数据则需要由Zabbix服务器端完成预处理。 preprocessing进程由1个preprocessing manager(管理者进程)和多个preprocessing worker(工作者进程)进程组成。 processing manager进程负责监听预处理所使用的Unix域套接字并处理由poller &#x2F; trapper进程和preprocessing worker进程发送过来的消息。还会向lld manager进程发送消息，因为原始监控数据中同时包含LLD规则监控项数据，这些数据在预处理完毕以后还需要进行LLD处理（由lld manager和lld worker进程完成） 预处理工作者（preprocessing worker）进程的数量由配置参数StartPreprocessors决定，允许1～1 000个进程。工作者进程负责读取管理者进程发送的进程间通信服务消息，并执行所获得的任务。 LLD进程LLD进程是从Zabbix 5.0开始出现的专门负责LLD规则（LLD rule）监控数据处理的进程，由于底层发现（Low Level Discovery，LLD）得到越来越多的应用，因此这类数据的处理压力随之增加，将这些工作交给单独的进程来处理将有利于性能的提升和将来的进一步扩展。 LLD进程包括lld manager进程和lld worker进程两种，其中管理者进程是唯一的，工作者进程可以启动多个。LLD进程只能运行在Zabbix服务器端，它们位于预处理进程的下游，接收预处理进程发送的消息作为输入，而输出则是对各项监控配置的更新操作。本质上，LLD就是通过解析LLD规则监控项（一种特殊类型的监控项，其配置信息存储在items表中，其监控值不用于存储，只用于更新监控配置）返回的特殊格式的字符串，创建、更新或者删除监控项、触发器、图表或主机，使之与返回结果保持一致。由于LLD规则监控值会按照设定的频率进行更新，因此Zabbix可以随着数据的更新而动态调整监控对象、监控指标和监控参数等。从Zabbix 4.2开始，LLD规则的监控值跟普通监控项一样可以进行预处理，在预处理结束以后，LLD进程再对数据进行解析并更新配置信息，这一方式赋予用户更多对LLD规则数据进行处理的能力，从而增强了底层发现的功能。 lld manager进程虽然只有一个，但是其需要完成的任务有多种，包括注册lldworker进程、接收其他进程发送的消息、给lld worker进程分配任务、处理lldworker进程返回的结果以及响应队列长度请求等。 lld worker进程负责处理lld manager进程分配的任务，即接收并处理通过进程间通信服务发送过来的code 1100消息。总体的处理过程包括解析消息，验证LLD规则有效性（通过ConfigCache），加载filter、LLD macros和overrides，解析LLD消息的JSON数组，进行配置信息更新，以及根据LLD规则监控项状态生成内部事件。lld worker进程的工作机制是被动模式，即发出注册消息以后，并不会主动向管理者进程请求任务，而是等待管理者进程分配任务。 预处理进程和LLD进程处于poller类进程和trapper类进程的下游，负责处理poller类进程和trapper类进程获取的原始监控数据。预处理进程按照用户设置的处理规则对数据进行变换和计算，处理之后的数据传递给history syncer进程处理。预处理进程通过进程间通信服务方式与上游进程通信。处理之后的数据写入共享内存，供下游进程使用。 history syncer进程history syncer进程是Zabbix服务器端最为核心的进程，它负责将监控数据（包括趋势数据）写入数据库和写入缓存、生成并处理事件，以及处理动作（action）并生成升级序列（escalation）等。如果没有history syncer进程，Zabbix服务器将什么也做不了：既不能处理监控数据，又不能生成事件，也不能进行告警。history syncer进程位于预处理进程的下游，它将预处理进程写入HistoryCache和HistoryIndexCache的数据作为输入。 history syncer进程的启动数量由配置文件中的StartDBSyncers参数控制，允许1～100个进程。history syncer进程的作用是将HistoryCache和HistoryIndexCache中的监控值写入数据库中的history表和trends表，同时根据监控值计算触发器表达式，决定是否触发事件。该进程在Zabbix服务器端和Zabbix代理端都存在，但是有所不同，在Zabbix服务器端时，该进程既需要处理监控值（values），也需要处理触发器（triggers），在Zabbix代理端时，该进程只需要处理监控值，而不需要处理触发器，因为触发器表达式统一由Zabbix服务器端处理 处理动作相关进程escalator进程用于处理事件触发的整个动作序列，该进程读取escalations表中的数据并进行处理，并将生成的警报消息插入alerts表中，供alerter进程使用。所以，escalator进程并不实际发送警报消息，而只生成警报。 alerter进程alerter进程族用于实际发送警报，该进程族包括alert syncer进程、alert manger进程和alerter进程 alert syncer进程负责将数据库中的警报信息和媒体类型信息同步到alert manager进程，具体方法是从数据库读取数据，然后构造为进程间通信服务消息并发送到alert manager进程。 alert manager进程负责向alerter进程分发警报处理任务，并接收alerter进程反馈的结果。 alerter进程负责按照alertmanager分配的任务处理警报并反馈结果。task manager进程运行在Zabbix服务器端和Zabbix代理端，它负责处理存储在数据库task表中的远程命令（remote command）、立即检查（check now）、问题确认（problem acknowledge）和问题关闭（problem close）等任务。","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Zabbix-Proxy相关","slug":"Zabbix-Proxy相关","date":"2024-12-24T07:52:38.000Z","updated":"2024-12-27T08:22:50.000Z","comments":true,"path":"2024/12/24/Zabbix-Proxy相关/","link":"","permalink":"https://maydaychen.github.io/2024/12/24/Zabbix-Proxy%E7%9B%B8%E5%85%B3/","excerpt":"","text":"概述服务器一多以及服务器分布在各个不同地区，便需要考虑使用分布式监控，那么我们到底选择proxy还是nodes呢,请看如下的对照表，看完之后，我想你能选到一个你满意的方式 Proxy Node 描述 Lightweight&#x2F;轻量级 Yes No 安装完毕即可,Proxy必须更轻量级 GUI&#x2F;图形界面 No Yes proxy的配置都在servers上，而node是一个完整的server Works independently&#x2F;独立工作 Yes Yes Easy maintenance&#x2F;易于维护 Yes No Automatic DB creation&#x2F;自动生成数据库 Yes No Local administration&#x2F;本地管理 No Yes Ready for embedded hardware Yes No One way TCP connections Yes Yes Centralised configuration&#x2F;集中配置 Yes No proxy配置全部集中在server上，node自己维护自己的配置 Generates notifications&#x2F;通知 No Yes 使用场景 监控远程区域设备 监控本地网络不稳定区域 当zabbix监控上千设备时，使用它来减轻server的压力 简化zabbix的维护 特点zabbix proxy仅仅需要一条tcp连接到zabbix server,所以防火墙上仅仅需要加上一条规则即可.zabbix proxy数据库必须和server分开，否则数据会被破坏，毕竟这两个数据库的表大部分都相同。总之记住，数据库分开即可。 proxy收集到数据之后，首先将数据缓存在本地，然后在一定得时间之后传递给zabbix server.这个时间由proxy配置文件中参数ProxyLocalBuffer and ProxyOfflineBuffer决定. zabbix proxy是一个数据收集器，它不计算触发器、不处理事件、不发送报警 ⚠️ 使用agent active模式，一定要记住在agent的配置文件参数ServerActive加上proxy的IP地址.切记","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Zabbix-密码重置","slug":"Zabbix-密码重置","date":"2024-12-23T08:18:55.000Z","updated":"2024-12-27T08:22:50.000Z","comments":true,"path":"2024/12/23/Zabbix-密码重置/","link":"","permalink":"https://maydaychen.github.io/2024/12/23/Zabbix-%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/","excerpt":"","text":"在使用 zabbix 的过程中由于默认密码过于简单，往往会修改密码并配置为自动登录，时间一长往往忘记密码，造成无法登录的情况，这种情况就需要重置密码。 Zabbix 的密码存储在数据库中，可通过数据库重置。在 Zabbix 5.0 版本之前，zabbix 用户密码使用 MD5 加密方式存储，从 5.0 版本开始使用 Bcrypt 加密方式。 BCrypt 是一种跨平台的文件加密工具，使用的是布鲁斯 · 施内尔在 1993 年发布的 Blowfish 加密算法。它是一种可生成随机盐值的单向 Hash 加密算法，Hash 值中包含了上一步生成的盐值（22 个字符）的不可逆加密算法。同一种明文，每次被加密后的密文都不一样，并且不可反向破解生成明文，破解难度非常大。大大提升了系统的安全性，因此要重置 5.0 以后版本的用户密码就需要注意，不能再使用 MD5 加密方式生成的密码。 可按照以下方法对 zabbix 的 Admin 用户密码进行重置 MySQL 数据库 1234mysql -uzabbix -puse zabbix;updateusersSET passwd=&#x27;$2y$10$92nDno4n0Zm7Ej7Jfsz8WukBfgSS/U0QkIuu8WkJPihXBb2A1UrEK&#x27;where userid=1;quit; PostgreSQL 12345su - postgrespsql\\c zabbix;updateusersSET passwd=&#x27;$2y$10$92nDno4n0Zm7Ej7Jfsz8WukBfgSS/U0QkIuu8WkJPihXBb2A1UrEK&#x27;where userid=1;、q 重置后即可使用账号：Admin 密码：zabbix 登录系统，注意账号 Admin 的 A 为大写，区分大小写。","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Zabbix-性能优化相关","slug":"Zabbix-性能优化相关","date":"2024-12-22T07:46:19.000Z","updated":"2024-12-27T08:03:18.000Z","comments":true,"path":"2024/12/22/Zabbix-性能优化相关/","link":"","permalink":"https://maydaychen.github.io/2024/12/22/Zabbix-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3/","excerpt":"","text":"Zabbix进程及其功能123456789101112131415161718192021报警器(alerter) 该类型的进程是用来发送报警通知的；配置同步器(configuration syncer) 用于将配置文件中的配置信息同步到内存中缓存；数据发送器(data sender) 服务器代理节点用于发送数据的进程（服务器端没有这类进程）；数据库看门狗(db watchdog) 该进程用于监视zabbix系统的数据库状态，当数据库状态变为不可用时，发送警告信息（服务器代理端不支持这类型进程）。自动发现器(discoverer) 用于自动发现设备的进程；步骤(escalator) 用于处理动作中的步骤的进程；心跳发送器(heartbeat sender) 服务器代理端用于发送心跳信息（服务器端没有这类型的进程）；历史数据同步器(history syncer) 用于写历史数据表；管家(housekeeper) 用于清理过期的历史数据的进程；HTTP 轮询器(http poller) 用于轮询web类的监控项目；Ping检查器(icmp pinger) 用于定期的进行ICMP PING检查；ipmi 轮询器（ipmi poller） 用于定期进行ipmi监控项目的检查；java 轮询器(java poller) 用于轮询java 监控项目；分布式节点看守器(node watcher) 用于在不同的分布式节点发送历史数据和配置信息更新的进程；轮询器(poller) 用于普通的被动监控项目的轮询；服务器代理轮询(proxy poller) 用于服务器代理的被动轮询；自我监控(self-monitoring) 用于收集Zabbix系统内部的监控信息；定时器(timer) 用于处理触发器中也时间相关的函数和维护模式的进程；陷入器(trapper) 用于处理主动采集、陷入以及分布式节点间或服务器代理的通信；不可到达轮询器(unreachable poller) 用于轮询不可到达到的设备；vmware 收集器(vmware collector) 负责从vmware服务进程中收集数据（服务器代理端不支持这种类型的进程）； 配置文件解析123456789StartTrappers=20 Trappers初始子进程数StartPollers=20 初始化时启动子进程数量，数量越多，则服务端吞吐能力越强，系统资源消耗越大StartIPMIPollers=1 主要用于IPMI技术用于获取硬件状态场景，如果无相关监控项，建议设置为0StartDiscoverers=1 用于设置自动发现主机的子进程数量StartPingers=10 用于设置启用icmp协议PING主机方式启动子进程数量StartHTTPPollers=1 HTTP主动监测的进程数StartProxyPollers=1 启用多少子进程与代理端通信StartPollersUnreachable=10 默认情况下，zabbix会启动指定进程用于探测某些不可达主机（含IPMI场景）；若场景中含有代理端，建议使用默认，若直接agent较多，根据值调整StartDBSyncers=4 DB同步进程数量 Zabbix Server配置详解： http://t.zoukankan.com/Rohn-p-14788840.html下面是部分参数的展示 配置 默认值 推荐值 StartDBSyncers 4 8，不宜太高，默认值已能处理4000 NVPS StartAlerters 3 6 StartDiscoverers 1 3 StartPollers 5 12 StartPreprocessors 3 6 StartProxyPollers 1 3 StartTrappers 5 12 StartLLDProcessors 2 3 StartEscalators 1 1 CacheSize 256M 缓存大小, 单位为字节。 用于存储主机、监控项、触发器数据的共享内存大小。 Zabbix2.2.3以前的版本最大可配置值为2GB。 CacheUpdateFrequency 60 Zabbix 配置缓存更新频率, 单位为秒 DebugLevel 3 指定调试等级: 0 - Zabbix进程的起停基本信息 1 - 严重（Critical）信息 2 - 错误（Error）信息 3 - 警告（Warning）信息 4 - 调试（Debug）信息 (产生大量信息) 5 - 扩展调试 (产生更多信息) ExportFileSize 1G 每个导出文件的最大限制，单位为字节。仅当ExportDir参数设置后才使用，用于轮转生成导出的文件。 此参数从Zabbix 4.0.0开始支持。 HistoryCacheSize 128M 历史缓存数据大小, 单位为字节。 HistoryIndexCacheSize 16M 历史索引缓存大小, 单位为字节。缓存一个item大概需要大小为100字节的空间。 该参数从Zabbix 3.0.0开始支持。 HistoryStorageDateIndex 1 启用历史数据预处理，可以将数据存储到不同的基于时间的索引: 0 - 禁止 1 - 允许 HistoryStorageURL 你的ES URL 历史数据存储 HTTP[S] URL，用于把历史数据存储到ElasticSearch。 这个参数参考 Elasticsearch 进行配置。 HistoryStorageTypes uint,dbl,str,log,text 以逗号分隔的列表配置哪些类型的历史数据需要存储到Elasticsearch。 这个参数参考 Elasticsearch 进行配置 HousekeepingFrequency 3 Zabbix 执行 housekeeping 的频率 (单位为小时)。 housekeeping负责从数据库中删除过期的信息。 注意 : 为了防止 housekeeper 负载过大 (例如, 当历史和趋势周期大大减小时), 对于每一个监控项，不会在一个housekeeping周期内删除超过4倍HousekeepingFrequency 的过期数据。 因此, 如果 HousekeepingFrequency 是 1小时, 一个周期内不会删除超过4小时的过期信息 (从最旧的数据开始) 。 备注 : 为降低 server压力， housekeeping将在server启动以后，延迟30分钟执行。 因此, 如果 HousekeepingFrequency 是1小时,server启动30分后执行第一次 housekeeping , 然后按1小时为周期重复执行。从Zabbix 2.4.0以后有了这种延迟行为。 从Zabbix 3.0.0开始，可以设置HousekeepingFrequency为0来禁止自动housekeeping。 此时 housekeeping 只能通过 housekeeper_execute 启动， 在一个housuekeeping周期内删除的过期信息时长为从最后一次housekeeping以来到配置周期的4倍,不少于4小时且不大于4天。 也可参见运行控制 选项。 LogFile 日志文件名称。 LogFileSize 128 日志文件大小，单位 MB。 0 - 禁止日志文件自动回滚. 注意 : 如果日志文件达到限定的大小，文件回滚失败, 不管是什么原因, 现有的日志会被截断，并重新记录日志。 LogType file 日志输出类型: file - 写入LogFile 参数指定的日志文件中, system - 写入syslog, console - 控制台输出. 从Zabbix 3.0.0开始支持该参数。 LogSlowQueries 3000 数据库查询消耗时间，大于该时间将会记入日志 (毫秒)。 0 - 不记录慢查询日志。 DebugLevel&#x3D;3时该选项可用。 从Zabbix 1.8.2开始支持该参数 MaxHousekeeperDelete 5000 一个housekeeping周期内，一个任务删除的最大行数 （相应的表名，字段名，值）。 如果设置为0，不限制删除的行数，这种情况，你必须清楚这样做的影响! 从Zabbix 1.8.2 开始支持该参数，仅在对已经被删除的监控项进行历史和趋势数据删除操作时有效 ProxyConfigFrequency 180 Zabbix server 多少秒向Zabbix proxy 发送一次配置数据，用于被动模式的proxy 。 从Zabbix 1.8.3开始支持该参数。 ProxyDataFrequency 1 Zabbix server 多少秒向Zabbix proxy请求一次历史数据， 用于被动模式的proxy。从Zabbix 1.8.3开始支持该参数。 StartDBSyncers 8 数据库进程的初始实例数量。 在版本1.8.5之前，上限是64。 这个参数从Zabbix 1.8.3开始得到了支持 StartAlerters 12 报警进程的初始实例数量。 从Zabbix 3.4.0开始支持该参数 StartDiscoverers 12 发现进程的初始实例数量。 在Zabbix 1.8.5版本之前，最大能设置为255。 StartEscalators 12 escalators进程的初始实例数量。 从Zabbix 3.0.0开始支持该参数 StartHTTPPollers 6 HTTP 轮询进程的初始实例数量 . 在Zabbix 1.8.5版本之前，最大能设置为255。 StartIPMIPollers 3 IPMI 轮询进程的初始实例数量。 在Zabbix 1.8.5版本之前，最大能设置为255。 StartJavaPollers 6 Java 轮询子进程的初始实例数量。 . 从Zabbix 2.0.0开始支持该参数。 StartLLDProcessors 2 Number of pre-forked instances of low-level discovery (LLD) workers1 . The LLD manager process is automatically started when an LLD worker is started. This parameter is supported since Zabbix 4.2.0. StartPingers 12 ICMP pingers进程的初始实例数量1 . 在Zabbix 1.8.5版本之前，最大能设置为255。 StartPollersUnreachable 6 不可达主机 (包括IPMI 和 Java)的轮询进程的初始实例数量。1 . 从Zabbix 2.4.0开始，如果IPMI或Java轮询器启动，那么至少有一个针对不可访问主机的轮询进程必须运行。 在Zabbix 1.8.5版本之前，最大能设置为255。 这个参数从Zabbix 1.8.3版本缺失。 StartPollers 12 轮询进程的初始实例数量。 .注意如果要内部，聚合，计算的监控项能正常工作，这个参数值必须非0。 StartPreprocessors 12 预处理工作进程的初始实例数量。预处理管理进程将跟随预处理工作进程启动 . 从Zabbix 3.4.0开始支持该参数。 数据库优化如果数据库和zabbix在一台机器，可以使用socket连接，速度会提高。数据库zabbix来说，选择InnoDB引擎，效率是其它引擎的1.5倍 对history类型的(history、history_uint等)大表进行拆分操作，关闭housekeeper禁止自动定期清除历史记录数据，因为对于数据库特别是对于InnoDB引擎大数据删除貌似很蛋疼。 可以对数据库配置文件调优，因为都要提交到数据库中，当机器很多时，数据库压力会很大 如果还是太多，可以考虑将mysql单独一台，并设置读写分离，可以用中间件实现。 服务端配置优化关闭服务端的housekeephousekeep是清理历史的机制，配置文件中，默认是每小时启动一次，然后清除监控项设置之外的多余历史记录。比如mysql监控项默认保存90天，他会清除90天以外的，这会导致经常去清理，有时会报错：Zabbix housekeeper processes more than 75% busy 调整监控项很多监控项都是无用的或者目前用不到的，像redis监控模板中的调阅&#x2F;发布监控项应该去掉。 监控项的类型最好使用数字，尽量避免使用字符。字符在数据库中的存储空间使用较大，在设置trigger时也相对麻烦，并且zabbix本身处理数字的效率要相对高。如果业务需要字符类型的监控项，可以适当的降低数据采集的时间间隔以提高处理效率 Trigger中，正则表达式函数last(),nodata()的速度最快，min()、max()、avg()的速度最慢。在使用过程中，尽量选择速度较快的函数。配置Trigger时，也应注意使用正确的逻辑，错误的逻辑可能导致数据库查询较慢的现象。 item监控性默认大部分都是保留90d（天）或者1w（周）的历史数据，趋势图数据保留365天。 其实有趋势图数据即可，历史数据保留7天足够了，采集频率，像磁盘，文件大小等很久才变化的，采集频率可以加大，以达到缓解压力和节省空间的作用 如果主机数量太多，采用代理如果主机数量太多，可以考虑分机房，分业务，分组的方式来用代理中转。zabbix_proxy可以代替服务端收集数据和监控，但是监控结果还是发送到服务端汇总，代理是没有web界面的。 如果机器太多，可以用主动模式，当前所有默认都是被动模式的，客户端启动10051端口，服务端需要去10051取数据。 减少 history 保存时间 减少 item 获取间隔时间 减少不必要的监控项","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Zabbix-Maintenance维护周期","slug":"Zabbix-Maintenance维护周期","date":"2024-12-21T07:48:55.000Z","updated":"2024-12-27T07:51:55.000Z","comments":true,"path":"2024/12/21/Zabbix-Maintenance维护周期/","link":"","permalink":"https://maydaychen.github.io/2024/12/21/Zabbix-Maintenance%E7%BB%B4%E6%8A%A4%E5%91%A8%E6%9C%9F/","excerpt":"","text":"概述我们可以给某些Hosts（Group）设置维护时间,zabbix提供两种维护类型： 依旧收集数据 暂停收集数据 在 服务器维护期间不会生成报警（前提：触发器设置了’Maintenance status &#x3D; not in “maintenance”’），如果在维护期间出现故障，并且没有解决掉，那么在维护周期结束之后，服务器会生成报警.如果你想在维护期间也能收到报 警，那么触发器不需要设置’Maintenance status &#x3D; not in “maintenance”’. 配置配置维护周期 点击Configuration（配置） → Maintenance（维护）—&gt;点击Create maintenance period （创建维护周期） 参数 描述 Name 维护名称 Maintenance type 两种维护类型可选:With data collection - 依旧收集数据No data collection - 暂停收集数据 Active since 维护周期开始时间 Active till 维护结束时间 .Periods 选项卡是维护周期的，可以选择daily, weekly, monthly or one-time，如每周一凌晨6点开始维护，持续2个小时，也就是到八点结束. 如果你想每天执行，也可以选择daily或者在weekly 里选择周一到周天 结果查看维护标识在inventory–&gt;HOSTS-&gt;host inventory的overview里面可以看到维护的标示（扳手）","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Zabbix-Graph相关知识","slug":"Zabbix-Graph相关知识","date":"2024-12-20T07:42:13.000Z","updated":"2024-12-27T07:51:55.000Z","comments":true,"path":"2024/12/20/Zabbix-Graph相关知识/","link":"","permalink":"https://maydaychen.github.io/2024/12/20/Zabbix-Graph%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/","excerpt":"","text":"简易图表在zabbix中，所有数值item值都可以绘制成简易的图表。在Monitoring-&gt;Latest data-&gt;任意一个数值item列上有个Graph,点击便会出现一个简易图表。如下图： 使用历史&#x2F;趋势数据生成图表图表都是基于历史或者趋势数据生成的，在图表的右下角我们可以判断图表是使用什么数据生成的，如果是”data from history”表示使用历史数据生成。如果是“data from trends”表明图表数据来自趋势数据。 关于使用趋势数据: 较老的item历史数据，例如item的历史记录只保留半年，这个时候你查看半年以前的数据，因为历史数据已经被删除了，所以只能使用趋势数据来绘制图表。 数据拥挤，如果图表水平像素超过3600/16，那么不管你的历史记录是否存在，他一定会使用趋势记录，你想想，如果一个item每隔一秒去获取数据，你要查看他10天的数据，那张图片该多乱，这个时候使用趋势记录来绘制图片的效果实际上是一样的。 趋势记录被禁用，如果存在当前时间段item的历史数据，那么将会使用历史记录来绘制图表. 这个特性从Zabbix 2.2.1开始支持 (以往, 如果禁用了趋势记录，那么只会显示一张空白图表，不管历史记录是否存在. 自定义Graph创建自定义图表步骤：Configuration→Hosts（或者templates）,点击hosts&#x2F;template列的Graphs，点击右上角的Create graph 自定义图标属性 属性 描述 Name 图表名称（唯一） Width 图表宽度（单位：像素）(仅用于预览和pie&#x2F;exploded图表). Height 图表高度（单位：像素） Graph type 图表类型 Normal - 常规图表, 值显示为线条 Stacked - 叠图, 显示填充区域 Pie - 饼图 Exploded - “裂开的”饼图，显示部分切出的饼图 Show legend 显示图例,例如item名称与最大、平均、最小的数据，一般显示在图表的下方 Show working time 是否显示工作时间，如果选择这个复选框，那么非工作时间背景为灰色。备注：饼图和爆炸式饼图没有这个参数 Show triggers 如果选择现象，那么触发器将会用红线表示. 两种饼图不包含这个功能 Percentile line (left) 左Y轴百分数. Percentile line (right) 右Y轴百分数 Y axis MIN value Y轴最小值：Calculated - 自动计算Y轴最小值（取item最小值）Fixed - 固.定Y轴最小值. 饼图与裂变式饼图没有这个参数Item - 选中item的最新值（例如你选中某网卡，那么它的最小值将来自这个网卡item的最新值） Y axis MAX value Y轴最大值：Calculated - 自动计算Y轴最大值（取item最大值）Fixed - 固.定Y轴最大值. 饼图与裂变式饼图没有这个参数Item - 选中item的最新值（例如你选中某网卡，那么它的最大值将来自这个网卡item的最新值） 3D view 立体风格图表，仅适用于饼图与爆炸式饼图. Items 监控项，图表的数据来源 自定义图标item属性（可以添加多个item） 参数 描述 Sort order (0→100) 绘图顺序，可以上下拖动items来改变他们的顺序.这个顺序用来决定图层的顺序。 Name item名称 Type Type (仅用于两个饼图图表):Simple - 按比例显示Graph sum - 充满整个饼图一 张图表只允许有一个items是Graph sum，否则报错：ERROR: Cannot display more than one item with type “Graph sum”，通常用于影片，硬盘大小item使用Graph sum，剩余空间则使用simple。这样一个饼图的硬盘使用情况便一目了然。 Function 当一个item有多种数值时,选择一种数值用于图表展示all - 所有值 (最小、平均、最大)min - 仅最小值avg - 仅平均值max - 进最大值 Draw style 绘制风格(只有常规图表存在该选项):Line - 绘制线条Filled region - 绘制填充区域Bold line - 画粗线Dot - 画点Dashed line - 画虚线 Y axis side Y轴在左边还是右边 Colour 颜色 图表预览在创建图表的过程中，我们可以随时预览修改的配置图表，点击标签preview即可。备注：如果是template预览时没有意义的，毕竟没有任何数据。 ⚠️ 如果图表的高度小于120像素，那么图标上将不会展示触发器相关信息","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Zabbix-MSSQL监控","slug":"Zabbix-MSSQL监控","date":"2024-12-19T08:14:15.000Z","updated":"2024-12-27T08:24:54.000Z","comments":true,"path":"2024/12/19/Zabbix-MSSQL监控/","link":"","permalink":"https://maydaychen.github.io/2024/12/19/Zabbix-MSSQL%E7%9B%91%E6%8E%A7/","excerpt":"","text":"背景由于没有升级zabbix agent2的打算，所以采用了官方的template方案PS： 第三方的都是坑，对于MS SQL2019没法使用https://www.zabbix.com/integrations/mssql#mssql_odbc 下载及导入模版Server安装ODBC驱动这一步需要在zabbix server中安装ODBC驱动，这里采用微软官方的 https://learn.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver16&amp;tabs=alpine18-install%2Calpine17-install%2Cdebian8-install%2Credhat7-13-install%2Crhel7-offline 版本采用17版本，因为18可能会有报错 Server由于是Rocky9.3，因此选择RHEL9版本 安装1234567891011121314151617181920#Download appropriate package for the OS version#Choose only ONE of the following, corresponding to your OS version#RHEL 7 and Oracle Linux 7curl https://packages.microsoft.com/config/rhel/7/prod.repo | sudo tee /etc/yum.repos.d/mssql-release.repo#RHEL 8 and Oracle Linux 8curl https://packages.microsoft.com/config/rhel/8/prod.repo | sudo tee /etc/yum.repos.d/mssql-release.repo#RHEL 9curl https://packages.microsoft.com/config/rhel/9/prod.repo | sudo tee /etc/yum.repos.d/mssql-release.reposudo yum remove unixODBC-utf16 unixODBC-utf16-devel #to avoid conflictssudo ACCEPT_EULA=Y yum install -y msodbcsql17# optional: for bcp and sqlcmdsudo ACCEPT_EULA=Y yum install -y mssql-toolsecho &#x27;export PATH=&quot;$PATH:/opt/mssql-tools/bin&quot;&#x27; &gt;&gt; ~/.bashrcsource ~/.bashrc# optional: for unixODBC development headerssudo yum install -y unixODBC-devel 配置查看ODBC是否安装成功， 需要查看odbcinst.ini 123456less odbcinst.ini[ODBC Driver 17 for SQL Server]Description=Microsoft ODBC Driver 17 for SQL ServerDriver=/opt/microsoft/msodbcsql17/lib64/libmsodbcsql-17.10.so.6.1UsageCount=1 配置DSN 1234[sql1] ## 名字可自定义Driver = ODBC Driver 17 for SQL Server 选择上一步的名字Server = 10.202.0.201 ## DB IP地址，端口默认1433TrustServerCertificate = yes 测试1isql &lt;DSN名称&gt; &lt;username&gt; &lt;password&gt; 如果能够进入数据库，则说明配置成功 Zabbix Server端配置配置模版的Macro123&#123;$MSSQL.USER&#125; - 数据库用户&#123;$MSSQL.PASSWORD&#125; - 数据库密码&#123;$MSSQL.DSN&#125; - 数据库DSN名称 Trouble Shooting1. 通过isql命令可以连接，但是在zabbix上不行，提示A network-related or instance-specific error has occurred while establishin解决办法： 查看SELinux以及firewalld，把这俩都关了就好了 2. Microsoft ODBC Driver 18 for SQL Server : SSL Provider: [error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed:self signed certificate]解决办法：在DSN中添加一行配置 1TrustServerCertificate=yes;","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Zabbix-Macros相关","slug":"Zabbix-Macros相关","date":"2024-12-11T07:56:45.000Z","updated":"2024-12-27T07:57:23.000Z","comments":true,"path":"2024/12/11/Zabbix-Macros相关/","link":"","permalink":"https://maydaychen.github.io/2024/12/11/Zabbix-Macros%E7%9B%B8%E5%85%B3/","excerpt":"","text":"变量可以用于如下地方 item名称 item key参数 触发器名称和描述 触发器表达式 其他地方 宏名称宏变量名称定义只允许后面包含后面的字符: A-Z , 0-9 , _ ,. 宏变量优先级 主机宏(checked first) 主机模板定义的宏,如果有多个模板，那么按照模板越靠前那么宏的优先级越高 全局宏(checked last) 自定义宏定义全局宏， Administration → General → Macros，例如宏名称${TTLSA_SITE}，值www.ttlsa.com. 定义主机&#x2F;模板级宏变量，编辑主机或者模板，找到Macros选项卡，定义宏变量 宏变量经常用于替代账号、端口、密码等，例如你的某个监控想有用到账号、密码，可以定义为宏，假如下次账号密码有修改，只需要修改宏即可。而不需要每个监控项都去修改账号密码。","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"群晖DS224plusSHR转basic","slug":"群晖DS224plusSHR转basic","date":"2024-12-10T13:20:24.000Z","updated":"2024-12-27T05:17:00.000Z","comments":true,"path":"2024/12/10/群晖DS224plusSHR转basic/","link":"","permalink":"https://maydaychen.github.io/2024/12/10/%E7%BE%A4%E6%99%96DS224plusSHR%E8%BD%ACbasic/","excerpt":"","text":"为什么要转basic由于买的是群晖DS224+NAS，只有双盘位，导致了如果要组SHR或者Raid的话，就只有一块硬盘的存储空间了，但是吧，由于喜欢拍照+折腾，再加上mac的时光机，导致了存储空间用的很快，没办法，只能痛下决心将之前没经验设置的SHR转成basic模式 准备工作建议备份自己的重要文件，因为数据迁移过程中可能会造成丢失（虽然万幸，我没有） 正式开始 关机，拔出任意一块硬盘，其实不关机个人感觉也可以，毕竟支持热插拔，但是多一事不如少一事 插入刚才那块硬盘，开机，这时候NAS会疯狂报警，建议静音处理 这时候应该有一块是堪用状态，另一块新插入的忘记什么状态了，总之，格式化，创建一个新的存储池 移动共享文件夹如图，直接把所有的共享文件夹从旧的存储空间移动到新的存储空间 移动套件，跟着这个repo一步一步走，甚至可以把docker都给移动过去，就是docker会需要一段时间，比较久https://github.com/007revad/Synology_app_mover?tab=readme-ov-file注意有的套件移动完成后会有提示，需要按照提示修改配置信息 这时候应该大部分的移动都完成了，只需要查漏补缺，如果有没移动的文件，那么手动移动一下就可以了 查看 docker中容器运行情况一般情况下，由于docker的依赖文件路径被修改了，所以会导致docker容器启动报错，需要手动check错误日志并修改对应的配置项 禁用Container Manager套件 使用命令进入&#x2F;volume2&#x2F;@docker&#x2F;containers&#x2F;对应的容器目录 修改config.v2.json 把所有的volume1改成volume2 重启docker 最终步骤这时候其实只需要删除老的存储池和存储空间，并重建，即可拥有两块完全不同的存储池和存储空间，大功告成！","categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"}],"tags":[{"name":"NAS","slug":"NAS","permalink":"https://maydaychen.github.io/tags/NAS/"}]},{"title":"Zabbix-Queue相关","slug":"Zabbix-Queue相关","date":"2024-12-05T07:58:12.000Z","updated":"2024-12-27T08:03:18.000Z","comments":true,"path":"2024/12/05/Zabbix-Queue相关/","link":"","permalink":"https://maydaychen.github.io/2024/12/05/Zabbix-Queue%E7%9B%B8%E5%85%B3/","excerpt":"","text":"概述queue（队列）显示监控项等待刷新的时间,可以看到每种agent类型刷新时间，通过queue可以更好的体现出监控的一个指标.正常情况下，是一片绿色。如果出现过多红色，那么需要留意一下。我们也可以在右上角的下拉条选detail，可以找出到底是哪个item的问题。 远程节点延迟来自子节点（child node）的信息部都不是最新的。master节点接受到的数据都存在一定得延迟（通常情况下，多则需要10秒） 决定子节点信息延迟因素 子节点性能 子节点与主节点之间的通信质量 子节点与主节点之间的时间差 Queue item既然queue也是一项性能指标，那么我们也有很必要把他加入监控项，zabbix提供了内建item zabbix[queue,,] ，from默认为6秒，表示超过多少秒便报警，to默认为infinity，也就是无限制.","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Zabbix-数据库监控数据磁盘使用量解析及预测","slug":"Zabbix-数据库监控数据磁盘使用量解析及预测","date":"2024-12-04T08:21:42.000Z","updated":"2024-12-27T08:22:24.000Z","comments":true,"path":"2024/12/04/Zabbix-数据库监控数据磁盘使用量解析及预测/","link":"","permalink":"https://maydaychen.github.io/2024/12/04/Zabbix-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%91%E6%8E%A7%E6%95%B0%E6%8D%AE%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E9%87%8F%E8%A7%A3%E6%9E%90%E5%8F%8A%E9%A2%84%E6%B5%8B/","excerpt":"","text":"Zabbix对磁盘的决定性因素有四个 每秒处理的数据量这个问题不说，大家也明白。这边的每秒只是一个平均值，例如我有3000个监控项，每60秒刷新一次，那么平均每秒有50（3000&#x2F;60）个数据要处理。就是说每秒有50条数据要插入MySQL 历史记录保存时间zabbix对每个监控项的值都要记录下来，这些记录一般保留几周到几个月，每个值都需要暂用硬盘空间。假如一个数据你要保留30天，而且每秒有50个值要保留，那我们一共有129，600，000（30天24小时3600秒）50个值，一条记录多大，由你的数据库引擎和你存储的数据类型来决定（浮点型，整形，字符型等等），一般来说一条记录需要占用50个字节（一个大概值），在这个案例中129,600,000个记录大约需要（12960000050字节）6.5G的硬盘空间 趋势数据保存时间什么是趋势数据呢？当你查看一周或者一月的图表，图表上看到的MAX&#x2F;MIN&#x2F;AVG&#x2F;COUNT都是取自趋势数据，趋势数据一小时获取一次，一般情况下，趋势数据一条记录大概占用128字节，如果我们想保存5年趋势数据，3000个监控线需要2.4GB（3000个24小时356天*128字节）每年，5年一共16.8G 事件记录保存时间报警、警告、恢复等等事情，一个事件大概占用130个字节，一般情况下不会太多，除非运维做的太糟糕，或者运维要求太严格，把阀值调的很低。假如这个运维今年本命年，既没拜佛有没烧香，更别说给服务器贴灵符，于是这一年每秒钟就有一个事件发生，那么事件这一年占用的数据空间为：1年365天24小时3600秒130字节大概为4.1G空间。 数据库空间计算公式zabbix配置：固定大小，一般&lt;10MB 历史数据：天数*(监控项总数&#x2F;刷新频率)24小时3600秒*50字节 趋势数据：天数（监控项总数&#x2F;3600）24小时3600秒128字节 事件数据：天数事件个数（大概值）24小时3600秒130字节","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Zabbix-执行远程命令","slug":"Zabbix-执行远程命令","date":"2024-12-02T08:00:22.000Z","updated":"2024-12-27T08:01:57.000Z","comments":true,"path":"2024/12/02/Zabbix-执行远程命令/","link":"","permalink":"https://maydaychen.github.io/2024/12/02/Zabbix-%E6%89%A7%E8%A1%8C%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4/","excerpt":"","text":"远程执行命令能做些什么: 重启应用（Apache、nginx、MySQL等等） 使用IPMI接口重启服务器 自动释放磁盘空间（删除老文件，清除&#x2F;tmp目录等等） CPU过载时讲一个虚拟机迁移到另外一台物理服务器 云环境下，一台服务器CPU\\硬盘\\内存\\其他硬件资源不足的情况下，可以自动添加过去 ⚠️ Zabbix proxy不支持远程命令 远程命令最大长度为255字符，同时支持多个远程命令，如需要执行多条命令，只需要另起一行写命令即可，还有，远程命令可以使用宏变量。 配置修改agentd.conf1EnableRemoteCommands = 1 重启agent配置action 在Operations选显卡中选择Remote command 选择远程命令类型(IPMI, Custom script, SSH, Telnet, Global script) 写上远程命令 备注 sudo不用多说了，zabbix用户没有运行某些命令的权限,必须加上. 远程命令，自然是在远程的主机后台运行。Conditions选项卡定义了什么条件下，这个远程命令会被执行，其实这个和前面说的action真没什么区别，大家都能看懂。下图的意思是，在非维护时间Apache应用出现状况，并且严重性级别为Disaster。满足条件之后，就开始执行命令了。 访问权限配置可以配置sudoer文件，使zabbix用户可以执行所有命令 1234# allows &#x27;zabbix&#x27; user to run all commands without password. zabbix ALL=NOPASSWD: ALL# allows &#x27;zabbix&#x27; user to restart apache without password. zabbix ALL=NOPASSWD: /etc/init.d/apache restart","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Teams通过Webhook实现mention某人及踩坑记录","slug":"Teams通过Webhook实现@某人及踩坑记录","date":"2024-04-23T15:02:27.000Z","updated":"2024-12-27T05:13:56.000Z","comments":true,"path":"2024/04/23/Teams通过Webhook实现@某人及踩坑记录/","link":"","permalink":"https://maydaychen.github.io/2024/04/23/Teams%E9%80%9A%E8%BF%87Webhook%E5%AE%9E%E7%8E%B0@%E6%9F%90%E4%BA%BA%E5%8F%8A%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/","excerpt":"","text":"背景我们在使用MS Teams进行沟通的时候，肯定会用到webhook进行消息的自动化发送，但是现在有一个需求，有一些消息需要指定@某些人，而不是单纯的发送消息 实现前面我们说了怎么通过python代码进行通知发送，这次只需要改一些代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import urllib3import jsonhttp = urllib3.PoolManager()def lambda_handler(event, context): # 这是webhook地址 url = &quot;https://xxx.webhook.office.com/webhookb2/xxxxxx&quot; msg = &#123; &quot;type&quot;:&quot;message&quot;, &quot;attachments&quot;:[ &#123; &quot;contentType&quot;:&quot;application/vnd.microsoft.card.adaptive&quot;, &quot;contentUrl&quot;:&#x27;&#x27;, &quot;content&quot;:&#123; &quot;$schema&quot;:&quot;http://adaptivecards.io/schemas/adaptive-card.json&quot;, &quot;type&quot;:&quot;AdaptiveCard&quot;, &quot;version&quot;:&quot;1.2&quot;, &quot;body&quot;: [ &#123; &quot;type&quot;: &quot;TextBlock&quot;, &quot;text&quot;: &quot;Hi &lt;at&gt;Adele UPN&lt;/at&gt;, &lt;at&gt;Adele Microsoft Entra ID&lt;/at&gt;&quot; &#125; ], &quot;msteams&quot;: &#123; &quot;entities&quot;: [ &#123; &quot;type&quot;: &quot;mention&quot;, &quot;text&quot;: &quot;&lt;at&gt;Adele UPN&lt;/at&gt;&quot;, &quot;mentioned&quot;: &#123; &quot;id&quot;: &quot;AdeleV@contoso.onmicrosoft.com&quot;, &quot;name&quot;: &quot;Adele Vance&quot; &#125; &#125;, &#123; &quot;type&quot;: &quot;mention&quot;, &quot;text&quot;: &quot;&lt;at&gt;Adele Microsoft Entra ID&lt;/at&gt;&quot;, &quot;mentioned&quot;: &#123; &quot;id&quot;: &quot;87d349ed-44d7-43e1-9a83-5f2406dee5bd&quot;, &quot;name&quot;: &quot;Adele Vance&quot; &#125; &#125; ] &#125; &#125; &#125; ]&#125; encoded_msg = json.dumps(msg).encode(&quot;utf-8&quot;) resp = http.request(&quot;POST&quot;, url, body=encoded_msg) print( &#123; &quot;message&quot;: event[&quot;Records&quot;][0][&quot;Sns&quot;][&quot;Message&quot;], &quot;status_code&quot;: resp.status, &quot;response&quot;: resp.data, &#125; ) 可以看到一下变更点 body中的TextBlock添加了Adele UPN 字段，其中Adele UPN可以为用户名 添加msteams块，其中指定type为mention， id可以为UserId，也可以为用户邮箱，也可以为MS Entra Object ID,key都是id name字段，可以把变更点1中的用户名改为别的字段，但是不影响@用户的效果 坑点切记！@mention功能不支持Guest账户，也就是说只有在这个Teams中的用户才能被@！","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Hexo-valine评论系统接口404问题解决","slug":"Hexo-valine评论系统接口404问题解决","date":"2024-03-16T09:08:57.000Z","updated":"2024-12-27T05:46:42.000Z","comments":true,"path":"2024/03/16/Hexo-valine评论系统接口404问题解决/","link":"","permalink":"https://maydaychen.github.io/2024/03/16/Hexo-valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3404%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","excerpt":"","text":"问题描述在配置valine评论系统时，突然发现评价无法查看，通过控制台发现是接口404了，很奇怪 问题排查 通过F12可以看到，他调用的接口访问信息中是显示他需要访问的Class的，但是我们在LeanCloud中并没有这个Class，所以怀疑是缺少这个Class导致的问题 问题解决 在LeanCloud的控制台中，在数据存储-&gt;结构化数据选项中，有一个创建Class的按钮，咱们需要手动创建一个叫做Comment的Class,在创建完成后，刷新博文页面，会发现已经可以查看评论了","categories":[{"name":"博客相关","slug":"博客相关","permalink":"https://maydaychen.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://maydaychen.github.io/tags/Hexo/"}]},{"title":"Linux-scp到服务器时报错Permissions 0644 for 'xx.pem' are too open","slug":"Linux-scp到服务器时报错Permissions-0644-for-xx-pem-are-too-open","date":"2024-03-15T16:58:52.000Z","updated":"2024-12-27T05:11:15.000Z","comments":true,"path":"2024/03/16/Linux-scp到服务器时报错Permissions-0644-for-xx-pem-are-too-open/","link":"","permalink":"https://maydaychen.github.io/2024/03/16/Linux-scp%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E6%8A%A5%E9%94%99Permissions-0644-for-xx-pem-are-too-open/","excerpt":"","text":"问题Permissions 0644 for &#39;xx.pem&#39; are too open. It is required that your private key files are NOT accessible by others. This private key will be ignored. Load key &quot;xx.pem&quot;: bad permissions ec2-user@35.77.46.6: Permission denied (publickey,gssapi-keyex,gssapi-with-mic). lost connection 解决方案看日志报出的错误，”Permissions 0644 for ‘xx.pem’ are too open”，pen文件的权限太大太open了。使用ll(ls -al)命令查看了私钥文件的权限，发现和错误一样，是644所以需要使用chmod命令修改文件的权限 chmod 600 xx.pem之后再尝试一遍，完美执行","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/tags/Linux/"}]},{"title":"Linux文件清空的几种方法","slug":"Linux文件清空的几种方法","date":"2024-03-15T16:57:47.000Z","updated":"2024-12-27T05:13:56.000Z","comments":true,"path":"2024/03/16/Linux文件清空的几种方法/","link":"","permalink":"https://maydaychen.github.io/2024/03/16/Linux%E6%96%87%E4%BB%B6%E6%B8%85%E7%A9%BA%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/","excerpt":"","text":"使用重定向的方法 12345[root@centos7 ~]# du -h test.txt 4.0K test.txt[root@centos7 ~]# &gt; test.txt [root@centos7 ~]# du -h test.txt 0 test.txt 使用true命令重定向清空文件 12345[root@centos7 ~]# du -h test.txt 4.0K test.txt[root@centos7 ~]# true &gt; test.txt [root@centos7 ~]# du -h test.txt 0 test.txt 使用cat&#x2F;cp&#x2F;dd命令及&#x2F;dev&#x2F;null设备来清空文件 1234567891011121314151617181920212223[root@centos7 ~]# du -h test.txt 4.0K test.txt[root@centos7 ~]# cat /dev/null &gt; test.txt [root@centos7 ~]# du -h test.txt 0 test.txt###################################################[root@centos7 ~]# echo &quot;Hello World&quot; &gt; test.txt [root@centos7 ~]# du -h test.txt 4.0K test.txt[root@centos7 ~]# cp /dev/null test.txt cp：是否覆盖&quot;test.txt&quot;？ y[root@centos7 ~]# du -h test.txt 0 test.txt##################################################[root@centos7 ~]# echo &quot;Hello World&quot; &gt; test.txt [root@centos7 ~]# du -h test.txt 4.0K test.txt[root@centos7 ~]# dd if=/dev/null of=test.txt 记录了0+0 的读入记录了0+0 的写出0字节(0 B)已复制，0.000266781 秒，0.0 kB/秒[root@centos7 ~]# du -h test.txt 0 test.txt 使用echo命令清空文件 1234567[root@centos7 ~]# echo &quot;Hello World&quot; &gt; test.txt [root@centos7 ~]# du -h test.txt 4.0K test.txt[root@centos7 ~]# echo -n &quot;&quot; &gt; test.txt ==&gt;要加上&quot;-n&quot;参数，默认情况下会&quot;&quot;，也就是回车符[root@centos7 ~]# du -h test.txt 0 test.txt 使用truncate命令清空文件 12345[root@centos7 ~]# du -h test.txt 4.0K test.txt[root@centos7 ~]# truncate -s 0 test.txt -s参数用来设定文件的大小，清空文件，就设定为0；[root@centos7 ~]# du -h test.txt 0 test.txt","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/tags/Linux/"}]},{"title":"Zabbix-监控的目标主机默认只显示20条图形","slug":"Zabbix-监控的目标主机默认只显示20条图形-zabbix显示-不全-缺失","date":"2024-03-15T16:45:32.000Z","updated":"2024-12-27T07:38:36.000Z","comments":true,"path":"2024/03/16/Zabbix-监控的目标主机默认只显示20条图形-zabbix显示-不全-缺失/","link":"","permalink":"https://maydaychen.github.io/2024/03/16/Zabbix-%E7%9B%91%E6%8E%A7%E7%9A%84%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%E9%BB%98%E8%AE%A4%E5%8F%AA%E6%98%BE%E7%A4%BA20%E6%9D%A1%E5%9B%BE%E5%BD%A2-zabbix%E6%98%BE%E7%A4%BA-%E4%B8%8D%E5%85%A8-%E7%BC%BA%E5%A4%B1/","excerpt":"","text":"监控的目标主机默认只显示20条图形 ( zabbix 显示 不全 缺失) 解决方法：sudo vi &#x2F;usr&#x2F;share&#x2F;zabbix&#x2F;include&#x2F;defines.inc.php 修改文件 ZBX_MAX_GRAPHS_P ER_PAGE 这个变量默认是20，把它改成60","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Grafana-Origin not allowed","slug":"Grafana-Origin-not-allowed","date":"2024-03-15T16:44:22.000Z","updated":"2024-12-27T05:13:56.000Z","comments":true,"path":"2024/03/16/Grafana-Origin-not-allowed/","link":"","permalink":"https://maydaychen.github.io/2024/03/16/Grafana-Origin-not-allowed/","excerpt":"","text":"上周 Grafana 工作没有任何问题，但更新到 8.3.5 后我无法再登录。在登录屏幕中，输入我的用户名和密码后，会出现一条消息：“Origin not allowed”。 在 grafana.log 文件中，我看到一行：lvl&#x3D;eror msg&#x3D;”无法根据 cookie 查找用户” logger&#x3D;context error&#x3D;”未找到用户令牌” 解决方案：在nginx的conf.d文件中，有一个grafana.conf的文件，需要在配置文件中增加 1proxy_set_header Host $http_host; //added after upgrade from 8.1 to 8.4.1 for origin not allowed error 但是发现还是不行，看到说可以把$http_host改成自己的domain，于是尝试下 1proxy_set_header Host domain.com 最后重启nginx 12sudo systemctl restart nginxsudo systemctl status nginx 然后刷新页面，登录，可以进去了","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Mac-Terminal终端没有ll命令解决办法","slug":"Mac-Terminal终端没有ll命令解决办法","date":"2024-03-15T16:26:52.000Z","updated":"2024-12-27T05:13:56.000Z","comments":true,"path":"2024/03/16/Mac-Terminal终端没有ll命令解决办法/","link":"","permalink":"https://maydaychen.github.io/2024/03/16/Mac-Terminal%E7%BB%88%E7%AB%AF%E6%B2%A1%E6%9C%89ll%E5%91%BD%E4%BB%A4%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"首先在 ~&#x2F;.bash_profile 文件中加入如下命令(如果没有就touch一个)alias ll=&#39;ls -alF&#39; 随后执行source ~/.bash_profile命令，使修改生效 这样就可以使用 ll 命令了，但是这样有一个问题，每次新开的终端 ll 命令都会失效 以下是解决方案 在 ～&#x2F;.zshrc 文件中加入如下命令source ~/.bash_profile如果找不到.zshrc 文件，跟上面一样touch一个就完事了 执行source ~/.zshrc使文件生效，之后的每次ll就都会起作用了","categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"}],"tags":[{"name":"MacOS","slug":"MacOS","permalink":"https://maydaychen.github.io/tags/MacOS/"}]},{"title":"Mac-Edge浏览器跟Chrome浏览器触控板无法右击的解决办法","slug":"Mac-Edge浏览器跟Chrome浏览器触控板无法右击的解决办法","date":"2024-03-15T16:25:55.000Z","updated":"2024-12-27T05:57:10.000Z","comments":true,"path":"2024/03/16/Mac-Edge浏览器跟Chrome浏览器触控板无法右击的解决办法/","link":"","permalink":"https://maydaychen.github.io/2024/03/16/Mac-Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%9FChrome%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A6%E6%8E%A7%E6%9D%BF%E6%97%A0%E6%B3%95%E5%8F%B3%E5%87%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"问题不知道从什么时候开始，用mac的触控板，双指点击已经无法在浏览器上跳出右键的那个菜单了，实测edge跟chrome都一样 解决办法 经过各种测试，发现是因为我装了一个crxMouse插件，该插件会有一个Linux&#x2F;Mac选项，如果把它去掉勾选，问题解决，所以确定是因为这个至于这是干嘛的，不太确定，不过毕竟现在已经不用鼠标，转投触控板，所以这个插件对我来说也没有什么用了","categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"}],"tags":[{"name":"MacOS","slug":"MacOS","permalink":"https://maydaychen.github.io/tags/MacOS/"}]},{"title":"Alfred 支持edge浏览器书签","slug":"Alfred-支持edge浏览器书签","date":"2024-03-15T09:37:26.000Z","updated":"2024-12-27T05:07:45.000Z","comments":true,"path":"2024/03/15/Alfred-支持edge浏览器书签/","link":"","permalink":"https://maydaychen.github.io/2024/03/15/Alfred-%E6%94%AF%E6%8C%81edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B9%A6%E7%AD%BE/","excerpt":"","text":"众所周知，在Alfred上只有Safari跟Chrome浏览器的支持，甚至都不可以选择别的浏览器在Alfred 社区里，开发者也是直接说了这两个是mac上的用的人最多的浏览器，目前没有添加其他浏览器书签支持的计划，所以我们只能自己摸索但是说实在的，edge浏览器在国内有着先天的优势，各种同步功能的正常使用已经让它在国内越来越受欢迎，所以加入一个edge浏览器的支持个人认为还是很有必要的 低效方法：装一个Chrome, 然后把edge书签导入过去 好了，不开玩笑了，下面记录一个在社区看到的很好用的方法 正经记录step 1. 还是需要一个chrome浏览器，所以还是装一个吧step 2. link edge’s bookmarks to chromecd ~/Library/Application\\ Support/Google/Chrome/Default//这一步如果新安装的chrome是不需要的，因为没有这个文件 mv Bookmarks Bookmarks_233.bakln -s ~/Library/Application\\ Support/Microsoft\\ Edge/Default/Bookmarks ./Bookmarks贴一个ln -s命令详解https://blog.csdn.net/qianxuedegushi/article/details/108145547 然后再用alfred试一下，可以显示edge的书签了","categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"}],"tags":[]},{"title":"Git配置代理","slug":"Git配置代理","date":"2024-03-13T23:05:42.000Z","updated":"2024-03-15T09:58:22.000Z","comments":true,"path":"2024/03/14/Git配置代理/","link":"","permalink":"https://maydaychen.github.io/2024/03/14/Git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/","excerpt":"","text":"参考文章文章写的很棒，我就是参考这个 配置git代理（带用户名）git config –global http.proxy http://username:pass@server:portgit config –global https.proxy https://username:pass@server:port 打开git配置文件1open ~/.gitconfig","categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://maydaychen.github.io/tags/Git/"}]},{"title":"Linux相关简易操作汇总","slug":"Linux相关简易操作汇总","date":"2024-02-15T07:22:23.000Z","updated":"2024-12-27T05:13:56.000Z","comments":true,"path":"2024/02/15/Linux相关简易操作汇总/","link":"","permalink":"https://maydaychen.github.io/2024/02/15/Linux%E7%9B%B8%E5%85%B3%E7%AE%80%E6%98%93%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/","excerpt":"","text":"Ubuntu获取root权限 输入命令：sudo su; 屏幕上会回显要求输入当前用户密码的提示，输入密码即可获得管理员权限; 若想退出管理员权限可输入命令：su 用户名. Ubuntu vim显示行数 进入终端，在命令行中输入cd &#x2F;etc&#x2F;vim 后敲回车，进入&#x2F;etc&#x2F;vim目录； 进入etc&#x2F;vim目录后，找到vimrc文件（vim的初始化文件），使用cp命令对其进行备份，命令为：cp vimrc vimrc.bak（必须要有管理员权限，否则无法成功） 用管理员权限打开vimrc，命令为：sudo vi vimrc 打开后，在vimrc文件最后加入一行命令：set nu; 加完后，写入，退出，（esc -&gt; :wq），重新使用vim打开任意文件即可发现有行号的标示。 navicat for MySQL无法连接Linux服务器中的MySQL 1130错误 输入mysql -p进入MySQL，输入密码 mysql&gt; grant all privileges on . to root@”%” identified by “root”;结果如下：Query OK, 0 rows affected, 1 warning (0.00 sec) 退出数据库mysql&gt; exit 将&#x2F;etc&#x2F;mysql&#x2F;my.cnf文件中bind-address&#x3D;127.0.0.1 这句话注释掉 sudo &#x2F;etc&#x2F;init.d&#x2F;mysql restart 重启MySQL服务成功！此时navicat客户端已可连接服务器MySQL","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/tags/Linux/"}]},{"title":"Nginx代理端口","slug":"Nginx代理端口","date":"2024-01-25T06:57:07.000Z","updated":"2024-12-27T05:13:56.000Z","comments":true,"path":"2024/01/25/Nginx代理端口/","link":"","permalink":"https://maydaychen.github.io/2024/01/25/Nginx%E4%BB%A3%E7%90%86%E7%AB%AF%E5%8F%A3/","excerpt":"","text":"Nginx 安装参照这个链接就好了http://nginx.org/en/linux_packages.html#RHEL使用nginx -V， 看到如下界面，就OK了 Nginx配置在&#x2F;etc&#x2F;nginx&#x2F;nginx.conf最下面加入如下代码shell stream &#123; upstream ssh&#123; server 127.0.0.1:22; &#125; server &#123; listen 8022; proxy_connect_timeout 1h; proxy_timeout 1h; proxy_pass ssh; &#125; &#125; 重载配置systemctl reload nginx然后就可以用8022端口去连接服务器啦","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/tags/Linux/"}]},{"title":"HomeAssistant笔记--更换iOS Themes主题","slug":"HomeAssistant更换iOS-Themes主题","date":"2023-11-24T23:58:37.000Z","updated":"2024-12-27T05:20:59.000Z","comments":true,"path":"2023/11/25/HomeAssistant更换iOS-Themes主题/","link":"","permalink":"https://maydaychen.github.io/2023/11/25/HomeAssistant%E6%9B%B4%E6%8D%A2iOS-Themes%E4%B8%BB%E9%A2%98/","excerpt":"","text":"主题链接：https://github.com/basnijholt/lovelace-ios-themes 配置过程 主题需要在HACS中安装，搜索iOS应该就能看到 配置中加入: 123456文件名： /config/configuration.yaml# Load frontend themes from the themes folderfrontend: themes: !include_dir_merge_named themes 把主题放置在themes下themes文件夹在docker中HA的根目录下 建www目录存放图片资源 注意：www文件夹与themes文件夹同一层级 在www目录中建立跟themes目录中一样的文件夹名称，例如这里叫做ios-themes 在www的插件文件夹中，修改ios-themes.yaml 1234567891011主要是这边的修改把www改为local, 路径更改background-image: &quot;center / cover no-repeat fixed url(&#x27;/hacsfiles/themes/homekit-bg-dark-green.jpg&#x27;)&quot;改成background-image: &quot;center / cover no-repeat fixed url(&#x27;/local/ios-themes/homekit-bg-dark-green.jpg&#x27;)&quot; local文件夹其实就是值得www文件夹（注意不是把www文件夹改名成local文件夹） 如果不改的话，系统会找不到这个图片，导致首页不会修改背景图 重启HA","categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"}],"tags":[{"name":"NAS","slug":"NAS","permalink":"https://maydaychen.github.io/tags/NAS/"}]},{"title":"Ansible笔记--delegate_to指令","slug":"Ansible笔记-delegate-to指令","date":"2023-11-22T02:22:08.000Z","updated":"2024-12-27T05:11:15.000Z","comments":true,"path":"2023/11/22/Ansible笔记-delegate-to指令/","link":"","permalink":"https://maydaychen.github.io/2023/11/22/Ansible%E7%AC%94%E8%AE%B0-delegate-to%E6%8C%87%E4%BB%A4/","excerpt":"","text":"场景介绍目前执行Ansible的过程中，遇到这么一个需求，在远程服务器上执行一系列操作，但是这个操作需要用到一组数据，该数据存在于Ansible服务器中的一个文件中，但是远程服务器无法读取到该文件，所以查到了这个指令，Ansible 的任务委派功能（delegate_to）。 使用 delegate_to 关键字可以委派任务到指定的机器上运行。 在 playbook 的操作如下： 12345678## 读取指定的localhost上的文件并定义为变量- name: read read_csv: path: &quot;&#123;&#123; csv_tmp_path &#125;&#125;&quot; delimiter: &#x27;,&#x27; register: file_list changed_when: false delegate_to: localhost 任务委派功能还可以用于以下场景： 在部署之前将一个主机从一个负载均衡集群中删除； 当你要对一个主机做改变之前去掉相应 dns 的记录； 当在一个存储设备上创建 iscsi 卷的时候； 当使用外的主机来检测网络出口是否正常的时候。 委托（delegate）通过”delegate_to”, 用户可以把某一个任务放在委托的机器上执行. 1234567hosts: webserversserial: 5tasks: - name: take out of load balancer pool command: /usr/bin/take_out_of_pool &#123;&#123; inventory_hostname &#125;&#125; delegate_to: 127.0.0.1 无论定义了hosts是什么，上面的这个task都只会在localhost(即ansible运行的机器)上执行, 如果只是想在本地执行，“delegate_to: 127.0.0.1” 也可以用local_action来代替 1234tasks: - name: take out of load balancer pool local_action: command /usr/bin/take_out_of_pool &#123;&#123; inventory_hostname &#125;&#125; 委托者的facts默认情况下, 委托任务的facts是inventory_hostname中主机的facts, 而不是被委托机器的facts. 在ansible 2.0 中, 设置delegate_facts为true可以让任务去收集被委托机器的facts. 1234567- hosts: app_servers tasks: - name: gather facts from db servers setup: delegate_to: &quot;&#123;&#123;item&#125;&#125;&quot; delegate_facts: True with_items: &quot;&#123;&#123;groups[&#x27;dbservers&#x27;&#125;&#125;&quot; 该例子会收集dbservers的facts并分配给这些机器, 而不会去收集app_servers的facts run_once通过run_once: true来指定该task只能在某一台机器上执行一次. 可以和delegate_to 结合使用 123- command: /opt/application/upgrade_db.py run_once: true delegate_to: web01.example.org 指定在”web01.example.org”上执行这个task 如果没有delegate_to, 那么这个task只会在当前主机组的第一台机器上执行","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"https://maydaychen.github.io/tags/Ansible/"}]},{"title":"Ansible笔记--获取当前日期时间","slug":"Ansible笔记-获取当前日期时间","date":"2023-11-21T05:34:45.000Z","updated":"2024-12-27T05:11:15.000Z","comments":true,"path":"2023/11/21/Ansible笔记-获取当前日期时间/","link":"","permalink":"https://maydaychen.github.io/2023/11/21/Ansible%E7%AC%94%E8%AE%B0-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/","excerpt":"","text":"获取当前日期123- name: Display current date and time ansible.builtin.debug: msg: &quot;Current date and time is &#123;&#123; ansible_date_time.date &#125;&#125;&quot; 获取到的日期格式是YYYY-MM-DD, 如果想改成其他格式，可以使用正则获取年月日 123- name: Format current date ansible.builtin.debug: msg: &quot;Formatted date: &#123;&#123; ansible_date_time.date | regex_replace(&#x27;^(\\\\d&#123;4&#125;)-(\\\\d&#123;2&#125;)-(\\\\d&#123;2&#125;)$&#x27;, &#x27;\\\\3/\\\\2/\\\\1&#x27;) &#125;&#125;&quot; \\1 - 年 \\2 - 月 \\3 - 日 获取当前时间123- name: Display current date and time ansible.builtin.debug: msg: &quot;Current date and time is &#123;&#123; ansible_date_time.time &#125;&#125;&quot; 问题‘ansible_date_time’ is undefined 解决方案： ansible_date_time是事实的一部分，所以需要设置 1gather_facts: true","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"https://maydaychen.github.io/tags/Ansible/"}]},{"title":"小翼管家获取电信光猫超密教程","slug":"小翼管家获取电信光猫超密教程","date":"2023-11-20T14:03:14.000Z","updated":"2024-12-27T05:17:00.000Z","comments":true,"path":"2023/11/20/小翼管家获取电信光猫超密教程/","link":"","permalink":"https://maydaychen.github.io/2023/11/20/%E5%B0%8F%E7%BF%BC%E7%AE%A1%E5%AE%B6%E8%8E%B7%E5%8F%96%E7%94%B5%E4%BF%A1%E5%85%89%E7%8C%AB%E8%B6%85%E5%AF%86%E6%95%99%E7%A8%8B/","excerpt":"","text":"转自https://www.bilibili.com/read/cv22351257/自用，侵删 方法一：苹果手机（最简单） 苹果手机在App Store下载抓包软件stream，及小翼管家（绑定光猫）。连接光猫WiFi stream软件打开HTTMS抓包，安装CA证书并信任 点击开始抓包，打开小翼管家，点击网关设置，然后随便点击（比如指示灯，不点也可以）。 回到stream，停止抓包。点击抓包历史。全部请求找到任意一个含有token&#x3D;的POST网址并点击进去（不行就多试几个POST网址），点击右上角向上的箭头，弹出更多操作，点击编辑重放请求。 点击最下面的请求体最下面一行，点击原始数据，删除清空并粘贴以下代码并点击存储：（注意格式） { “Params”: [], “MethodName”: “GetTAPasswd”, “RPCMethod”: “CallMethod”, “ObjectPath”: “&#x2F;com&#x2F;ctc&#x2F;igd1&#x2F;Telecom&#x2F;System”, “InterfaceName”: “com.ctc.igd1.SysCmd”, “ServiceName”: “com.ctc.igd1” } 最后点击右上角开始按钮，点击响应最下面的BODY即可看到（如果结果返回错误，原因是以上的代码格式不正确或者是POST网址没找对） 注：密码格式：telecomadmin12345678，账号默认是telecomadmin。","categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"}],"tags":[{"name":"NAS","slug":"NAS","permalink":"https://maydaychen.github.io/tags/NAS/"}]},{"title":"Linux系统盘扩容","slug":"Linux系统盘扩容","date":"2023-11-13T11:13:57.000Z","updated":"2024-12-27T05:13:56.000Z","comments":true,"path":"2023/11/13/Linux系统盘扩容/","link":"","permalink":"https://maydaychen.github.io/2023/11/13/Linux%E7%B3%BB%E7%BB%9F%E7%9B%98%E6%89%A9%E5%AE%B9/","excerpt":"","text":"先在云控制台新增容量 运行下面的命令以查看根目录目前的容量 1234567891011[root@ip-172-17-6-219 ~]$ df -hTFilesystem Type Size Used Avail Use% Mounted ondevtmpfs devtmpfs 461M 0 461M 0% /devtmpfs tmpfs 479M 0 479M 0% /dev/shmtmpfs tmpfs 479M 780K 478M 1% /runtmpfs tmpfs 479M 0 479M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 5.6G 2.5G 70% /tmpfs tmpfs 96M 0 96M 0% /run/user/1015tmpfs tmpfs 96M 0 96M 0% /run/user/1014tmpfs tmpfs 96M 0 96M 0% /run/user/0tmpfs tmpfs 96M 0 96M 0% /run/user/1028 运行下面的命令来查看实际容量 12345[root@ip-172-17-6-219 ~]$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 15G 0 disk|-nvme0n1p1 259:1 0 8G 0 part /`-nvme0n1p128 259:2 0 1M 0 part 运行下面的命令来增加容量（最后的1为目标盘在这个nvme0n1）中的序号 12[root@ip-172-17-6-219 ~]$ sudo growpart /dev/nvme0n1 1CHANGED: partition=1 start=4096 old: size=16773087 end=16777183 new: size=31453151 end=31457247 为了验证容量是否已经被添加, 我们可以再次使用lsblk命令 12345[root@ip-172-17-6-219 ~]$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 15G 0 disk|-nvme0n1p1 259:1 0 15G 0 part /`-nvme0n1p128 259:2 0 1M 0 part 根据文件系统不同运行不同的命令 如果是xfs文件系统: sudo xfs_growfs -d &#x2F; 1234567891011[root@ip-172-17-6-219 ~]$ sudo xfs_growfs -d /meta-data=/dev/nvme0n1p1 isize=512 agcount=4, agsize=524159 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1 spinodes=0data = bsize=4096 blocks=2096635, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=1log =internal bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 2096635 to 3931643 如果是ext4文件系统: 1sudo resize2fs /dev/nvme5n1p2","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/tags/Linux/"}]},{"title":"Nginx配置反向代理时出现的13: Permission denied) while connecting to upstream, client: 127.0.0.1","slug":"Nginx配置反向代理时出现的13-Permission-denied-while-connecting-to-upstream-client-127-0-0-1","date":"2023-11-01T07:09:12.000Z","updated":"2024-12-27T05:13:56.000Z","comments":true,"path":"2023/11/01/Nginx配置反向代理时出现的13-Permission-denied-while-connecting-to-upstream-client-127-0-0-1/","link":"","permalink":"https://maydaychen.github.io/2023/11/01/Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%8413-Permission-denied-while-connecting-to-upstream-client-127-0-0-1/","excerpt":"","text":"条件不允许的情况下（不能随意重启计算机）执行下列代码： 1setsebool -P httpd_can_network_connect 1 其他情况下, 可以获取root权限，通过root修改&#x2F;etc&#x2F;selinux&#x2F;config 123456789sudo suvim /etc/selinux/configSELINUX=enforcing改为SELINUX=disabled重启服务器","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/tags/Linux/"}]},{"title":"Hexo更新github pages博客","slug":"Hexo更新github-pages博客","date":"2023-10-12T07:23:01.000Z","updated":"2024-12-26T08:31:32.000Z","comments":true,"path":"2023/10/12/Hexo更新github-pages博客/","link":"","permalink":"https://maydaychen.github.io/2023/10/12/Hexo%E6%9B%B4%E6%96%B0github-pages%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"#文件生成及编辑 1hexo new &quot;文章标题&quot; 通过该命令行，可以在 “博客所在路径\\source_posts\\”下生成一个md文件，文件名称为上面命令行所输入的文章标题 由于生成的是markdown格式的文件，所以建议使用一个markdown编写完成后，复制粘贴到该md文件中。 #文件发布编辑完成后，在命令行输入 1hexo g 文章就会发布到本地，然后通过 1hexo s 将文件变化发布到本地环境，此时可以通过访问localhost:4000，查看自己博客相关变化 #同步到GitHub 1hexo d 成功同步到GitHub（前提是跟GitHub已经配对）！","categories":[{"name":"博客相关","slug":"博客相关","permalink":"https://maydaychen.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://maydaychen.github.io/tags/Hexo/"}]},{"title":"Hexo g报错 Cannot read properties of undefined (reading 'count')","slug":"Hexo-g报错-Cannot-read-properties-of-undefined-reading-count","date":"2023-08-27T14:07:18.000Z","updated":"2024-12-27T05:11:15.000Z","comments":true,"path":"2023/08/27/Hexo-g报错-Cannot-read-properties-of-undefined-reading-count/","link":"","permalink":"https://maydaychen.github.io/2023/08/27/Hexo-g%E6%8A%A5%E9%94%99-Cannot-read-properties-of-undefined-reading-count/","excerpt":"","text":"问题在编译博客的时候，发现了一个问题 12345678910111213141516171819hexo gINFO Validating configINFO Start processingFATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlTypeError: Cannot read properties of undefined (reading &#x27;count&#x27;) at module.exports (/Users/xxx/Documents/blog/node_modules/hexo-baidu-url-submit/lib/generator.js:4:41) at Hexo.tryCatcher (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/util.js:16:23) at Hexo.&lt;anonymous&gt; (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/method.js:15:34) at /Users/xxx/Documents/blog/node_modules/hexo/lib/hexo/index.js:407:22 at tryCatcher (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/util.js:16:23) at MappingPromiseArray._promiseFulfilled (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/map.js:68:38) at PromiseArray._iterate (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/promise_array.js:115:31) at MappingPromiseArray.init (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/promise_array.js:79:10) at MappingPromiseArray._asyncInit (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/map.js:37:10) at _drainQueueStep (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/async.js:97:12) at _drainQueue (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/async.js:86:9) at Async._drainQueues (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/async.js:102:5) at Async.drainQueues [as _onImmediate] (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/async.js:15:14) at process.processImmediate (node:internal/timers:476:21) 排查问题1hexo g --debug 通过debug模式查看问题所在，发现问题所在 12345614:02:48.751 DEBUG Generator: post14:02:48.753 DEBUG Generator: archive14:02:48.753 DEBUG Generator: index14:02:48.754 DEBUG Generator: atom14:02:48.762 DEBUG Generator: baidu_url_generator14:02:48.763 FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html Issue Linkhttps://github.com/hexojs/hexo/issues/2402 该插件的相关文档https://hui-wang.info/2016/10/23/Hexo插件之百度主动提交链接/","categories":[{"name":"博客相关","slug":"博客相关","permalink":"https://maydaychen.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://maydaychen.github.io/tags/Hexo/"}]},{"title":"Docker入门(1)--Docker概述","slug":"Docker入门-1-Docker概述","date":"2023-08-27T09:49:33.000Z","updated":"2024-12-27T05:11:15.000Z","comments":true,"path":"2023/08/27/Docker入门-1-Docker概述/","link":"","permalink":"https://maydaychen.github.io/2023/08/27/Docker%E5%85%A5%E9%97%A8-1-Docker%E6%A6%82%E8%BF%B0/","excerpt":"","text":"Docker与虚拟机的对比虚拟机技术缺点： 资源占用十分多 冗余步骤多（比如开机等） 启动很慢 Docker和传统虚拟机的不同： 传统虚拟机需要虚拟出一个硬件，运行一整个操作系统，然后在系统上安装和运行软件 容器内的应用直接运行在宿主机，容器没有自己的内核的， 也没有虚拟硬件，所以很轻便 每个容器之间互相隔离，每个容器内都有一个属于自己的文件系统，互不影响 Docker组成镜像Image：就好比一个模版，可以通过模版来创建容器服务 通过镜像可以创建多个容器（最终服务&#x2F;项目运行就在容器中） 容器Container：Docker利用容器技术，独立运行一个或一组应用，通过镜像来创建 基本命令：启动，停止，删除 目前可以把容器理解为一个简易的Linux系统 仓库Registry: 远程仓库存放镜像的地方，就好比代码放git 仓库分为公有仓库和私有仓库 如Docker Hub(默认都是国内的，需要配置镜像加速) 云服务商都有容器服务器 Docker是怎么工作的Docker是一个Client-Server架构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问 DockerServer接收到DockerClient的指令，就会执行这个指令 Docker为什么比VM快Docker有着比VM更少的抽象层 Docker利用的是宿主机的内核，但VM需要加载一个分钟级别的Guest OS 所以说，新建一个容器的时候，docker不需要像VM一样重新加载一个OS的内核，省略了加载Guest OS的过程，所以会很快","categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://maydaychen.github.io/tags/Docker/"}]},{"title":"Windows右键实现当前路径打开cmd","slug":"Windows右键实现当前路径打开cmd","date":"2022-03-17T03:49:21.000Z","updated":"2024-12-27T05:13:56.000Z","comments":true,"path":"2022/03/17/Windows右键实现当前路径打开cmd/","link":"","permalink":"https://maydaychen.github.io/2022/03/17/Windows%E5%8F%B3%E9%94%AE%E5%AE%9E%E7%8E%B0%E5%BD%93%E5%89%8D%E8%B7%AF%E5%BE%84%E6%89%93%E5%BC%80cmd/","excerpt":"","text":"转自https://blog.csdn.net/wx_assa/article/details/106880806 ##无管理员权限的cmd新建一个txt文件，并重命名为xxx.reg，并将下放代码复制到文本中 123Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\QOpencmd\\command]&quot;&quot;=&quot;cmd.exe /s /k pushd \\&quot;%V\\&quot;&quot; 运行该注册表文件，在右键菜单中会多出一项 QQOpencmd，即为打开cmd的选项 ##有管理员权限的cmd新建文件同上，代码复制下面的代码 12345Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\runas]&quot;ShowBasedOnVelocityId&quot;=dword:00639bc8[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\runas\\command]@=&quot;cmd.exe /s /k pushd \\&quot;%V\\&quot;&quot; 运行，在右键菜单中会多出一项 以管理员运行(A)，即为以管理员打开cmd的选项","categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://maydaychen.github.io/tags/Windows/"}]},{"title":"常用Windows软件总结","slug":"常用Windows软件总结","date":"2022-03-15T16:28:34.000Z","updated":"2024-12-27T05:17:00.000Z","comments":true,"path":"2022/03/16/常用Windows软件总结/","link":"","permalink":"https://maydaychen.github.io/2022/03/16/%E5%B8%B8%E7%94%A8Windows%E8%BD%AF%E4%BB%B6%E6%80%BB%E7%BB%93/","excerpt":"","text":"为了每次重装电脑的时候不会遗漏相关软件，特写下此文章，提醒自己保持较高生产力 #服务器相关 Xshell远程连接服务器，执行相关操作https://www.netsarang.com/products/xsh_overview.html FileZilla服务器远程文件传输https://filezilla-project.org/ #影音 Listen1支持网易云音乐&#x2F;QQ音乐&#x2F;虾米音乐三合一https://github.com/listen1/listen1_chrome_extension 网易云音乐以前很喜欢，可是现在- -版权实在太少，能听的不多，而且推荐算法工程师可能换人了……https://music.163.com/ win10商店中的爱奇艺没！有！广！告！ #工具 微软 To- Do每日备忘记录提醒https://todo.microsoft.com/zh-cn geek很舒服的卸载工具https://geekuninstaller.com/ TeamViewer远程控制软件，work from home 必备https://www.teamviewer.com/zhCN/ notepad++替代记事本良心直选https://notepad-plus-plus.org/ QuickLook实现mac上的预览功能https://github.com/QL-Win/QuickLook/releases wox感觉写的好的一篇文章 https://github.com/Wox-launcher/Wox/releases Q-Dir同时显示四个资源管理器https://q-dir.en.softonic.com/ 持续更新ing……","categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://maydaychen.github.io/tags/Windows/"}]},{"title":"开发经验谈","slug":"开发经验谈","date":"2022-02-11T07:50:16.000Z","updated":"2024-12-27T05:17:00.000Z","comments":true,"path":"2022/02/11/开发经验谈/","link":"","permalink":"https://maydaychen.github.io/2022/02/11/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E8%B0%88/","excerpt":"","text":"开发层面： 不要过度封装，功能可以封装，但是页面等持谨慎态度，甲方随时可能改动部分页面 对于一个资源文件在多处调用的场景，不能直接覆盖修改，容易在其他地方产生错误 代码规范很重要 改bug前，先想一想改动的代码对其他功能有没有影响，切忌看到啥问题就直接改，容易出事 改完bug需要自己测试一下，不然容易导致问题反复 code review，功能完成后有时间查看一遍实现代码，会用Android Lint等检查工具 项目管理： 要有风险意识，报工期要给自己预留足够的突发事件处理时间 多人开发时，每个人的开发能力有差异，需要有一个主导，尽量保持代码一致性，保证今后的可维护性，不能事不关己高高挂起 一个项目不一定只有一种框架，要根据需求随机应变 需要对功能有细致了解才能进行开发 多切分支，避免一步错，步步错的情况 每天汇总进度，判断项目进展真实情况 其余 都是一家人，不能不爽就喷，控制情绪 不能掌控需求，就只能接受需求","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"Element中upload组件使用多个时绑定index","slug":"Element中upload组件使用多个时绑定index","date":"2021-03-31T05:58:41.000Z","updated":"2024-12-27T07:14:43.000Z","comments":true,"path":"2021/03/31/Element中upload组件使用多个时绑定index/","link":"","permalink":"https://maydaychen.github.io/2021/03/31/Element%E4%B8%ADupload%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E6%97%B6%E7%BB%91%E5%AE%9Aindex/","excerpt":"","text":"问题描述一般我们使用el-upload，是这种用法 123456789&lt;el-upload class=&quot;avatar-uploader&quot; action=&quot;#&quot; :show-file-list=&quot;false&quot; :http-request=&quot;fileUpLoad&quot; &gt; &lt;img v-if=&quot;form.credentialsRealUrl&quot; :src=&quot;form.credentialsRealUrl&quot; class=&quot;avatar&quot;&gt; &lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;/i&gt; &lt;/el-upload&gt; 通过实现http-request方法，来实现上传操作，然后将图片地址赋值给一个变量 但是现在，在使用el-upload过程中，有这么一个需求会有动态数量的upload框，所以不能用写死的fileUpLoad方法，因为默认方法只有一个option参数，没有其他的可选参数，所以我们不知道上传的图片地址到底是该给哪一个变量 解决办法：1:http-request=&quot;(option)=&gt;&#123;return fileUpLoad(option,index)&#125;&quot; 这样可以增加一个index变量，从而去进行一些赋值逻辑了","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://maydaychen.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Element上传文件到阿里云OSS记录","slug":"Element上传文件到阿里云OSS记录","date":"2021-03-27T06:03:16.000Z","updated":"2024-12-27T07:14:43.000Z","comments":true,"path":"2021/03/27/Element上传文件到阿里云OSS记录/","link":"","permalink":"https://maydaychen.github.io/2021/03/27/Element%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91OSS%E8%AE%B0%E5%BD%95/","excerpt":"","text":"vue 通过element el-upload上传到阿里云仓库的步骤 安装ali-oss 1npm install ali-oss 新建配置文件，如ali_oss.js，我这里只是用了他的getFilePath跟getFileNumber部分可以在这里配置oss client，也可以在vue代码中通过接口动态获取，本文使用的是后者，不过提供前者的实现，可以参看下面代码的配置部分 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879let OSS = require(&#x27;ali-oss&#x27;)let region = &#x27;你的region &#x27;//云账号AccessKey有所有API访问权限，建议遵循阿里云安全最佳实践，部署在服务端使用RAM子账号或STS，部署在客户端使用STSlet accessKeyId = &#x27;你的accessKeyId &#x27;let accessKeySecret = &#x27;你的accessKeySecret &#x27;let bucket = &#x27;你的bucket &#x27;//client配置let client = new OSS(&#123; region: region, accessKeyId: accessKeyId, accessKeySecret: accessKeySecret, bucket: bucket&#125;)export default (conf) =&gt; &#123; return new OSS(conf)&#125;;//文件上传export const put = async(filePath, fileUrl) =&gt; &#123; try &#123; let result = await client.put(filePath, fileUrl) return result &#125; catch (e) &#123; console.log(e) &#125;&#125;//oss的地址export const getSystemPath = () =&gt; &#123;return ossPath&#125;//文件的上传地址export const getFilePath = (ObjName, orangeName) =&gt; &#123; let fileName = getFileNumber() + getFileSuffix(orangeName) let result = `/shuyu/admin/$&#123;fileName&#125;` return result&#125;//oss文件名获取随机export const getFileNumber = () =&gt; &#123; let timeNumber = new Date().getTime() let randomNumber = Math.floor(Math.random() * 999999) return timeNumber + &#x27;&#x27; + randomNumber&#125;//获取文件后缀export const getFileSuffix = (fileName) =&gt; &#123; let name = fileName.lastIndexOf(&#x27;.&#x27;)//取到文件名开始到最后一个点的长度 let length = fileName.length let fileSuffix = fileName.substring(name, length) return fileSuffix&#125;//检查文件格式export const checkFileFormat = (fileName) =&gt; &#123; let isJPG = false let type = fileName.substring(fileName.lastIndexOf(&#x27;.&#x27;) + 1).toLowerCase() if (type === &#x27;jpg&#x27; || type === &#x27;png&#x27; || type === &#x27;jpeg&#x27;) &#123; isJPG = true &#125; else if (type === &#x27;mp4&#x27; || type === &#x27;3gp&#x27; || type === &#x27;avi&#x27;) &#123; isJPG = true &#125; return isJPG&#125;//获取录音和视频的时长export const getTimeFromVideo = (file) =&gt; &#123; let time = 0 var url = URL.createObjectURL(file) var audioElement = new Audio(url) audioElement.addEventListener(&#x27;loadedmetadata&#x27;, (_event) =&gt; &#123; time = parseInt(audioElement.duration) return time &#125;) console.log(time)&#125; 如果是直接在JS配置可以跳过这一步，如果通过后台接口返回accessKeyId 等参数就需要这一步 12345678910111213141516//data部分uploadConf: &#123; region: &#x27;oss-cn-beijing&#x27;, accessKeyId: null, accessKeySecret: null, bucket: &#x27;linkdoc-felling&#x27;, stsToken: null&#125;//methods部分getOssToken().then(res =&gt; &#123; this.uploadConf.accessKeyId = res.AccessKeyId this.uploadConf.accessKeySecret = res.AccessKeySecret this.uploadConf.stsToken = res.SecurityToken&#125;) 配置el-upload，自定义http-request方法 123456789&lt;el-upload class=&quot;avatar-uploader&quot; action=&quot;#&quot; :show-file-list=&quot;false&quot; :http-request=&quot;fileUpLoad&quot; &gt; &lt;img v-if=&quot;form.credentialsRealUrl&quot; :src=&quot;form.credentialsRealUrl&quot; class=&quot;avatar&quot;&gt; &lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;/i&gt; &lt;/el-upload&gt; 实现http-request对应的方法如果参照下面的代码，一定别忘记引入我们的js文件 1import ossClient, &#123; getFilePath, getSystemPath &#125; from &#x27;@/utils/ali_oss&#x27; 123456789101112131415//上传文件操作，调用阿里云fileUpLoad(option)&#123;//提前拼接返回地址 let filePath = getFilePath(this.$route.name, option.file.name) if (option.file.size &gt; 2024000) &#123; this.$message.error(&#x27;资源文件大小超出范围&#x27;) return &#125; ossClient(this.uploadConf).put(filePath, option.file).then((res) =&gt; &#123; console.log(res) if (res !== undefined) &#123; this.$message.success(&#x27;上传成功&#x27;) &#125; &#125;)&#125; 至此，上传成功，filePath已经获取到了，如果是加密的数据，则继续调用自己的接口，获取真实可读的图片地址","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://maydaychen.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"微信小程序没有找到可以构建的npm包","slug":"微信小程序-没有找到可以构建的npm包","date":"2021-02-23T07:07:40.000Z","updated":"2024-12-30T15:51:52.844Z","comments":true,"path":"2021/02/23/微信小程序-没有找到可以构建的npm包/","link":"","permalink":"https://maydaychen.github.io/2021/02/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%B2%A1%E6%9C%89%E6%89%BE%E5%88%B0%E5%8F%AF%E4%BB%A5%E6%9E%84%E5%BB%BA%E7%9A%84npm%E5%8C%85/","excerpt":"","text":"前言这段时间重新开始做小程序项目，意外发现小程序竟然可以支持npm了， 从小程序基础库版本 2.2.1 或以上、及开发者工具 1.02.1808300 或以上开始，小程序支持使用 npm 安装第三方包。 但是在引用第三方包的时候出现了一些问题，特此记录 问题 解决办法 命令行进入小程序根目录，输入 1npm init 之后让你输入的任何都不用管，直接回车直到完成 输入命令： 1npm i miniprogram-sm-crypto --production 运行完成后，进入微信开发者工具，依次点击工具 -&gt; 构建npm 应该没有问题了","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://maydaychen.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Python-selenium解决报错SessionNotCreatedException session not created: No matching capabilitie与问题解析","slug":"Python-selenium解决报错SessionNotCreatedException-session-not-created-No-matching-capabilitie与问题解析","date":"2021-01-27T07:18:44.000Z","updated":"2024-12-27T07:24:39.000Z","comments":true,"path":"2021/01/27/Python-selenium解决报错SessionNotCreatedException-session-not-created-No-matching-capabilitie与问题解析/","link":"","permalink":"https://maydaychen.github.io/2021/01/27/Python-selenium%E8%A7%A3%E5%86%B3%E6%8A%A5%E9%94%99SessionNotCreatedException-session-not-created-No-matching-capabilitie%E4%B8%8E%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/","excerpt":"","text":"问题详情根据大佬的教程，在学习使用selenium访问百度的时候，出现了一个驱动器的使用问题，特此记录 问题描述根据大佬的讲解，我下载了chrome的驱动器，但是事实上，我现在用的是新版的Edge浏览器，本身想着这也是Chromium内核，应该没有什么问题，但是实际上却不是 看到报错，一脸懵逼？纳尼？？ 我的edge就是88版本啊？why？难道说这个chrome驱动器只能驱动Chrome浏览器？结果网上一查，还真是……得，去微软官网下载新版的edge驱动器 好了，接下来确实不报错了##接下来，标题上的问题来了 原因是啥呢？ 解决下面看一下我此时的代码 看到了嘛，我还是用的webdriver.Chrome，其实这边应该用webdriver.Edge 总结一下，就是，用什么浏览器，用什么驱动器，代码中调用对应的函数 问题解决！","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://maydaychen.github.io/tags/Python/"}]},{"title":"Python-BeautifulSoup爬取网页过程中会出现乱码","slug":"Python-BeautifulSoup爬取网页过程中会出现乱码","date":"2021-01-26T07:24:16.000Z","updated":"2024-12-27T07:28:28.000Z","comments":true,"path":"2021/01/26/Python-BeautifulSoup爬取网页过程中会出现乱码/","link":"","permalink":"https://maydaychen.github.io/2021/01/26/Python-BeautifulSoup%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81/","excerpt":"","text":"问题描述在尝试爬取小说时，发现爬取到的正文格式是正确的，但是章节列表会出现乱码，经过仔细搜索终于解决，特此记录 ##源代码 123456req = requests.get(url=self.target)bf = BeautifulSoup(req.text, &#x27;html.parser&#x27;)div = bf.findAll(&#x27;div&#x27;, class_=&#x27;listmain&#x27;)a_bf = BeautifulSoup(str(div[0]), &quot;html.parser&quot;)a = a_bf.findAll(&#x27;a&#x27;)print(a[0].) 解决方案确定当前网页的编码格式，可以在控制台中查看，在console中输入1document.charset 下图可以看出，该网页是采用GBK编码 添加代码，将编码格式设置为对应的编码格式123req = requests.get(url=self.target)req.encoding = &#x27;GBK&#x27; //将编码格式设置为网页对应的格式，在这里就是GBKbf = BeautifulSoup(req.text, &#x27;html.parser&#x27;) 问题解决","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://maydaychen.github.io/tags/Python/"}]},{"title":"Vue使用echarts方法及问题小记","slug":"Vue使用echarts方法及问题小记","date":"2021-01-06T07:29:45.000Z","updated":"2024-12-27T07:32:21.000Z","comments":true,"path":"2021/01/06/Vue使用echarts方法及问题小记/","link":"","permalink":"https://maydaychen.github.io/2021/01/06/Vue%E4%BD%BF%E7%94%A8echarts%E6%96%B9%E6%B3%95%E5%8F%8A%E9%97%AE%E9%A2%98%E5%B0%8F%E8%AE%B0/","excerpt":"","text":"echarts官网：http://echarts.apache.org/zh/index.html 安装1npm install echarts -S 引入安装完成后，由于需要全局引入，所以需要在main.js中配置 12Vue.config.productionTip = falseVue.prototype.$echarts = echarts 此处注意，安装完成后，在package.json中看一下echarts的版本 如果是5.0.0，那么上方的引入会报错，此时需要改成 1import * as echarts from &#x27;echarts&#x27;; 即可##使用首先需要在代码块中声明一个div 1&lt;div id=&quot;myChart&quot; style=&quot;height: 400px&quot;&gt;&lt;/div&gt; 随后在mounted方法中绘制图表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354 mounted() &#123; this.drawLine(); &#125;,methods: &#123; drawLine() &#123; // 基于准备好的dom，初始化echarts实例 let myChart = this.$echarts.init(document.getElementById(&#x27;myChart&#x27;)) // 绘制图表 myChart.setOption(&#123; title: &#123; text: &#x27;每日告警数&#x27; &#125;, tooltip: &#123; trigger: &#x27;axis&#x27; &#125;, legend: &#123; data: [&#x27;温度&#x27;, &#x27;湿度&#x27;, &#x27;电流&#x27;, &#x27;电压&#x27;, &#x27;箱门&#x27;, &#x27;水浸&#x27;, &#x27;断电&#x27;, &#x27;无线信号&#x27;] &#125;, grid: &#123; left: &#x27;3%&#x27;, right: &#x27;4%&#x27;, bottom: &#x27;3%&#x27;, containLabel: true &#125;, toolbox: &#123; feature: &#123; saveAsImage: &#123;&#125; &#125; &#125;, xAxis: &#123; type: &#x27;category&#x27;, boundaryGap: false, data: [&#x27;周一&#x27;, &#x27;周二&#x27;, &#x27;周三&#x27;, &#x27;周四&#x27;, &#x27;周五&#x27;, &#x27;周六&#x27;, &#x27;周日&#x27;] &#125;, yAxis: &#123; type: &#x27;value&#x27; &#125;, series: [ &#123; name: &#x27;温度&#x27;, type: &#x27;line&#x27;, stack: &#x27;总量&#x27;, data: [120, 132, 101, 134, 90, 230, 210] &#125;, &#123; name: &#x27;湿度&#x27;, type: &#x27;line&#x27;, stack: &#x27;总量&#x27;, data: [220, 182, 191, 234, 290, 330, 310] &#125; ] &#125;); &#125;, &#125; 这时候！！又出现了一个问题 仔细看，发现Y轴的数量不对劲，解决办法：将上面代码中的series中， 1stack: &#x27;总量&#x27;, 这句话全部去掉，就好了至此，echarts的基本使用方法大体已经结束","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://maydaychen.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"设置div背景颜色透明度但内部元素不透明","slug":"CSS-设置div背景颜色透明度但内部元素不透明","date":"2020-09-15T07:12:43.000Z","updated":"2024-12-27T07:14:17.000Z","comments":true,"path":"2020/09/15/CSS-设置div背景颜色透明度但内部元素不透明/","link":"","permalink":"https://maydaychen.github.io/2020/09/15/CSS-%E8%AE%BE%E7%BD%AEdiv%E8%83%8C%E6%99%AF%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6%E4%BD%86%E5%86%85%E9%83%A8%E5%85%83%E7%B4%A0%E4%B8%8D%E9%80%8F%E6%98%8E/","excerpt":"","text":"需求设置div背景颜色透明度，内部元素不透明： 实现123.demo&#123; background-color:rgba(0,0,0,0.8)&lt;!--最后一个参数设置透明度，前面三个是RGB颜色值--&gt;&#125; 错误方式：1234.demo&#123;background-color:black;opacity:0.75;&#125; 这样会导致div里面的元素内容和背景颜色一起变透明","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://maydaychen.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Android自动区分dev\\release等环境变量并打包","slug":"Android自动区分dev-release等环境变量并打包","date":"2020-06-09T06:22:03.000Z","updated":"2024-12-27T06:29:19.000Z","comments":true,"path":"2020/06/09/Android自动区分dev-release等环境变量并打包/","link":"","permalink":"https://maydaychen.github.io/2020/06/09/Android%E8%87%AA%E5%8A%A8%E5%8C%BA%E5%88%86dev-release%E7%AD%89%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%B9%B6%E6%89%93%E5%8C%85/","excerpt":"","text":"前言平时Android项目打包，都是直接点击build选择release，让编译器自动进行打包操作 但是这样子操作有一个问题，dev环境跟release环境的接口请求地址并不一致，第三方sdk的appid等参数也得改，以至于每次切换环境，都得花好久才能把所有参数改一遍，如果改错了还得重来，被测试那边说，有没有办法可以一步到位，让编译器自动匹配参数呢？ 解决办法所有步骤都在app&#x2F;build.gradle中，都在android{}括号中 我们这边第三方sdk以极光为例 首先，我们需要修改app路径下的build.gradle 第一步定义好自己需要的环境，myDebug跟myRelease名字可以根据需要取 12345678910111213141516android&#123; signingConfigs &#123; myDebug&#123; keyAlias &#x27;xxxx&#x27; keyPassword &#x27;xxxx&#x27; storeFile file(&#x27;jks的路径&#x27;) storePassword &#x27;xxxx&#x27; &#125; myRelease &#123; keyAlias &#x27;xxxx&#x27; keyPassword &#x27;xxxx&#x27; storeFile file(&#x27;jks的路径&#x27;) storePassword &#x27;xxxx&#x27; &#125; &#125;&#125; 第二步123 defaultConfig &#123;//可以在这里面写一些共通的配置信息，比方说versionCode之类的&#125; 第三步分别配置debug环境跟release环境的相关变量，这边我们可以在manifestPlaceholders配置app名称&#x2F;第三方appkey，这些配置可以在manifest文件中去进行引用；也可以通过定义buildConfigField配置不同的环境访问的不同的ip地址，在retrofit相关的httpMethods中去引用 12345678910111213141516171819202122232425262728293031323334353637buildTypes &#123; debug &#123; minifyEnabled false// shrinkResources true signingConfig signingConfigs.debug proguardFiles getDefaultProguardFile(&#x27;proguard-android-optimize.txt&#x27;), &#x27;proguard-rules.pro&#x27; manifestPlaceholders = [ app_label : &quot;@string/app_name_dev&quot;, JPUSH_APPKEY : &quot;xxxxxxx&quot;, //JPush 上生产环境注册的包名对应的 Appkey. JPUSH_CHANNEL: &quot;developer-default&quot; //暂时填写默认值即可. ] applicationIdSuffix = &#x27;.test&#x27; buildConfigField &quot;String&quot;, &quot;BASE_URL&quot;, &quot;\\&quot;http://xxxxx:xxx\\&quot;&quot; &#125; release &#123; minifyEnabled false signingConfig signingConfigs.release proguardFiles getDefaultProguardFile(&#x27;proguard-android-optimize.txt&#x27;), &#x27;proguard-rules.pro&#x27; manifestPlaceholders = [ app_label : &quot;@string/app_name_release&quot;, JPUSH_APPKEY : &quot;xxxxxxx&quot;, //JPush 上生产环境注册的包名对应的 Appkey. JPUSH_CHANNEL: &quot;developer-default&quot;, //暂时填写默认值即可. ] buildConfigField &quot;String&quot;, &quot;BASE_URL&quot;, &quot;\\&quot;http://xxxxx:xxx\\&quot;&quot; &#125; &#125;//这边可以根据版本自定义生成的apk的名字applicationVariants.all &#123; variant -&gt; variant.outputs.all &#123; output -&gt; if (variant.buildType.name.equals(&#x27;debug&#x27;)) &#123; outputFileName = &quot;app-user-uat-release&quot; + &quot;.apk&quot; &#125; else if (variant.buildType.name.equals(&#x27;release&#x27;)) &#123; outputFileName = &quot;app-user-production-release&quot; + &quot;.apk&quot; &#125; &#125; &#125; 第四步现在我们可以在AndroidMenifests文件中，动态地设置app名称等信息,${xxxx}即第三部中在build.gradle中manifestPlaceholders中定义的那些字段 12345678910111213&lt;application android:name=&quot;.MyApplication&quot; android:allowBackup=&quot;false&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:label=&quot;$&#123;app_label&#125;&quot; android:roundIcon=&quot;@mipmap/ic_launcher&quot; android:supportsRtl=&quot;true&quot; android:theme=&quot;@style/AppTheme&quot; tools:replace=&quot;android:allowBackup&quot;&gt; &lt;meta-data android:name=&quot;JPUSH_APPKEY&quot; android:value=&quot;$&#123;JPUSH_APPKEY&#125;&quot; /&gt; &lt;/application&gt; 第五步我们可以在config文件中将BASE_URL赋值为第三步中通过buildConfigField声明的变量 1234public class Config &#123; //正式环境 public static String BASE_URL = BuildConfig.BASE_URL;&#125; 结尾经过上面的五步操作，接下来我们可以在打包时自动区分环境了，不再需要每次切换环境的时候自己去改环境，改appkey之类的了，甚至也不需要给apk进行重命名了，打包的效率提升了不止一点点 ##注意点1. 1234567891011121314signingConfigs &#123; debug&#123; keyAlias &#x27;key0&#x27; keyPassword &#x27;android&#x27; storeFile file(&#x27;../sgi_back.jks&#x27;) storePassword &#x27;android&#x27; &#125; release &#123; keyAlias &#x27;key0&#x27; keyPassword &#x27;android&#x27; storeFile file(&#x27;../sgi_back.jks&#x27;) storePassword &#x27;android&#x27; &#125; &#125; 即第一步，必须要有！不然会报错Could not get unknown property ‘release’ for SigningConfig container 在平时运行时，我们都是直接按绿色的三角形，但是都是默认debug环境，如果想切换运行环境，该怎么办呢？ 该图位于AS的左下角，点击Build Variants，再点击右侧的名称，会给你选择debug还是release环境，选择自己想要运行的环境即可 打包在控制台执行命令 gradlew assemble，执行完毕后会在 app\\build\\outputs\\apk 里产生 所有你配置过的apk文件 在执行打包命令前，最好先执行下 gradlew clean 命令","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]},{"title":"Android编译时部分错误记载","slug":"Android编译时部分错误记载","date":"2020-06-09T06:14:52.000Z","updated":"2024-12-27T06:59:29.000Z","comments":true,"path":"2020/06/09/Android编译时部分错误记载/","link":"","permalink":"https://maydaychen.github.io/2020/06/09/Android%E7%BC%96%E8%AF%91%E6%97%B6%E9%83%A8%E5%88%86%E9%94%99%E8%AF%AF%E8%AE%B0%E8%BD%BD/","excerpt":"","text":"java.lang.IllegalArgumentException: URLDecoder: Illegal hex characters in esJava调用 URLDecoder.decode(str, “UTF-8”); 抛出以上的异常，其主要原因是% 在URL中是特殊字符，需要特殊转义一下， 上面的字符串中’%’是一个中文字符’是’，而转换的实现是将%后面的两个字符一起转为一个16进制数。拿”%是”来转换数字，肯定会有NumberFormatException异常。 类似的如果请求字符串中有’+’，也会有问题。因为’+’被当做空格使用了。 一个解决办法就是将%替换为%25。 123data = data.replaceAll(&quot;%(?![0-9a-fA-F]&#123;2&#125;)&quot;, &quot;%25&quot;);data = data.replaceAll(&quot;\\\\+&quot;, &quot;%2B&quot;);data = URLDecoder.decode(data, &quot;utf-8&quot;); 这里使用了一个特殊正则表达式：零宽负向先行断言(zero-width negative lookahead assertion)，模式为(?!pattern)，代表字符串中的一个位置，紧接该位置之后的字符序列不能匹配pattern。%(?![0-9a-fA-F]{2})意思是’%’开始，但是后面两个字符不是数字，也不是字母。 Android版本27以上not permitted by network security policy由于 Android P(版本27以上) 限制了明文流量的网络请求，非加密的流量请求都会被系统禁止掉。如果当前应用的请求是 htttp 请求，而非 https ,这样就会导系统禁止当前应用进行该请求 解决办法： （推荐）服务器和本地应用都改用 https (推荐) 设置targetSdkVersion &lt;&#x3D; 27 在 res 下新建一个 xml 目录，然后创建一个名为：network_security_config.xml 文件 ，该文件内容如下1234&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;network-security-config&gt;&lt;base-config cleartextTrafficPermitted=&quot;true&quot; /&gt;&lt;/network-security-config&gt; 并在 AndroidManifest.xml application增加配置1android:networkSecurityConfig=&quot;@xml/network_security_config&quot; Received close_notify during handshake问题存在原因：这是Android编译错误，jcenter里面的东西下载不了引起的。 问题解决：在项目的build.gradle文件中将jcenter()换成阿里的源，具体示例代码如下。修改之后再重新Sync Project即可。 12345678repositories &#123; mavenCentral() mavenLocal() // jcenter() maven&#123; url&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27; &#125; maven&#123; url&#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;&#125; google() &#125;","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]},{"title":"IDEA全家桶 搜索项目中所有中文字符","slug":"IDEA全家桶搜索项目中所有中文字符","date":"2020-01-13T07:51:23.000Z","updated":"2024-12-27T06:44:08.000Z","comments":true,"path":"2020/01/13/IDEA全家桶搜索项目中所有中文字符/","link":"","permalink":"https://maydaychen.github.io/2020/01/13/IDEA%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%90%9C%E7%B4%A2%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%89%80%E6%9C%89%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6/","excerpt":"","text":"需求在很多国际性项目中，我们有时候有要求不能出现中文的注释等，全局都要使用英文 但是在开发过程中，为了让自己舒服，肯定是优先选择中文注释，等到正式提交了才会把他们改成英文 那么，这种需求怎么实现呢？ 实现打开全局搜索Edit -&gt; Find -&gt; Find In Path输入正则表达式： 1^((?!(\\*|//)).)+[\\u4e00-\\u9fa5] 即可搜索所有的中文，然后将他们改成英文","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"Android-LinearLayout设置selector并将状态传递到子view","slug":"Android-LinearLayout设置selector并将状态传递到子view","date":"2019-08-22T07:57:02.000Z","updated":"2024-12-27T06:57:33.000Z","comments":true,"path":"2019/08/22/Android-LinearLayout设置selector并将状态传递到子view/","link":"","permalink":"https://maydaychen.github.io/2019/08/22/Android-LinearLayout%E8%AE%BE%E7%BD%AEselector%E5%B9%B6%E5%B0%86%E7%8A%B6%E6%80%81%E4%BC%A0%E9%80%92%E5%88%B0%E5%AD%90view/","excerpt":"","text":"在LinearLayout中，如果同时为LinearLayout与子TextView设置selector，是可以实现的，代码如下 123456789101112131415161718192021222324 &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:id=&quot;@+id/ll_company&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;102dp&quot; android:layout_marginStart=&quot;25dp&quot; android:layout_marginEnd=&quot;25dp&quot; android:layout_marginBottom=&quot;20dp&quot; android:background=&quot;@drawable/selector_company&quot; android:clickable=&quot;true&quot; android:focusable=&quot;true&quot; android:focusableInTouchMode=&quot;true&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_company_name&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;match_parent&quot; android:layout_marginStart=&quot;20dp&quot; android:drawableStart=&quot;@mipmap/company_uncheck&quot; android:drawablePadding=&quot;20dp&quot; android:gravity=&quot;center_vertical&quot; android:text=&quot;test&quot; android:textColor=&quot;@drawable/selector_company_text&quot; android:textSize=&quot;19sp&quot; /&gt;&lt;/LinearLayout&gt; selector文件为：selector_company.xml： 1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:drawable=&quot;@drawable/company_selected&quot; android:state_focused=&quot;true&quot; /&gt; &lt;item android:drawable=&quot;@drawable/company_selected&quot; android:state_checked=&quot;true&quot; /&gt; &lt;item&gt; &lt;shape&gt; &lt;corners android:radius=&quot;15dp&quot; /&gt; &lt;solid android:color=&quot;@color/white&quot; /&gt; &lt;/shape&gt; &lt;/item&gt;&lt;/selector&gt; selector_company_text.xml: 123456&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:state_focused=&quot;true&quot; android:color=&quot;@color/white&quot; /&gt; &lt;item android:state_pressed=&quot;true&quot; android:color=&quot;@color/white&quot; /&gt; &lt;item android:color=&quot;@color/title&quot; android:state_checked=&quot;false&quot; /&gt;&lt;/selector&gt; 此时，textview可以响应pressed状态，但是！！ 无法与LinearLayout一样保持focused状态##解决办法：为TextView加上 1android:duplicateParentState=&quot;true&quot; android:duplicateParentState指的是当前控件是否跟随父控件的(点击、焦点等)状态 PS:网上有说用RadioGroup来实现，但是不适用于用RecyclerView展示的LinearLayoutPS2:尝试过使用CheckBox，但是重复点击会有checked跟unchecked状态重复切换，不适用","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]},{"title":"Android-WebView相关小知识","slug":"Android-WebView相关小知识","date":"2019-07-18T06:49:28.000Z","updated":"2024-12-27T06:58:13.000Z","comments":true,"path":"2019/07/18/Android-WebView相关小知识/","link":"","permalink":"https://maydaychen.github.io/2019/07/18/Android-WebView%E7%9B%B8%E5%85%B3%E5%B0%8F%E7%9F%A5%E8%AF%86/","excerpt":"","text":"webview无法展示alert解决办法： 1mWebView.setWebChromeClient(new WebChromeClient()); Android webview支持获取本地图片或拍照注意：Android6.0以上需要首先获取摄像头权限，不然无法获取照片 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299package com.wshoto.user.anyong.ui.activity;public class BBSActivity extends InitActivity &#123; @BindView(R.id.wv_bbs) WebView mWvBbs; private ValueCallback&lt;Uri&gt; mUploadMessage;// 表单的数据信息 private ValueCallback&lt;Uri[]&gt; mUploadCallbackAboveL; private final static int FILECHOOSER_RESULTCODE = 1;// 表单的结果回调 private Uri imageUri; @Override public void initView(Bundle savedInstanceState) &#123; setContentView(R.layout.activity_bbs); ButterKnife.bind(this); init(); &#125; @Override public void initData() &#123; mWvBbs.loadUrl(&quot;https://xxx&quot;); &#125; private void init() &#123; WebSettings webSettings = mWvBbs.getSettings(); webSettings.setUseWideViewPort(true);//设置此属性，可任意比例缩放 webSettings.setRenderPriority(WebSettings.RenderPriority.HIGH); webSettings.setUseWideViewPort(true); webSettings.setLoadWithOverviewMode(true); webSettings.setJavaScriptEnabled(true); webSettings.setAppCacheMaxSize(1024 * 1024 * 8); String appCachePath = getApplicationContext().getCacheDir().getAbsolutePath(); webSettings.setAppCachePath(appCachePath); webSettings.setAllowFileAccess(true); webSettings.setSupportZoom(true); webSettings.setJavaScriptCanOpenWindowsAutomatically(true); webSettings.setTextSize(WebSettings.TextSize.NORMAL); mWvBbs.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE); //open dom storage webSettings.setDomStorageEnabled(true); //priority high webSettings.setRenderPriority(WebSettings.RenderPriority.HIGH); webSettings.setAppCacheEnabled(true); webSettings.setDatabaseEnabled(true); webSettings.setDatabasePath(BBSActivity.this.getApplicationContext().getCacheDir().getAbsolutePath()); //add by wjj end String ua = webSettings.getUserAgentString(); mWvBbs.setWebChromeClient(new WebChromeClient() &#123; @Override public boolean onShowFileChooser(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, FileChooserParams fileChooserParams) &#123; mUploadCallbackAboveL = filePathCallback; take(); return true; &#125; public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg) &#123; mUploadMessage = uploadMsg; take(); &#125; public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType) &#123; mUploadMessage = uploadMsg; take(); &#125; public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture) &#123; mUploadMessage = uploadMsg; take(); &#125; &#125;); mWvBbs.setWebViewClient(new WebViewClient() &#123; @Override public boolean shouldOverrideUrlLoading(WebView view, String url) &#123; //该方法在Build.VERSION_CODES.LOLLIPOP以前有效，从Build.VERSION_CODES.LOLLIPOP起，建议使用shouldOverrideUrlLoading(WebView, WebResourceRequest)&#125; instead //返回false，意味着请求过程里，不管有多少次的跳转请求（即新的请求地址），均交给webView自己处理，这也是此方法的默认处理 //返回true，说明你自己想根据url，做新的跳转，比如在判断url符合条件的情况下，我想让webView加载http://ask.csdn.net/questions/178242 return false; &#125; @Override public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) &#123; //返回false，意味着请求过程里，不管有多少次的跳转请求（即新的请求地址），均交给webView自己处理，这也是此方法的默认处理 //返回true，说明你自己想根据url，做新的跳转，比如在判断url符合条件的情况下，我想让webView加载https://maydaychen.github.io/ if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123; if (request.getUrl().toString().contains(&quot;github.io&quot;)) &#123; view.loadUrl(&quot;https://maydaychen.github.io/&quot;); return true; &#125; &#125; return false; &#125; &#125;); &#125; @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; super.onActivityResult(requestCode, resultCode, data); if (requestCode == FILECHOOSER_RESULTCODE) &#123; if (null == mUploadMessage &amp;&amp; null == mUploadCallbackAboveL) return; Uri result = data == null || resultCode != RESULT_OK ? null : data.getData(); if (mUploadCallbackAboveL != null) &#123; onActivityResultAboveL(requestCode, resultCode, data); &#125; else if (mUploadMessage != null) &#123; if (result != null) &#123; String path = getPath(getApplicationContext(), result); Uri uri = Uri.fromFile(new File(path)); mUploadMessage.onReceiveValue(uri); &#125; else &#123; mUploadMessage.onReceiveValue(imageUri); &#125; mUploadMessage = null; &#125; &#125; &#125; @SuppressWarnings(&quot;null&quot;) @TargetApi(Build.VERSION_CODES.BASE) private void onActivityResultAboveL(int requestCode, int resultCode, Intent data) &#123; if (requestCode != FILECHOOSER_RESULTCODE || mUploadCallbackAboveL == null) &#123; return; &#125; Uri[] results = null; if (resultCode == Activity.RESULT_OK) &#123; if (data == null) &#123; results = new Uri[]&#123;imageUri&#125;; &#125; else &#123; String dataString = data.getDataString(); ClipData clipData = data.getClipData(); if (clipData != null) &#123; results = new Uri[clipData.getItemCount()]; for (int i = 0; i &lt; clipData.getItemCount(); i++) &#123; ClipData.Item item = clipData.getItemAt(i); results[i] = item.getUri(); &#125; &#125; if (dataString != null) results = new Uri[]&#123;Uri.parse(dataString)&#125;; &#125; &#125; if (results != null) &#123; mUploadCallbackAboveL.onReceiveValue(results); mUploadCallbackAboveL = null; &#125; else &#123; results = new Uri[]&#123;imageUri&#125;; mUploadCallbackAboveL.onReceiveValue(results); mUploadCallbackAboveL = null; &#125; return; &#125; private void take() &#123; File imageStorageDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), &quot;MyApp&quot;); // Create the storage directory if it does not exist if (!imageStorageDir.exists()) &#123; imageStorageDir.mkdirs(); &#125; File file = new File(imageStorageDir + File.separator + &quot;IMG_&quot; + String.valueOf(System.currentTimeMillis()) + &quot;.jpg&quot;); imageUri = Uri.fromFile(file); final List&lt;Intent&gt; cameraIntents = new ArrayList&lt;Intent&gt;(); final Intent captureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE); final PackageManager packageManager = getPackageManager(); final List&lt;ResolveInfo&gt; listCam = packageManager.queryIntentActivities(captureIntent, 0); for (ResolveInfo res : listCam) &#123; final String packageName = res.activityInfo.packageName; final Intent i = new Intent(captureIntent); i.setComponent(new ComponentName(res.activityInfo.packageName, res.activityInfo.name)); i.setPackage(packageName); i.putExtra(MediaStore.EXTRA_OUTPUT, imageUri); cameraIntents.add(i); &#125; Intent i = new Intent(Intent.ACTION_GET_CONTENT); i.addCategory(Intent.CATEGORY_OPENABLE); i.setType(&quot;image/*&quot;); Intent chooserIntent = Intent.createChooser(i, &quot;Image Chooser&quot;); chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, cameraIntents.toArray(new Parcelable[]&#123;&#125;)); BBSActivity.this.startActivityForResult(chooserIntent, FILECHOOSER_RESULTCODE); &#125; @SuppressLint(&quot;NewApi&quot;) @TargetApi(Build.VERSION_CODES.KITKAT) public static String getPath(final Context context, final Uri uri) &#123; final boolean isKitKat = Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT; // DocumentProvider if (isKitKat &amp;&amp; DocumentsContract.isDocumentUri(context, uri)) &#123; // ExternalStorageProvider if (isExternalStorageDocument(uri)) &#123; final String docId = DocumentsContract.getDocumentId(uri); final String[] split = docId.split(&quot;:&quot;); final String type = split[0]; if (&quot;primary&quot;.equalsIgnoreCase(type)) &#123; return Environment.getExternalStorageDirectory() + &quot;/&quot; + split[1]; &#125; &#125; // DownloadsProvider else if (isDownloadsDocument(uri)) &#123; final String id = DocumentsContract.getDocumentId(uri); final Uri contentUri = ContentUris.withAppendedId(Uri.parse(&quot;content://downloads/public_downloads&quot;), Long.valueOf(id)); return getDataColumn(context, contentUri, null, null); &#125; // MediaProvider else if (isMediaDocument(uri)) &#123; final String docId = DocumentsContract.getDocumentId(uri); final String[] split = docId.split(&quot;:&quot;); final String type = split[0]; Uri contentUri = null; if (&quot;image&quot;.equals(type)) &#123; contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI; &#125; else if (&quot;video&quot;.equals(type)) &#123; contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI; &#125; else if (&quot;audio&quot;.equals(type)) &#123; contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI; &#125; final String selection = &quot;_id=?&quot;; final String[] selectionArgs = new String[]&#123;split[1]&#125;; return getDataColumn(context, contentUri, selection, selectionArgs); &#125; &#125; // MediaStore (and general) else if (&quot;content&quot;.equalsIgnoreCase(uri.getScheme())) &#123; return getDataColumn(context, uri, null, null); &#125; // File else if (&quot;file&quot;.equalsIgnoreCase(uri.getScheme())) &#123; return uri.getPath(); &#125; return null; &#125; /** * Get the value of the data column for this Uri. This is useful for * MediaStore Uris, and other file-based ContentProviders. * * @param context The context. * @param uri The Uri to query. * @param selection (Optional) Filter used in the query. * @param selectionArgs (Optional) Selection arguments used in the query. * @return The value of the _data column, which is typically a file path. */ public static String getDataColumn(Context context, Uri uri, String selection, String[] selectionArgs) &#123; Cursor cursor = null; final String column = &quot;_data&quot;; final String[] projection = &#123;column&#125;; try &#123; cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null); if (cursor != null &amp;&amp; cursor.moveToFirst()) &#123; final int column_index = cursor.getColumnIndexOrThrow(column); return cursor.getString(column_index); &#125; &#125; finally &#123; if (cursor != null) cursor.close(); &#125; return null; &#125; /** * @param uri The Uri to check. * @return Whether the Uri authority is ExternalStorageProvider. */ public static boolean isExternalStorageDocument(Uri uri) &#123; return &quot;com.android.externalstorage.documents&quot;.equals(uri.getAuthority()); &#125; /** * @param uri The Uri to check. * @return Whether the Uri authority is DownloadsProvider. */ public static boolean isDownloadsDocument(Uri uri) &#123; return &quot;com.android.providers.downloads.documents&quot;.equals(uri.getAuthority()); &#125; /** * @param uri The Uri to check. * @return Whether the Uri authority is MediaProvider. */ public static boolean isMediaDocument(Uri uri) &#123; return &quot;com.android.providers.media.documents&quot;.equals(uri.getAuthority()); &#125;&#125; webview点击链接跳转系统浏览器解决1webView.setWebViewClient(new WebViewClient()); webview有些图片不显示问题一般是由于Android端使用了https头，而H5端使用了http头，需要两端保持一致在5.0以上的系统中使用混合模式也能解决此问题 123if(Build.VERSION.SDK_INT&gt;=Build.VERSION_CODES.LOLLIPOP）&#123;getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);&#125; 网页调用拨打电话123456789@Override public boolean shouldOverrideUrlLoading(WebView view, String url) &#123; if (url.startsWith(&quot;tel:&quot;)) &#123; Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse(url)); startActivity(intent); return true; &#125; return super.shouldOverrideUrlLoading(view, url); &#125;","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]},{"title":"Android-View相关小知识","slug":"Android-View相关小知识","date":"2019-06-12T06:50:11.000Z","updated":"2024-12-27T14:57:54.300Z","comments":true,"path":"2019/06/12/Android-View相关小知识/","link":"","permalink":"https://maydaychen.github.io/2019/06/12/Android-View%E7%9B%B8%E5%85%B3%E5%B0%8F%E7%9F%A5%E8%AF%86/","excerpt":"","text":"动态设置padding值12ImageView imageView=new ImageView(Contextcontext);imageView.setPadding(left,top,right,bottom); 动态设置margin值123RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(10,10);//这里的单位是像素params.setMargins(0, ScreenUtil.dip2px(5), 0, 0);view.setLayoutParams(params); 动态设置居中123RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(10,10);//这里的单位是像素params.addRule(RelativeLayout.CENTER_HORIZONTAL, RelativeLayout.TRUE);view.setLayoutParams(params); 同时也可以设置其他对齐方式 123lp.addRule(RelativeLayout.ALIGN_WITH_PARENT_TOP);//父容器顶部对齐lp.addRule(RelativeLayout.POSITION_BELOW, view1);//与view1底部对齐lp.addRule(RelativeLayout.ALIGN_LEFT, view2);//与view2左对齐 动态设置宽高123RelativeLayout.LayoutParams Params = (RelativeLayout.LayoutParams)mView.getLayoutParams();Params.height = 100;mView.setLayoutParams(linearParams); RelativeLayout.LayoutParams根据父布局的类型可以改为RelativeLayout.LayoutParams、LinearLayout.LayoutParams、ViewGroup.LayoutParams三选一","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]},{"title":"Android-RecyclerView相关小知识","slug":"Android-RecyclerView相关小知识","date":"2019-05-14T06:50:57.000Z","updated":"2024-12-27T07:00:40.000Z","comments":true,"path":"2019/05/14/Android-RecyclerView相关小知识/","link":"","permalink":"https://maydaychen.github.io/2019/05/14/Android-RecyclerView%E7%9B%B8%E5%85%B3%E5%B0%8F%E7%9F%A5%E8%AF%86/","excerpt":"","text":"recyclerview设置滑动到边缘时无效果模式：1android:overScrollMode=&quot;never&quot; recyclerview设置滚动条不显示：1android:scrollbars=&quot;none&quot; NestedScrollView嵌套RecyclerView，RecyclerView高度设置为match_parent无效NestedScrollView设置android:fillViewport&#x3D;”true” 1234&lt;android.support.v4.widget.NestedScrollView android:layout_width=&quot;match_parent&quot; android:fillViewport=&quot;true&quot; android:layout_height=&quot;match_parent&quot;&gt;","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]},{"title":"Android-TabLayout相关小知识","slug":"Android-TabLayout相关小知识","date":"2019-04-27T06:54:19.000Z","updated":"2024-12-27T07:04:04.000Z","comments":true,"path":"2019/04/27/Android-TabLayout相关小知识/","link":"","permalink":"https://maydaychen.github.io/2019/04/27/Android-TabLayout%E7%9B%B8%E5%85%B3%E5%B0%8F%E7%9F%A5%E8%AF%86/","excerpt":"","text":"TabLayout+ViewPager+Fragment的使用及重复onCreateView问题解决使用TabLayout+ViewPager进行切换现在貌似已经成了很多app的标配，但是最近使用过程中发现有一个问题 如果从页面1点击切换到页面3，然后切换回页面1时，页面1会重新创建，此时会重复调用onCreateView 解决办法：设置缓存页面数 1mContentVp.setOffscreenPageLimit(4); 其中，mContentVp即为ViewPager变量viewPager.setOffscreenPageLimit(int limit) 能够有效地一次性缓存多个Fragment，这样就能够解决在之后每次切换时不会创建实例对象，看起来也会流畅。但是这样的做法，最大的缺点就是容易造成第一次启动时非常缓慢！如果第一次启动时间满足要求的话，可以试试这种简单的办法。 TabLayout+ViewPager，默认首选项设置select()无效由于使用了自定义布局，所以应该操作如下： 1mTabLayout.getTabAt(i).getCustomView().setSelected(true); Tablayout之Tab宽度左右无法填充前段时间做一个项目使用到了Tablayout,可以用来实现类似知乎分栏的效果要使用Tablayout，必须引用Google的Android Support Design库，使用Android Studio 的同学可以直接使用只要在build.gradle中加入 1compile &#x27;com.android.support:design:22.2.0&#x27; 即可 遇到的问题使用中，我需要设置Tab的点击效果，所以我新建了一个selector，并将每一个tab的界面背景设置为该selector 12345itemTab.setCustomView(R.layout.item_tab_layout_custom); itemTab.getCustomView().setBackgroundResource(R.drawable.selector_tab); TextView itemTv = (TextView) itemTab.getCustomView().findViewById(R.id .tv_menu_item); itemTv.setText(tabIndicators.get(i)); 解决办法百度了两天后，还是没有解决该问题，直到第三天，我的科学上网工具又好了- -感动到晕厥（事实证明，程序员真的不适合用百度，生活服务还好）我google到了下面一篇文章，其中讲到了：如果你设置了TabMode为MODE_FIXED然后发现文本并没有包围全局，或许是因为Tablayout在创建时应用了一些嵌入设置，你可以将下面的代码写入xml以解决此问题： 12app:tabPaddingStart=&quot;-1dp&quot;app:tabPaddingEnd=&quot;-1dp&quot; 由此可见，问题完美解决 总结经过了这一次的问题，越发觉得程序员学会科学上网是多么重要，也增加了自己查询解决问题的能力，Tablayout作为谷歌推出的遵循MD的控件，应该多加学习利用。","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]},{"title":"Android-TextView相关小知识","slug":"Android-TextView相关小知识","date":"2019-03-08T06:38:27.000Z","updated":"2024-12-27T07:01:51.000Z","comments":true,"path":"2019/03/08/Android-TextView相关小知识/","link":"","permalink":"https://maydaychen.github.io/2019/03/08/Android-TextView%E7%9B%B8%E5%85%B3%E5%B0%8F%E7%9F%A5%E8%AF%86/","excerpt":"","text":"限制textview只有两行且多余行用省略号代替12345678&lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/hospital_abstract_content&quot; android:lines=&quot;2&quot; android:maxLines=&quot;2&quot; android:ellipsize=&quot;end&quot; /&gt; android:maxLines&#x3D;”2” 最大行数限制，如果超过两行也不会再显示了android:ellipsize&#x3D;”end” 超过规定长度则使用末尾省略号android:lines&#x3D;”2” 显示两行，即使text只有一行也会占位两行的高度 去除textview的默认padding1android:includeFontPadding=&quot;false&quot; 文字加空格空格： &#160;窄空格： &#8201; 首行缩进两字符：•在string资源文件中，在文字的前面加入”\\u3000\\u3000”即可实现首行缩进 TextView修改部分文字颜色方法一：1234SpannableStringBuilder builder1 = new SpannableStringBuilder(tvMallDaily.getText().toString()); ForegroundColorSpan redSpan = new ForegroundColorSpan(Color.RED); builder1.setSpan(redSpan, 2, 5, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); tvMallDaily.setText(builder1); 方法二：12&lt;string name=&quot;hh_no_order&quot;&gt;&lt;![CDATA[sorry，没有任何订单，&lt;font color=&quot;#fc2a56&quot;&gt;前往买买买&lt;/font&gt;]]&gt;&lt;/string&gt;mTvTip.setText(Html.fromHtml(mTips))","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]},{"title":"Vue相关问题","slug":"Vue相关问题","date":"2019-01-15T07:33:06.000Z","updated":"2024-12-27T07:36:01.000Z","comments":true,"path":"2019/01/15/Vue相关问题/","link":"","permalink":"https://maydaychen.github.io/2019/01/15/Vue%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","excerpt":"","text":"创建项目时无法加载文件 C:\\Users\\1111111\\AppData\\Roaming\\npm\\vue.ps1,因为在此系统禁止运行脚本 解决办法： 以管理员身份运行power shell 输入set-ExecutionPolicy RemoteSigned 选Y或者A 解决 报错：ESLint: Unexpected string concatenation. (prefer-template) 原因ES6规则：表现符号错误，应该为Tab键上方的· ，修改如下： vue渲染列表时报错Avoid using non-primitive value as key, use string&#x2F;number value instead.解决：大概率是v-for的时候没有绑定key","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://maydaychen.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Android-Imageview相关小知识","slug":"Android-Imageview相关小知识","date":"2018-11-07T06:39:39.000Z","updated":"2024-12-27T07:03:04.000Z","comments":true,"path":"2018/11/07/Android-Imageview相关小知识/","link":"","permalink":"https://maydaychen.github.io/2018/11/07/Android-Imageview%E7%9B%B8%E5%85%B3%E5%B0%8F%E7%9F%A5%E8%AF%86/","excerpt":"","text":"图片清除总结：之前用什么方法设置的就用什么方法清除eg:如果之前是用的 1ivThankPic.setImageBitmap(bmp); 那我们如果想要清除图片内容，我们就需要使用 1ivThankPic.setImageBitmap(null); 设置了background就需要使用对应的background改 ImageLoader加载网络图片github地址 导入方法 下载jar包并手动导入：1implementation files(&#x27;libs/universal-image-loader-1.9.5.jar&#x27;) 在build.gradle中添加1compile ‘com.nostra13.universalimageloader:universal-image-loader:1.9.5’ 添加权限需要添加写入权限以及联网权限，注意安卓6.0以后动态权限问题 12&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt; 初始化123 // 初始化ImageLoaderConfiguration configuration = new ImageLoaderConfiguration.Builder(this).writeDebugLogs().build();ImageLoader.getInstance().init(configuration); 加载图片12345678910111213141516171819202122232425262728293031323334353637383940 // 先设置网上图片的路径 String uri = &quot;&quot;; // 可以设置图片大小 ImageSize mImageSize = new ImageSize(300, 300); // 图片的相关配置 DisplayImageOptions mOptions = new DisplayImageOptions.Builder() .cacheInMemory(true).cacheOnDisc(true) .bitmapConfig(Bitmap.Config.RGB_565).build(); ImageLoader.getInstance().loadImage(uri, mImageSize, mOptions, new ImageLoadingListener() &#123; @Override public void onLoadingStarted(String arg0, View arg1) &#123; // TODO Auto-generated method stub //图片开始加载状态 &#125; @Override public void onLoadingFailed(String arg0, View arg1, FailReason arg2) &#123; // TODO Auto-generated method stub //图片加载失败后回调，可以在这设置图片加载失败后的默认图等 &#125; @Override public void onLoadingComplete(String arg0, View arg1, Bitmap arg2) &#123; ivPersonLogo.setImageBitmap(arg2); //图片加载完成，arg2即为加载出的图片，以bitmap形式存在 &#125; @Override public void onLoadingCancelled(String arg0, View arg1) &#123; // TODO Auto-generated method stub //图片加载取消回调 &#125; &#125;);&#125;","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]},{"title":"Android调用sharesdk过程及问题","slug":"Android调用sharesdk过程及问题","date":"2018-09-12T06:17:53.000Z","updated":"2024-12-27T06:29:17.000Z","comments":true,"path":"2018/09/12/Android调用sharesdk过程及问题/","link":"","permalink":"https://maydaychen.github.io/2018/09/12/Android%E8%B0%83%E7%94%A8sharesdk%E8%BF%87%E7%A8%8B%E5%8F%8A%E9%97%AE%E9%A2%98/","excerpt":"","text":"具体配置方法详见官网，我这边使用的离线配置，即没有使用gradle进行配置，这里偷偷懒，不详细记录 详细步骤步骤为粗略步骤，详细步骤参照此处 在官网根据自己要分享的平台下载相关的jar包 将下载的jar包放在自己目录的lib文件夹下并在项目中引用 使用它提供的指导文件生成相关文件，并根据readme将各个文件放在各自对应的路径下 在manifests文件下申请相关权限 123456789&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.GET_TASKS&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt; 在application标签中添加以下内容 12345678910111213141516171819202122232425262728293031&lt;activity android:name=&quot;com.mob.tools.MobUIShell&quot; android:theme=&quot;@android:style/Theme.Translucent.NoTitleBar&quot; android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot; android:windowSoftInputMode=&quot;stateHidden|adjustResize&quot; &gt; &lt;!-- 调用新浪原生SDK，需要注册的回调activity --&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;com.sina.weibo.sdk.action.ACTION_SDK_REQ_ACTIVITY&quot; /&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt; &lt;/intent-filter&gt; &lt;!--集成line客户端登录授权，需要添如下格式的过滤器--&gt; &lt;intent-filter&gt; &lt;data android:scheme=&quot;line.1477692153&quot; /&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt; &lt;/intent-filter&gt; &lt;!-- ShareSDK&lt;strong&gt;3.1.0版本之前&lt;/strong&gt;才需要在MobUIShell下面注册此意图，3.1.0版本之后（包含3.1.0）不需要注册此intent--&gt; &lt;intent-filter&gt; &lt;data android:scheme=&quot;tencent100371282&quot; /&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt;&lt;!-- 填写您从Mob开发者后台中得到的Appkey和AppSecret --&gt;&lt;meta-data android:name=&quot;Mob-AppKey&quot; android:value=&quot;您的AppKey&quot;/&gt;&lt;meta-data android:name=&quot;Mob-AppSecret&quot; android:value=&quot;您的AppSecret&quot;/&gt; 其中Mob-AppKey与Mob-AppSecret是自己申请时后台分配的，根据后台数据如实替换即可 在assets文件夹的ShareSDK.xml文件下，填写每个平台需要的参数，例如 123456789&lt;Wechat Id=&quot;4&quot; SortId=&quot;4&quot; AppId=&quot;xxx&quot; AppSecret=&quot;xxx&quot;userName=&quot;xxx&quot;path=&quot;pages/index/index.html?id=1&quot; BypassApproval=&quot;true&quot; Enable=&quot;true&quot; /&gt; 每个字段的意思详见上面链接的官网教程 启动分享在需要弹出分享页面进行分享的页面，添加以下方法 123456789101112131415161718192021222324252627private void showShare() &#123; OnekeyShare oks = new OnekeyShare(); //关闭sso授权 oks.disableSSOWhenAuthorize(); // 分享时Notification的图标和文字 2.5.9以后的版本不 调用此方法 //oks.setNotification(R.drawable.ic_launcher, getString(R.string.app_name)); // title标题，印象笔记、邮箱、信息、微信、人人网和QQ空间使用 oks.setTitle(getString(R.string.share)); // titleUrl是标题的网络链接，仅在人人网和QQ空间使用 oks.setTitleUrl(&quot;http://sharesdk.cn&quot;); // text是分享文本，所有平台都需要这个字段 oks.setText(&quot;我是分享文本&quot;); // imagePath是图片的本地路径，Linked-In以外的平台都支持此参数 oks.setImagePath(&quot;/sdcard/test.jpg&quot;);//确保SDcard下面存在此张图片 // url仅在微信（包括好友和朋友圈）中使用 oks.setUrl(&quot;http://sharesdk.cn&quot;); // comment是我对这条分享的评论，仅在人人网和QQ空间使用 oks.setComment(&quot;我是测试评论文本&quot;); // site是分享此内容的网站名称，仅在QQ空间使用 oks.setSite(getString(R.string.app_name)); // siteUrl是分享此内容的网站地址，仅在QQ空间使用 oks.setSiteUrl(&quot;http://sharesdk.cn&quot;); // 启动分享GUI oks.show(this);&#125; 分享朋友圈时，可以分享网络图片或本机图片，本机图片需要设置 oks.setImagePath(“&#x2F;sdcard&#x2F;test.jpg”)，网络图片需要设置 oks.setImageUrl(url);&#x2F;&#x2F;url即为网络图片链接。 分享回调有时候我们要做活动，分享成功后赠送优惠券，这时候我们可以设置相关回调 12345678910111213141516oks.setCallback(new PlatformActionListener() &#123; @Override public void onComplete(Platform platform, int i, HashMap&lt;String, Object&gt; hashMap) &#123; &#125; @Override public void onError(Platform platform, int i, Throwable throwable) &#123; &#125; @Override public void onCancel(Platform platform, int i) &#123; &#125; &#125;); 可以看到，这里面定义了三个方法 onComplete，分享成功的回调，可以在这里调用接口，赠送优惠券等 onError，分享发生错误的回调 onCancel，分享取消的回调我们一般关注第一个onComplete就行 至此，完整的分享过程已经全部结束，可以欢快的进行相关平台的分享了 #分享问题与解决 分享完成后选择留在微信，分享回调失效此问题暂时无解……真的- -官方论坛也说没有解决办法……所以取巧的解决办法是，在用户调用分享的时候就调用接口发放优惠券，缺点是可能会造成假分享 在安卓6.0以上的系统分享界面打不开本来以为是部分手机问题，借了很多手机发现都有这个问题，于是想到了动态权限问题，可是不知道是什么权限，直到在文档里发现了这段话 微信并无实际的分享网络图片和分享bitmap的功能，如果设置了网络图片，此图片会先下载会本地，之后再当作本地图片分享，因此延迟较大。bitmap则好一些，但是由于bitmap并不知道图片的格式，因此都会被当作png编码，再提交微信客户端。此外，SHARE_EMOJI支持gif文件，但是如果使用imageData，则默认只是提交一个png图片，因为bitmap是静态图片。 sharesdk会将网络图片或者图片都下载到本地，所以我们这边必须申请存储权限。在申请完存储权限后分享，成功！问题解决","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]},{"title":"Android5.0以下报NoClassDefFoundError","slug":"Android5-0以下报NoClassDefFoundError","date":"2017-03-22T06:20:02.000Z","updated":"2024-12-27T07:03:43.000Z","comments":true,"path":"2017/03/22/Android5-0以下报NoClassDefFoundError/","link":"","permalink":"https://maydaychen.github.io/2017/03/22/Android5-0%E4%BB%A5%E4%B8%8B%E6%8A%A5NoClassDefFoundError/","excerpt":"","text":"Android5.0以下报NoClassDefFoundError一开始，我的项目都是在API21（5.0）的情况下编写的，所以过程很顺利，没有任何的错误，但是偶然之下，我用了同事的4.4的测试机，发现只要用到网络请求的地方，就会报NoClassDefFoundError，毫无办法。因为项目里用到了okhttp跟retrofit，我一度以为是引入的包冲突了，在那查了半天，无果。后来发现是Multidex这个操作的时候有问题，网上一查，真的有这个问题，现在阐述一下具体解决过程。 论坛方法：1234567891011121314151617181920212223242526272829apply plugin: &#x27;com.android.application&#x27;android &#123; ...&#125;dependencies &#123; ...&#125;android.applicationVariants.all &#123; variant -&gt; task &quot;fix$&#123;variant.name.capitalize()&#125;MainDexClassList&quot; &lt;&lt; &#123; logger.info &quot;Fixing main dex keep file for $variant.name&quot; File keepFile = new File(&quot;$buildDir/intermediates/multi-dex/$variant.buildType.name/maindexlist.txt&quot;) keepFile.withWriterAppend &#123; w -&gt; // Get a reader for the input file w.append(&#x27;\\n&#x27;) new File(&quot;$&#123;projectDir&#125;/multidex.keep&quot;).withReader &#123; r -&gt; // And write data from the input into the output w &lt;&lt; r &lt;&lt; &#x27;\\n&#x27; &#125; logger.info &quot;Updated main dex keep file for $&#123;keepFile.getAbsolutePath()&#125;\\n$keepFile.text&quot; &#125; &#125;&#125;tasks.whenTaskAdded &#123; task -&gt; android.applicationVariants.all &#123; variant -&gt; if (task.name == &quot;create$&#123;variant.name.capitalize()&#125;MainDexClassList&quot;) &#123; task.finalizedBy &quot;fix$&#123;variant.name.capitalize()&#125;MainDexClassList&quot; &#125; &#125;&#125; clean 然后 rebuild 项目，完成之后在 module 下的 build&#x2F;intermediates&#x2F;multi-dex&#x2F;xxx 里找到 maindexlist.txt 文件（如果找不到相关目录，可能需要你同步后 rebuild 项目才能生成），复制里面的内容到 module 根目录下 multidex.keep 文件中（没有则先创建此文件）具体的步骤经测试可行 没用出现该maindexlist.txt 文件解决办法在上述代码执行后并没有出现maindexlist.txt 这个文件（其实我一开始也没有- -），然后我查阅了android程序员都知道的网站，发现自己确实引用了 1compile &#x27;com.android.support:multidex:1.0.0&#x27; 也确实设置了 1multiDexEnabled true 但是没有在manifest文件中设置（不太习惯使用markdown的标签，application缺少标签，见谅） 12345application ... android:name=&quot;android.support.multidex.MultiDexApplication&quot;&gt; .../application 重新运行，不报错，问题解决","categories":[{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]}],"categories":[{"name":"运维","slug":"运维","permalink":"https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"},{"name":"生活","slug":"生活","permalink":"https://maydaychen.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"博客相关","slug":"博客相关","permalink":"https://maydaychen.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"},{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"},{"name":"开发","slug":"开发","permalink":"https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://maydaychen.github.io/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/tags/Linux/"},{"name":"食谱","slug":"食谱","permalink":"https://maydaychen.github.io/tags/%E9%A3%9F%E8%B0%B1/"},{"name":"Hexo","slug":"Hexo","permalink":"https://maydaychen.github.io/tags/Hexo/"},{"name":"监控","slug":"监控","permalink":"https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"},{"name":"NAS","slug":"NAS","permalink":"https://maydaychen.github.io/tags/NAS/"},{"name":"MacOS","slug":"MacOS","permalink":"https://maydaychen.github.io/tags/MacOS/"},{"name":"Git","slug":"Git","permalink":"https://maydaychen.github.io/tags/Git/"},{"name":"Ansible","slug":"Ansible","permalink":"https://maydaychen.github.io/tags/Ansible/"},{"name":"Windows","slug":"Windows","permalink":"https://maydaychen.github.io/tags/Windows/"},{"name":"前端","slug":"前端","permalink":"https://maydaychen.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Python","slug":"Python","permalink":"https://maydaychen.github.io/tags/Python/"},{"name":"Android","slug":"Android","permalink":"https://maydaychen.github.io/tags/Android/"}]}