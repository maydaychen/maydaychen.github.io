{"meta":{"title":"Hexotest","subtitle":"hei","description":"ha","author":"Maydaychen","url":"https://maydaychen.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2023-08-12T03:09:18.644Z","updated":"2023-08-12T02:08:42.446Z","comments":false,"path":"/404.html","permalink":"https://maydaychen.github.io/404.html","excerpt":"","text":""},{"title":"分类","date":"2023-08-12T03:09:18.644Z","updated":"2023-08-12T02:08:42.447Z","comments":false,"path":"categories/index.html","permalink":"https://maydaychen.github.io/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2023-08-12T03:09:18.642Z","updated":"2023-08-12T02:08:42.447Z","comments":false,"path":"books/index.html","permalink":"https://maydaychen.github.io/books/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-08-12T03:09:18.642Z","updated":"2023-08-12T02:08:42.447Z","comments":false,"path":"tags/index.html","permalink":"https://maydaychen.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2023-08-12T03:09:18.640Z","updated":"2023-08-12T02:08:42.447Z","comments":false,"path":"repository/index.html","permalink":"https://maydaychen.github.io/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-08-12T03:09:18.642Z","updated":"2023-08-12T02:08:42.447Z","comments":true,"path":"links/index.html","permalink":"https://maydaychen.github.io/links/index.html","excerpt":"","text":""},{"title":"关于","date":"2023-11-22T14:06:28.881Z","updated":"2023-11-22T14:06:28.881Z","comments":false,"path":"about/index.html","permalink":"https://maydaychen.github.io/about/index.html","excerpt":"","text":"一个用于记录自己成长的网站所有的文章都会带有自己的思考内容比较杂，关于开发，运维，摄影，智能家居，旅行，感兴趣的都会记下来 网站更新：20230827 —— 开始尝试建站202311 —— 疯狂输出"}],"posts":[{"title":"Alfred 支持edge浏览器书签","slug":"Alfred-支持edge浏览器书签","date":"2024-03-15T09:37:26.000Z","updated":"2024-03-15T09:38:52.855Z","comments":true,"path":"2024/03/15/Alfred-支持edge浏览器书签/","link":"","permalink":"https://maydaychen.github.io/2024/03/15/Alfred-%E6%94%AF%E6%8C%81edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B9%A6%E7%AD%BE/","excerpt":"","text":"众所周知，在Alfred上只有Safari跟Chrome浏览器的支持，甚至都不可以选择别的浏览器在Alfred 社区里，开发者也是直接说了这两个是mac上的用的人最多的浏览器，目前没有添加其他浏览器书签支持的计划，所以我们只能自己摸索但是说实在的，edge浏览器在国内有着先天的优势，各种同步功能的正常使用已经让它在国内越来越受欢迎，所以加入一个edge浏览器的支持个人认为还是很有必要的 低效方法：装一个Chrome, 然后把edge书签导入过去 好了，不开玩笑了，下面记录一个在社区看到的很好用的方法 正经记录step 1. 还是需要一个chrome浏览器，所以还是装一个吧step 2. link edge’s bookmarks to chromecd ~/Library/Application\\ Support/Google/Chrome/Default//这一步如果新安装的chrome是不需要的，因为没有这个文件 mv Bookmarks Bookmarks_233.bakln -s ~/Library/Application\\ Support/Microsoft\\ Edge/Default/Bookmarks ./Bookmarks贴一个ln -s命令详解https://blog.csdn.net/qianxuedegushi/article/details/108145547 然后再用alfred试一下，可以显示edge的书签了","categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"}],"tags":[{"name":"Alfred","slug":"Alfred","permalink":"https://maydaychen.github.io/tags/Alfred/"}]},{"title":"Git配置代理","slug":"Git配置代理","date":"2024-03-13T23:05:42.000Z","updated":"2024-03-15T09:58:22.679Z","comments":true,"path":"2024/03/14/Git配置代理/","link":"","permalink":"https://maydaychen.github.io/2024/03/14/Git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/","excerpt":"","text":"参考文章文章写的很棒，我就是参考这个 配置git代理（带用户名）git config –global http.proxy http://username:pass@server:portgit config –global https.proxy https://username:pass@server:port 打开git配置文件1open ~/.gitconfig","categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://maydaychen.github.io/tags/Git/"}]},{"title":"Linux相关简易操作汇总","slug":"Linux相关简易操作汇总","date":"2024-02-15T07:22:23.000Z","updated":"2024-03-15T09:58:54.378Z","comments":true,"path":"2024/02/15/Linux相关简易操作汇总/","link":"","permalink":"https://maydaychen.github.io/2024/02/15/Linux%E7%9B%B8%E5%85%B3%E7%AE%80%E6%98%93%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/","excerpt":"","text":"Ubuntu获取root权限 输入命令：sudo su; 屏幕上会回显要求输入当前用户密码的提示，输入密码即可获得管理员权限; 若想退出管理员权限可输入命令：su 用户名. Ubuntu vim显示行数 进入终端，在命令行中输入cd &#x2F;etc&#x2F;vim 后敲回车，进入&#x2F;etc&#x2F;vim目录； 进入etc&#x2F;vim目录后，找到vimrc文件（vim的初始化文件），使用cp命令对其进行备份，命令为：cp vimrc vimrc.bak（必须要有管理员权限，否则无法成功） 用管理员权限打开vimrc，命令为：sudo vi vimrc 打开后，在vimrc文件最后加入一行命令：set nu; 加完后，写入，退出，（esc -&gt; :wq），重新使用vim打开任意文件即可发现有行号的标示。 navicat for MySQL无法连接Linux服务器中的MySQL 1130错误 输入mysql -p进入MySQL，输入密码 mysql&gt; grant all privileges on . to root@”%” identified by “root”;结果如下：Query OK, 0 rows affected, 1 warning (0.00 sec) 退出数据库mysql&gt; exit 将&#x2F;etc&#x2F;mysql&#x2F;my.cnf文件中bind-address&#x3D;127.0.0.1 这句话注释掉 sudo &#x2F;etc&#x2F;init.d&#x2F;mysql restart 重启MySQL服务成功！此时navicat客户端已可连接服务器MySQL","categories":[{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/categories/Linux/"}],"tags":[]},{"title":"Nginx代理端口","slug":"Nginx代理端口","date":"2024-01-25T06:57:07.000Z","updated":"2024-03-15T09:58:22.687Z","comments":true,"path":"2024/01/25/Nginx代理端口/","link":"","permalink":"https://maydaychen.github.io/2024/01/25/Nginx%E4%BB%A3%E7%90%86%E7%AB%AF%E5%8F%A3/","excerpt":"","text":"Nginx 安装参照这个链接就好了http://nginx.org/en/linux_packages.html#RHEL使用nginx -V， 看到如下界面，就OK了 Nginx配置在&#x2F;etc&#x2F;nginx&#x2F;nginx.conf最下面加入如下代码shell stream &#123; upstream ssh&#123; server 127.0.0.1:22; &#125; server &#123; listen 8022; proxy_connect_timeout 1h; proxy_timeout 1h; proxy_pass ssh; &#125; &#125; 重载配置systemctl reload nginx然后就可以用8022端口去连接服务器啦","categories":[{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/categories/Linux/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://maydaychen.github.io/tags/Nginx/"}]},{"title":"HomeAssistant笔记--更换iOS Themes主题","slug":"HomeAssistant更换iOS-Themes主题","date":"2023-11-24T23:58:37.000Z","updated":"2024-03-15T09:58:22.685Z","comments":true,"path":"2023/11/25/HomeAssistant更换iOS-Themes主题/","link":"","permalink":"https://maydaychen.github.io/2023/11/25/HomeAssistant%E6%9B%B4%E6%8D%A2iOS-Themes%E4%B8%BB%E9%A2%98/","excerpt":"","text":"主题链接：https://github.com/basnijholt/lovelace-ios-themes 配置过程 主题需要在HACS中安装，搜索iOS应该就能看到 配置中加入: 123456文件名： /config/configuration.yaml# Load frontend themes from the themes folderfrontend: themes: !include_dir_merge_named themes 把主题放置在themes下themes文件夹在docker中HA的根目录下 建www目录存放图片资源 注意：www文件夹与themes文件夹同一层级 在www目录中建立跟themes目录中一样的文件夹名称，例如这里叫做ios-themes 在www的插件文件夹中，修改ios-themes.yaml 1234567891011主要是这边的修改：把www改为local，路径更改background-image: &quot;center / cover no-repeat fixed url(&#x27;/hacsfiles/themes/homekit-bg-dark-green.jpg&#x27;)&quot;改成background-image: &quot;center / cover no-repeat fixed url(&#x27;/local/ios-themes/homekit-bg-dark-green.jpg&#x27;)&quot; local文件夹其实就是值得www文件夹（注意不是把www文件夹改名成local文件夹） 如果不改的话，系统会找不到这个图片，导致首页不会修改背景图 重启HA","categories":[],"tags":[{"name":"HA","slug":"HA","permalink":"https://maydaychen.github.io/tags/HA/"}]},{"title":"Ansible笔记--delegate_to指令","slug":"Ansible笔记-delegate-to指令","date":"2023-11-22T02:22:08.000Z","updated":"2023-11-22T08:13:47.000Z","comments":true,"path":"2023/11/22/Ansible笔记-delegate-to指令/","link":"","permalink":"https://maydaychen.github.io/2023/11/22/Ansible%E7%AC%94%E8%AE%B0-delegate-to%E6%8C%87%E4%BB%A4/","excerpt":"","text":"场景介绍目前执行Ansible的过程中，遇到这么一个需求，在远程服务器上执行一系列操作，但是这个操作需要用到一组数据，该数据存在于Ansible服务器中的一个文件中，但是远程服务器无法读取到该文件，所以查到了这个指令，Ansible 的任务委派功能（delegate_to）。 使用 delegate_to 关键字可以委派任务到指定的机器上运行。 在 playbook 的操作如下： 12345678## 读取指定的localhost上的文件并定义为变量- name: read read_csv: path: &quot;&#123;&#123; csv_tmp_path &#125;&#125;&quot; delimiter: &#x27;,&#x27; register: file_list changed_when: false delegate_to: localhost 任务委派功能还可以用于以下场景： 在部署之前将一个主机从一个负载均衡集群中删除； 当你要对一个主机做改变之前去掉相应 dns 的记录； 当在一个存储设备上创建 iscsi 卷的时候； 当使用外的主机来检测网络出口是否正常的时候。 委托（delegate）通过”delegate_to”, 用户可以把某一个任务放在委托的机器上执行. 1234567hosts: webserversserial: 5tasks: - name: take out of load balancer pool command: /usr/bin/take_out_of_pool &#123;&#123; inventory_hostname &#125;&#125; delegate_to: 127.0.0.1 无论定义了hosts是什么，上面的这个task都只会在localhost(即ansible运行的机器)上执行, 如果只是想在本地执行，“delegate_to: 127.0.0.1” 也可以用local_action来代替 1234tasks: - name: take out of load balancer pool local_action: command /usr/bin/take_out_of_pool &#123;&#123; inventory_hostname &#125;&#125; 委托者的facts默认情况下, 委托任务的facts是inventory_hostname中主机的facts, 而不是被委托机器的facts. 在ansible 2.0 中, 设置delegate_facts为true可以让任务去收集被委托机器的facts. 1234567- hosts: app_servers tasks: - name: gather facts from db servers setup: delegate_to: &quot;&#123;&#123;item&#125;&#125;&quot; delegate_facts: True with_items: &quot;&#123;&#123;groups[&#x27;dbservers&#x27;&#125;&#125;&quot; 该例子会收集dbservers的facts并分配给这些机器, 而不会去收集app_servers的facts run_once通过run_once: true来指定该task只能在某一台机器上执行一次. 可以和delegate_to 结合使用 123- command: /opt/application/upgrade_db.py run_once: true delegate_to: web01.example.org 指定在”web01.example.org”上执行这个task 如果没有delegate_to, 那么这个task只会在当前主机组的第一台机器上执行","categories":[],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"https://maydaychen.github.io/tags/Ansible/"}]},{"title":"Ansible笔记--获取当前日期时间","slug":"Ansible笔记-获取当前日期时间","date":"2023-11-21T05:34:45.000Z","updated":"2023-11-21T05:35:38.051Z","comments":true,"path":"2023/11/21/Ansible笔记-获取当前日期时间/","link":"","permalink":"https://maydaychen.github.io/2023/11/21/Ansible%E7%AC%94%E8%AE%B0-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/","excerpt":"","text":"获取当前日期123- name: Display current date and time ansible.builtin.debug: msg: &quot;Current date and time is &#123;&#123; ansible_date_time.date &#125;&#125;&quot; 获取到的日期格式是YYYY-MM-DD, 如果想改成其他格式，可以使用正则获取年月日 123- name: Format current date ansible.builtin.debug: msg: &quot;Formatted date: &#123;&#123; ansible_date_time.date | regex_replace(&#x27;^(\\\\d&#123;4&#125;)-(\\\\d&#123;2&#125;)-(\\\\d&#123;2&#125;)$&#x27;, &#x27;\\\\3/\\\\2/\\\\1&#x27;) &#125;&#125;&quot; \\1 - 年 \\2 - 月 \\3 - 日 获取当前时间123- name: Display current date and time ansible.builtin.debug: msg: &quot;Current date and time is &#123;&#123; ansible_date_time.time &#125;&#125;&quot; 问题‘ansible_date_time’ is undefined 解决方案： ansible_date_time是事实的一部分，所以需要设置 1gather_facts: true","categories":[],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"https://maydaychen.github.io/tags/Ansible/"}]},{"title":"小翼管家获取电信光猫超密教程","slug":"小翼管家获取电信光猫超密教程","date":"2023-11-20T14:03:14.000Z","updated":"2024-03-15T10:00:37.210Z","comments":true,"path":"2023/11/20/小翼管家获取电信光猫超密教程/","link":"","permalink":"https://maydaychen.github.io/2023/11/20/%E5%B0%8F%E7%BF%BC%E7%AE%A1%E5%AE%B6%E8%8E%B7%E5%8F%96%E7%94%B5%E4%BF%A1%E5%85%89%E7%8C%AB%E8%B6%85%E5%AF%86%E6%95%99%E7%A8%8B/","excerpt":"","text":"转自https://www.bilibili.com/read/cv22351257/自用，侵删 方法一：苹果手机（最简单） 苹果手机在App Store下载抓包软件stream，及小翼管家（绑定光猫）。连接光猫WiFi stream软件打开HTTMS抓包，安装CA证书并信任 点击开始抓包，打开小翼管家，点击网关设置，然后随便点击（比如指示灯，不点也可以）。 回到stream，停止抓包。点击抓包历史。全部请求找到任意一个含有token&#x3D;的POST网址并点击进去（不行就多试几个POST网址），点击右上角向上的箭头，弹出更多操作，点击编辑重放请求。 点击最下面的请求体最下面一行，点击原始数据，删除清空并粘贴以下代码并点击存储：（注意格式） { “Params”: [], “MethodName”: “GetTAPasswd”, “RPCMethod”: “CallMethod”, “ObjectPath”: “&#x2F;com&#x2F;ctc&#x2F;igd1&#x2F;Telecom&#x2F;System”, “InterfaceName”: “com.ctc.igd1.SysCmd”, “ServiceName”: “com.ctc.igd1” } 最后点击右上角开始按钮，点击响应最下面的BODY即可看到（如果结果返回错误，原因是以上的代码格式不正确或者是POST网址没找对） 注：密码格式：telecomadmin12345678，账号默认是telecomadmin。","categories":[{"name":"NAS","slug":"NAS","permalink":"https://maydaychen.github.io/categories/NAS/"}],"tags":[]},{"title":"Linux系统盘扩容","slug":"Linux系统盘扩容","date":"2023-11-13T11:13:57.000Z","updated":"2024-03-15T10:00:04.753Z","comments":true,"path":"2023/11/13/Linux系统盘扩容/","link":"","permalink":"https://maydaychen.github.io/2023/11/13/Linux%E7%B3%BB%E7%BB%9F%E7%9B%98%E6%89%A9%E5%AE%B9/","excerpt":"","text":"先在云控制台新增容量 运行下面的命令以查看根目录目前的容量 1234567891011[root@ip-172-17-6-219 ~]$ df -hTFilesystem Type Size Used Avail Use% Mounted ondevtmpfs devtmpfs 461M 0 461M 0% /devtmpfs tmpfs 479M 0 479M 0% /dev/shmtmpfs tmpfs 479M 780K 478M 1% /runtmpfs tmpfs 479M 0 479M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 5.6G 2.5G 70% /tmpfs tmpfs 96M 0 96M 0% /run/user/1015tmpfs tmpfs 96M 0 96M 0% /run/user/1014tmpfs tmpfs 96M 0 96M 0% /run/user/0tmpfs tmpfs 96M 0 96M 0% /run/user/1028 运行下面的命令来查看实际容量 12345[root@ip-172-17-6-219 ~]$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 15G 0 disk|-nvme0n1p1 259:1 0 8G 0 part /`-nvme0n1p128 259:2 0 1M 0 part 运行下面的命令来增加容量（最后的1为目标盘在这个nvme0n1）中的序号 12[root@ip-172-17-6-219 ~]$ sudo growpart /dev/nvme0n1 1CHANGED: partition=1 start=4096 old: size=16773087 end=16777183 new: size=31453151 end=31457247 为了验证容量是否已经被添加, 我们可以再次使用lsblk命令 12345[root@ip-172-17-6-219 ~]$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 15G 0 disk|-nvme0n1p1 259:1 0 15G 0 part /`-nvme0n1p128 259:2 0 1M 0 part 根据文件系统不同运行不同的命令 如果是xfs文件系统: sudo xfs_growfs -d &#x2F; 1234567891011[root@ip-172-17-6-219 ~]$ sudo xfs_growfs -d /meta-data=/dev/nvme0n1p1 isize=512 agcount=4, agsize=524159 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1 spinodes=0data = bsize=4096 blocks=2096635, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=1log =internal bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 2096635 to 3931643 如果是ext4文件系统: 1sudo resize2fs /dev/nvme5n1p2","categories":[{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/categories/Linux/"}],"tags":[]},{"title":"Nginx配置反向代理时出现的13: Permission denied) while connecting to upstream, client: 127.0.0.1","slug":"Nginx配置反向代理时出现的13-Permission-denied-while-connecting-to-upstream-client-127-0-0-1","date":"2023-11-01T07:09:12.000Z","updated":"2024-03-15T10:00:04.758Z","comments":true,"path":"2023/11/01/Nginx配置反向代理时出现的13-Permission-denied-while-connecting-to-upstream-client-127-0-0-1/","link":"","permalink":"https://maydaychen.github.io/2023/11/01/Nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%8413-Permission-denied-while-connecting-to-upstream-client-127-0-0-1/","excerpt":"","text":"条件不允许的情况下（不能随意重启计算机）执行下列代码： 1setsebool -P httpd_can_network_connect 1 其他情况下, 可以获取root权限，通过root修改&#x2F;etc&#x2F;selinux&#x2F;config 123456789sudo suvim /etc/selinux/configSELINUX=enforcing改为SELINUX=disabled重启服务器","categories":[{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/categories/Linux/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://maydaychen.github.io/tags/Nginx/"}]},{"title":"通过hexo更新github pages博客","slug":"通过hexo更新github-pages博客","date":"2023-10-12T07:23:01.000Z","updated":"2024-03-15T09:40:42.319Z","comments":true,"path":"2023/10/12/通过hexo更新github-pages博客/","link":"","permalink":"https://maydaychen.github.io/2023/10/12/%E9%80%9A%E8%BF%87hexo%E6%9B%B4%E6%96%B0github-pages%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"#文件生成及编辑 1hexo new &quot;文章标题&quot; 通过该命令行，可以在 “博客所在路径\\source_posts\\”下生成一个md文件，文件名称为上面命令行所输入的文章标题 由于生成的是markdown格式的文件，所以建议使用一个markdown编写完成后，复制粘贴到该md文件中。 #文件发布编辑完成后，在命令行输入 1hexo g 文章就会发布到本地，然后通过 1hexo s 将文件变化发布到本地环境，此时可以通过访问localhost:4000，查看自己博客相关变化 #同步到GitHub 1hexo d 成功同步到GitHub（前提是跟GitHub已经配对）！","categories":[{"name":"博客相关","slug":"博客相关","permalink":"https://maydaychen.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://maydaychen.github.io/tags/Hexo/"},{"name":"插件","slug":"插件","permalink":"https://maydaychen.github.io/tags/%E6%8F%92%E4%BB%B6/"}]},{"title":"hexo g报错 Cannot read properties of undefined (reading 'count')","slug":"hexo-g报错-Cannot-read-properties-of-undefined-reading-count","date":"2023-08-27T14:07:18.000Z","updated":"2023-08-27T14:12:50.029Z","comments":true,"path":"2023/08/27/hexo-g报错-Cannot-read-properties-of-undefined-reading-count/","link":"","permalink":"https://maydaychen.github.io/2023/08/27/hexo-g%E6%8A%A5%E9%94%99-Cannot-read-properties-of-undefined-reading-count/","excerpt":"","text":"问题在编译博客的时候，发现了一个问题 12345678910111213141516171819hexo gINFO Validating configINFO Start processingFATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlTypeError: Cannot read properties of undefined (reading &#x27;count&#x27;) at module.exports (/Users/xxx/Documents/blog/node_modules/hexo-baidu-url-submit/lib/generator.js:4:41) at Hexo.tryCatcher (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/util.js:16:23) at Hexo.&lt;anonymous&gt; (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/method.js:15:34) at /Users/xxx/Documents/blog/node_modules/hexo/lib/hexo/index.js:407:22 at tryCatcher (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/util.js:16:23) at MappingPromiseArray._promiseFulfilled (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/map.js:68:38) at PromiseArray._iterate (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/promise_array.js:115:31) at MappingPromiseArray.init (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/promise_array.js:79:10) at MappingPromiseArray._asyncInit (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/map.js:37:10) at _drainQueueStep (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/async.js:97:12) at _drainQueue (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/async.js:86:9) at Async._drainQueues (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/async.js:102:5) at Async.drainQueues [as _onImmediate] (/Users/xxx/Documents/blog/node_modules/bluebird/js/release/async.js:15:14) at process.processImmediate (node:internal/timers:476:21) 排查问题1hexo g --debug 通过debug模式查看问题所在，发现问题所在 12345614:02:48.751 DEBUG Generator: post14:02:48.753 DEBUG Generator: archive14:02:48.753 DEBUG Generator: index14:02:48.754 DEBUG Generator: atom14:02:48.762 DEBUG Generator: baidu_url_generator14:02:48.763 FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html Issue Linkhttps://github.com/hexojs/hexo/issues/2402 该插件的相关文档https://hui-wang.info/2016/10/23/Hexo插件之百度主动提交链接/","categories":[{"name":"博客相关","slug":"博客相关","permalink":"https://maydaychen.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://maydaychen.github.io/tags/Hexo/"},{"name":"插件","slug":"插件","permalink":"https://maydaychen.github.io/tags/%E6%8F%92%E4%BB%B6/"}]},{"title":"Docker入门(1)--Docker概述","slug":"Docker入门-1-Docker概述","date":"2023-08-27T09:49:33.000Z","updated":"2023-08-27T10:19:52.923Z","comments":true,"path":"2023/08/27/Docker入门-1-Docker概述/","link":"","permalink":"https://maydaychen.github.io/2023/08/27/Docker%E5%85%A5%E9%97%A8-1-Docker%E6%A6%82%E8%BF%B0/","excerpt":"","text":"Docker与虚拟机的对比虚拟机技术缺点： 资源占用十分多 冗余步骤多（比如开机等） 启动很慢 Docker和传统虚拟机的不同： 传统虚拟机需要虚拟出一个硬件，运行一整个操作系统，然后在系统上安装和运行软件 容器内的应用直接运行在宿主机，容器没有自己的内核的， 也没有虚拟硬件，所以很轻便 每个容器之间互相隔离，每个容器内都有一个属于自己的文件系统，互不影响 Docker组成镜像Image：就好比一个模版，可以通过模版来创建容器服务 通过镜像可以创建多个容器（最终服务&#x2F;项目运行就在容器中） 容器Container：Docker利用容器技术，独立运行一个或一组应用，通过镜像来创建 基本命令：启动，停止，删除 目前可以把容器理解为一个简易的Linux系统 仓库Registry: 远程仓库存放镜像的地方，就好比代码放git 仓库分为公有仓库和私有仓库 如Docker Hub(默认都是国内的，需要配置镜像加速) 云服务商都有容器服务器 Docker是怎么工作的Docker是一个Client-Server架构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问 DockerServer接收到DockerClient的指令，就会执行这个指令 Docker为什么比VM快Docker有着比VM更少的抽象层 Docker利用的是宿主机的内核，但VM需要加载一个分钟级别的Guest OS 所以说，新建一个容器的时候，docker不需要像VM一样重新加载一个OS的内核，省略了加载Guest OS的过程，所以会很快","categories":[{"name":"Docker相关","slug":"Docker相关","permalink":"https://maydaychen.github.io/categories/Docker%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://maydaychen.github.io/tags/Docker/"}]}],"categories":[{"name":"Tools","slug":"Tools","permalink":"https://maydaychen.github.io/categories/Tools/"},{"name":"Linux","slug":"Linux","permalink":"https://maydaychen.github.io/categories/Linux/"},{"name":"NAS","slug":"NAS","permalink":"https://maydaychen.github.io/categories/NAS/"},{"name":"博客相关","slug":"博客相关","permalink":"https://maydaychen.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"},{"name":"Docker相关","slug":"Docker相关","permalink":"https://maydaychen.github.io/categories/Docker%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"Alfred","slug":"Alfred","permalink":"https://maydaychen.github.io/tags/Alfred/"},{"name":"Git","slug":"Git","permalink":"https://maydaychen.github.io/tags/Git/"},{"name":"Nginx","slug":"Nginx","permalink":"https://maydaychen.github.io/tags/Nginx/"},{"name":"HA","slug":"HA","permalink":"https://maydaychen.github.io/tags/HA/"},{"name":"Ansible","slug":"Ansible","permalink":"https://maydaychen.github.io/tags/Ansible/"},{"name":"Hexo","slug":"Hexo","permalink":"https://maydaychen.github.io/tags/Hexo/"},{"name":"插件","slug":"插件","permalink":"https://maydaychen.github.io/tags/%E6%8F%92%E4%BB%B6/"},{"name":"Docker","slug":"Docker","permalink":"https://maydaychen.github.io/tags/Docker/"}]}