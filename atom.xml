<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexotest</title>
  
  <subtitle>hei</subtitle>
  <link href="https://maydaychen.github.io/atom.xml" rel="self"/>
  
  <link href="https://maydaychen.github.io/"/>
  <updated>2025-08-13T03:32:42.993Z</updated>
  <id>https://maydaychen.github.io/</id>
  
  <author>
    <name>Maydaychen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zabbix进阶11--如何使用ZabbixAPI</title>
    <link href="https://maydaychen.github.io/2025/08/13/Zabbix%E8%BF%9B%E9%98%B611-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ZabbixAPI/"/>
    <id>https://maydaychen.github.io/2025/08/13/Zabbix%E8%BF%9B%E9%98%B611-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ZabbixAPI/</id>
    <published>2025-08-13T03:32:42.000Z</published>
    <updated>2025-08-13T03:32:42.993Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>瞎折腾1--Glance安装及优雅地使用面板</title>
    <link href="https://maydaychen.github.io/2025/08/09/%E7%9E%8E%E6%8A%98%E8%85%BE1-Glance%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8%E9%9D%A2%E6%9D%BF/"/>
    <id>https://maydaychen.github.io/2025/08/09/%E7%9E%8E%E6%8A%98%E8%85%BE1-Glance%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8%E9%9D%A2%E6%9D%BF/</id>
    <published>2025-08-09T06:42:59.000Z</published>
    <updated>2025-08-09T06:52:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="功能记录"><a href="#功能记录" class="headerlink" title="功能记录"></a>功能记录</h1><h2 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h2><p>首先需要创建一个secret key，如果是docker创建的，那就运行这个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm glanceapp/glance secret:make</span><br></pre></td></tr></table></figure><p>会生成一个key，需要填写在配置文件中<br>然后就配置我们的账号密码,可以直接配置在glance.yml的第一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auth:</span><br><span class="line">  secret-key: &#123;刚才生成的secret key&#125;# this must be set to a random value generated using the secret:make CLI command</span><br><span class="line">  users:</span><br><span class="line">    admin:</span><br><span class="line">      password: 123456</span><br><span class="line">    svilen:</span><br><span class="line">      password: 123456</span><br></pre></td></tr></table></figure><p>之后在登录的时候，就会要求输入用户名密码<br><img src="/%E7%9E%8E%E6%8A%98%E8%85%BE1--Glance%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8%E9%9D%A2%E6%9D%BF/auth.png" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;功能记录&quot;&gt;&lt;a href=&quot;#功能记录&quot; class=&quot;headerlink&quot; title=&quot;功能记录&quot;&gt;&lt;/a&gt;功能记录&lt;/h1&gt;&lt;h2 id=&quot;登录验证&quot;&gt;&lt;a href=&quot;#登录验证&quot; class=&quot;headerlink&quot; title=&quot;登录验证&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Tools" scheme="https://maydaychen.github.io/categories/Tools/"/>
    
    
    <category term="NAS" scheme="https://maydaychen.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>Linux操作记录9--MariaDB升级笔记</title>
    <link href="https://maydaychen.github.io/2025/07/26/Linux%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%959--MariaDB%E5%8D%87%E7%BA%A7%E7%AC%94%E8%AE%B0/"/>
    <id>https://maydaychen.github.io/2025/07/26/Linux%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%959--MariaDB%E5%8D%87%E7%BA%A7%E7%AC%94%E8%AE%B0/</id>
    <published>2025-07-26T09:30:09.000Z</published>
    <updated>2025-07-26T09:33:44.715Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章告诉你怎么从Amazon Linux2023自带的仓库里的老旧10.5升级到新的官方库的10.11</p><h1 id="从10-5到10-11"><a href="#从10-5到10-11" class="headerlink" title="从10.5到10.11"></a>从10.5到10.11</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h3 id="备份数据库数据"><a href="#备份数据库数据" class="headerlink" title="备份数据库数据"></a>备份数据库数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p --all-databases &gt; all_databases.sql</span><br></pre></td></tr></table></figure><h3 id="备份数据库配置文件"><a href="#备份数据库配置文件" class="headerlink" title="备份数据库配置文件"></a>备份数据库配置文件</h3><p>如 &#x2F;etc&#x2F;my.cnf、&#x2F;etc&#x2F;my.cnf.d&#x2F;</p><h3 id="备份数据目录"><a href="#备份数据目录" class="headerlink" title="备份数据目录"></a>备份数据目录</h3><p>如cd &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;</p><h2 id="更换MariaDB仓库"><a href="#更换MariaDB仓库" class="headerlink" title="更换MariaDB仓库"></a>更换MariaDB仓库</h2><p>创建&#x2F;etc&#x2F;yum.repos.d&#x2F;MariaDB.repo， 内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># MariaDB 10.11 RedHatEnterpriseLinux repository list - created 2025-06-30 09:25 UTC</span><br><span class="line"># https://mariadb.org/download/</span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line"># rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.</span><br><span class="line"># baseurl = https://rpm.mariadb.org/10.11/rhel/$releasever/$basearch</span><br><span class="line">baseurl = https://mirrors.neusoft.edu.cn/mariadb/yum/10.11/rhel/$releasever/$basearch</span><br><span class="line"># gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgkey = https://mirrors.neusoft.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck = 1</span><br></pre></td></tr></table></figure><h2 id="停止相关应用"><a href="#停止相关应用" class="headerlink" title="停止相关应用"></a>停止相关应用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop zabbix-server</span><br><span class="line">systemctl stop mysql</span><br></pre></td></tr></table></figure><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf clean all</span><br><span class="line">sudo dnf makecache</span><br><span class="line">sudo dnf upgrade</span><br></pre></td></tr></table></figure><h2 id="运行升级脚本"><a href="#运行升级脚本" class="headerlink" title="运行升级脚本"></a>运行升级脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysql</span><br><span class="line">sudo mysql_upgrade</span><br></pre></td></tr></table></figure><h3 id="这个命令是什么"><a href="#这个命令是什么" class="headerlink" title="这个命令是什么"></a>这个命令是什么</h3><p>sudo mysql_upgrade 命令用于升级 MySQL 或 MariaDB 数据库的系统表和数据结构，以确保它们与新安装的数据库服务器版本兼容。</p><p>主要作用<br>检查并修复系统表（如 mysql 库中的权限表）<br>升级系统表结构到新版本要求<br>检查和修复所有数据库表的兼容性<br>什么时候需要用？<br>数据库主版本升级后（如 10.5 → 10.11）<br>重大小版本升级后</p><p>总结：<br>mysql_upgrade 是数据库升级后必做的一步，确保数据和权限表与新版本兼容、正常运行</p><h1 id="10-11升级11-4"><a href="#10-11升级11-4" class="headerlink" title="10.11升级11.4"></a>10.11升级11.4</h1><p><a href="https://mariadb.com/docs/server/server-management/install-and-upgrade-mariadb/upgrading/upgrading-from-to-specific-versions/upgrading-from-mariadb-10-11-to-mariadb-11-4">https://mariadb.com/docs/server/server-management/install-and-upgrade-mariadb/upgrading/upgrading-from-to-specific-versions/upgrading-from-mariadb-10-11-to-mariadb-11-4</a></p><h2 id="备份-1"><a href="#备份-1" class="headerlink" title="备份"></a>备份</h2><h3 id="备份数据库数据-1"><a href="#备份数据库数据-1" class="headerlink" title="备份数据库数据"></a>备份数据库数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p --all-databases &gt; all_databases.sql</span><br></pre></td></tr></table></figure><h3 id="备份数据库配置文件-1"><a href="#备份数据库配置文件-1" class="headerlink" title="备份数据库配置文件"></a>备份数据库配置文件</h3><p>如 &#x2F;etc&#x2F;my.cnf、&#x2F;etc&#x2F;my.cnf.d&#x2F;</p><h3 id="备份数据目录-1"><a href="#备份数据目录-1" class="headerlink" title="备份数据目录"></a>备份数据目录</h3><p>如cd &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;</p><h2 id="更换MariaDB仓库-1"><a href="#更换MariaDB仓库-1" class="headerlink" title="更换MariaDB仓库"></a>更换MariaDB仓库</h2><p>创建&#x2F;etc&#x2F;yum.repos.d&#x2F;MariaDB.repo， 内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># MariaDB 11.4 RedHatEnterpriseLinux repository list - created 2025-07-01 06:13 UTC</span><br><span class="line"># https://mariadb.org/download/</span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line"># rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.</span><br><span class="line">baseurl = https://rpm.mariadb.org/11.4/rhel/$releasever/$basearch</span><br><span class="line"># baseurl = https://mirrors.neusoft.edu.cn/mariadb/yum/11.4/rhel/$releasever/$basearch</span><br><span class="line">gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line"># gpgkey = https://mirrors.neusoft.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck = 1</span><br></pre></td></tr></table></figure><h2 id="停止相关应用-1"><a href="#停止相关应用-1" class="headerlink" title="停止相关应用"></a>停止相关应用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop zabbix-server</span><br><span class="line">systemctl stop mysql</span><br></pre></td></tr></table></figure><h2 id="升级-1"><a href="#升级-1" class="headerlink" title="升级"></a>升级</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf clean all</span><br><span class="line">sudo dnf makecache</span><br><span class="line">sudo dnf upgrade</span><br></pre></td></tr></table></figure><h2 id="运行升级脚本-1"><a href="#运行升级脚本-1" class="headerlink" title="运行升级脚本"></a>运行升级脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysql</span><br><span class="line">sudo mariadb-upgrade</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>暂时非常顺利</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章告诉你怎么从Amazon Linux2023自带的仓库里的老旧10.5升级到新的官方库的10.11&lt;/p&gt;
&lt;h1 id=&quot;从10-5到10-11&quot;&gt;&lt;a href=&quot;#从10-5到10-11&quot; class=&quot;headerlink&quot; title=&quot;从10.5到10.</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://maydaychen.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>NAS杂记5--群晖NAS安装GitLab及问题记录</title>
    <link href="https://maydaychen.github.io/2025/07/26/NAS%E6%9D%82%E8%AE%B05--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85GitLab%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://maydaychen.github.io/2025/07/26/NAS%E6%9D%82%E8%AE%B05--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85GitLab%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2025-07-26T09:23:28.000Z</published>
    <updated>2025-07-26T09:49:17.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>需要在群晖NAS上搭建GitLab，以便上传自己的代码，同时可以通过外网访问，而不是局限于本地网络</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>正好群晖的镜像仓库里就有这个gitlab，所以直接下载就好啦</p><img src="/2025/07/26/NAS%E6%9D%82%E8%AE%B05--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85GitLab%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/1.png" class="" title="图片"><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><table><thead><tr><th>配置项</th><th>值</th></tr></thead><tbody><tr><td><code>external_url</code></td><td><code>https://&#123;domain&#125;:&#123;port&#125;</code></td></tr><tr><td><code>gitlab_rails[&#39;gitlab_shell_ssh_port&#39;]</code></td><td><code>18778</code></td></tr><tr><td><code>nginx[&#39;redirect_http_to_https&#39;]</code></td><td><code>true</code></td></tr><tr><td><code>nginx[&#39;redirect_http_to_https_port&#39;]</code></td><td><code>80</code></td></tr><tr><td><code>nginx[&#39;ssl_certificate&#39;]</code></td><td><code>/etc/gitlab/ssl/&#123;domain&#125;.crt</code></td></tr><tr><td><code>nginx[&#39;ssl_certificate_key&#39;]</code></td><td><code>/etc/gitlab/ssl/&#123;domain&#125;.key</code></td></tr><tr><td><code>nginx[&#39;listen_port&#39;]</code></td><td><code>443</code></td></tr></tbody></table><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>由于GitLab项目较为庞大，因此可能需要等很久，建议耐心等待</p><h2 id="配置端口转发"><a href="#配置端口转发" class="headerlink" title="配置端口转发"></a>配置端口转发</h2><p>如果你跟我一样需要用Nginx做端口转发，那建议你看一下我下面的一个问题，说不定你也会遇到哦</p><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="密码在哪"><a href="#密码在哪" class="headerlink" title="密码在哪"></a>密码在哪</h2><p>初始用户名为root，密码在&#x2F;etc&#x2F;gitlab&#x2F;initial_root_password文件下面，在文件管理里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Password: xxxxx</span><br></pre></td></tr></table></figure><p>切记密码只有24小时有效，使用后需要重新修改密码</p><h2 id="GitLab死活跳不到-port格式"><a href="#GitLab死活跳不到-port格式" class="headerlink" title="GitLab死活跳不到:port格式"></a>GitLab死活跳不到:port格式</h2><p>需要修改前置Nginx服务器的一个配置，把port信息差UN过去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Host $host:$server_port;</span><br></pre></td></tr></table></figure><h2 id="无法生成Access-Token"><a href="#无法生成Access-Token" class="headerlink" title="无法生成Access Token"></a>无法生成Access Token</h2><p>需要启用HTTPS，单纯的HTTTP会显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">An error occurred while fetching the tokens.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;需要在群晖NAS上搭建GitLab，以便上传自己的代码，同时可以通过外网访问，而不是局限于本地网络&lt;/p&gt;
&lt;h1 id=&quot;实践&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="Tools" scheme="https://maydaychen.github.io/categories/Tools/"/>
    
    
    <category term="NAS" scheme="https://maydaychen.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>NAS杂记4--群晖NAS安装N8N及问题记录</title>
    <link href="https://maydaychen.github.io/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://maydaychen.github.io/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2025-07-25T14:34:17.000Z</published>
    <updated>2025-07-26T09:33:20.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>群晖NAS（已安装Docker套件）</li><li>网络环境：本地局域网</li><li>存储空间：至少1GB可用空间</li></ul><h1 id="搭建N8N"><a href="#搭建N8N" class="headerlink" title="搭建N8N"></a>搭建N8N</h1><h2 id="创建持久化文件夹"><a href="#创建持久化文件夹" class="headerlink" title="创建持久化文件夹"></a>创建持久化文件夹</h2><p>首先，在群晖的File Station中，前往docker文件夹，创建一个名为n8n的文件夹，并在其下新建一个名为n8n_data的子文件夹</p><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/1.png" class="" title="图片"><h3 id="设置读取权限"><a href="#设置读取权限" class="headerlink" title="设置读取权限"></a>设置读取权限</h3><p>需要设置everyone可以写入</p><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/2.png" class="" title="图片"><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>直接在container manager中搜索n8n，直接下载即可</p><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/3.png" class="" title="图片"><h2 id="设置端口映射"><a href="#设置端口映射" class="headerlink" title="设置端口映射"></a>设置端口映射</h2><p>这里左边需要设置映射到你自己想要用的端口，右边是n8n自身用的端口<br>建议都设成一个值，方便以后设置webhook访问</p><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/4.png" class="" title="图片"><h2 id="挂载持久化文件夹"><a href="#挂载持久化文件夹" class="headerlink" title="挂载持久化文件夹"></a>挂载持久化文件夹</h2><p>将我们刚才设置的n8n_data文件夹映射到&#x2F;home&#x2F;node&#x2F;.n8n路径</p><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/5.png" class="" title="图片"><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><table><thead><tr><th>变量名</th><th>值</th></tr></thead><tbody><tr><td>GENERIC_TIMEZONE</td><td>Asia&#x2F;Shanghai</td></tr><tr><td>N8N_HOST</td><td>domain</td></tr><tr><td>N8N_SECURE_COOKIE</td><td>false</td></tr><tr><td>N8N_PROTOCOL</td><td>https</td></tr><tr><td>N8N_PORT</td><td>15678</td></tr></tbody></table><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/6.png" class="" title="图片"><h2 id="直接启动即可"><a href="#直接启动即可" class="headerlink" title="直接启动即可"></a>直接启动即可</h2><p>然后访问NAS的IP加上对应的端口，即可访问n8n主页</p><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="Error-Command-“start”-not-found"><a href="#Error-Command-“start”-not-found" class="headerlink" title="Error: Command “start” not found"></a>Error: Command “start” not found</h2><p>就是docker持久化的那个文件没有权限，参考<a href="https://www.aigc1.com/doc/1647">这个网站</a><br>需要设置everyone都可以写入，然后就不会启动失败了</p><h2 id="Lost-connection-to-the-server"><a href="#Lost-connection-to-the-server" class="headerlink" title="Lost connection to the server"></a>Lost connection to the server</h2><p>参考： <a href="https://community.n8n.io/t/connection-lost-using-nginx-reverse-proxy-n8n-1-16/32962">https://community.n8n.io/t/connection-lost-using-nginx-reverse-proxy-n8n-1-16/32962</a><br> 要修改一下Nginx配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Connection &#x27;Upgrade&#x27;;</span><br><span class="line">proxy_set_header Upgrade $http_upgrade;</span><br></pre></td></tr></table></figure><h3 id="释义："><a href="#释义：" class="headerlink" title="释义："></a>释义：</h3><p>proxy_set_header Connection ‘Upgrade’;告诉上游服务器：“我这个请求希望升级连接（比如从 HTTP 升级为 WebSocket）”。<br>proxy_set_header Upgrade $http_upgrade;将客户端请求中的 Upgrade 头（如 websocket）转发给后端服务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;群晖NAS（已安装Docker套件）&lt;/li&gt;
&lt;li&gt;网络环境：本地局域网&lt;/li&gt;
&lt;li&gt;存储空间：至少1</summary>
      
    
    
    
    <category term="Tools" scheme="https://maydaychen.github.io/categories/Tools/"/>
    
    
    <category term="NAS" scheme="https://maydaychen.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix进阶11--在ARM下安装Zabbix server</title>
    <link href="https://maydaychen.github.io/2025/06/27/Zabbix%E8%BF%9B%E9%98%B611--%E5%9C%A8ARM%E4%B8%8B%E5%AE%89%E8%A3%85Zabbix-server/"/>
    <id>https://maydaychen.github.io/2025/06/27/Zabbix%E8%BF%9B%E9%98%B611--%E5%9C%A8ARM%E4%B8%8B%E5%AE%89%E8%A3%85Zabbix-server/</id>
    <published>2025-06-27T05:58:48.000Z</published>
    <updated>2025-07-26T09:56:08.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><h2 id="安装yum-utils"><a href="#安装yum-utils" class="headerlink" title="安装yum-utils"></a>安装yum-utils</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install yum-utils</span><br></pre></td></tr></table></figure><h2 id="创建nginx官方镜像源"><a href="#创建nginx官方镜像源" class="headerlink" title="创建nginx官方镜像源"></a>创建nginx官方镜像源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/etc/yum.repos.d/nginx.repo</span><br><span class="line"></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br></pre></td></tr></table></figure><h2 id="安装nginx-1"><a href="#安装nginx-1" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><hr><h1 id="安装PostgreSQL-TimescaleDB"><a href="#安装PostgreSQL-TimescaleDB" class="headerlink" title="安装PostgreSQL+TimescaleDB"></a>安装PostgreSQL+TimescaleDB</h1><h2 id="PostgreSQL安装"><a href="#PostgreSQL安装" class="headerlink" title="PostgreSQL安装"></a>PostgreSQL安装</h2><p>Install the repository RPM:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br></pre></td></tr></table></figure><p>Disable the built-in PostgreSQL module:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf -qy module disable postgresql</span><br></pre></td></tr></table></figure><p>Install PostgreSQL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install -y postgresql17-server</span><br></pre></td></tr></table></figure><p>Optionally initialize the database and enable automatic start:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/pgsql-17/bin/postgresql-17-setup initdb</span><br><span class="line">sudo systemctl enable postgresql-17</span><br><span class="line">sudo systemctl start postgresql-17</span><br><span class="line">sudo systemctl status postgresql-17</span><br></pre></td></tr></table></figure><h2 id="TimescaleDB安装："><a href="#TimescaleDB安装：" class="headerlink" title="TimescaleDB安装："></a>TimescaleDB安装：</h2><p>添加 TimescaleDB 存储库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/yum.repos.d/timescale_timescaledb.repo &lt;&lt;EOL</span><br><span class="line">[timescale_timescaledb]</span><br><span class="line">name=timescale_timescaledb</span><br><span class="line">baseurl=https://packagecloud.io/timescale/timescaledb/el/$(rpm -E %&#123;rhel&#125;)/\$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packagecloud.io/timescale/timescaledb/gpgkey</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line">EOL</span><br></pre></td></tr></table></figure><p>更新本地仓库列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>安装 TimescaleDB</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install timescaledb-2-postgresql-17</span><br></pre></td></tr></table></figure><p>为 TimescaleDB 优化 PostgreSQL 实例</p><p>这个命令执行后全部输入Yes会将配置修改为推荐的设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo timescaledb-tune --pg-config=/usr/pgsql-17/bin/pg_config</span><br></pre></td></tr></table></figure><p>重启Postgresql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart postgresql-17</span><br><span class="line">sudo systemctl status postgresql-17</span><br></pre></td></tr></table></figure><p>以 postgres 身份登录 PostgreSQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql</span><br></pre></td></tr></table></figure><p>设置 postgres 的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\password postgres</span><br></pre></td></tr></table></figure><p>设置密码后，键入 \q 退出</p><p>强制使用密码登录</p><p>配置认证方法：</p><p>在 pg_hba.conf 文件中配置认证方法。</p><p>这个文件通常位于 PostgreSQL 数据目录中</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/pgsql/17/data/pg_hba.conf</span><br></pre></td></tr></table></figure><p>你需要为相应的用户和数据库配置使用密码认证的方法。</p><p>例如，要允许所有用户使用密码认证登录，可以添加或修改以下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host    all             all             0.0.0.0/0               md5</span><br></pre></td></tr></table></figure><p>这里 md5 表示使用 MD5 加密的密码进行认证。你也可以使用 scram-sha-256，这是 PostgreSQL 17 推荐的认证方法 。</p><p>重启 PostgreSQL 服务：</p><p>修改 pg_hba.conf 文件后，需要重启 PostgreSQL 服务以使更改生效。</p><p>在大多数系统上，你可以使用以下命令来重启服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart postgresql-17</span><br></pre></td></tr></table></figure><p>或者根据你的系统环境使用相应的命令。</p><p>测试连接：使用新设置的密码测试连接，以确保配置正确。</p><p>可以使用 psql 命令行工具连接到数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql</span><br><span class="line">psql -U postgres -h localhost -d postgres</span><br></pre></td></tr></table></figure><p>系统会提示你输入密码，这时应该输入你为 postgres 用户设置的密码。</p><p>请注意，出于安全考虑，不建议在生产环境中使用 trust 方法，因为它允许任何用户无需密码即可连接到数据库。始终使用密码认证，并确保密码足够复杂，以防止未经授权的访问 。</p><p>创建初始数据库</p><p>在数据库主机上运行以下代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres createuser --pwprompt zabbix</span><br><span class="line">sudo -u postgres createdb -O zabbix zabbix_db</span><br></pre></td></tr></table></figure><p>切换到zabbix_db</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\c zabbix_db</span><br></pre></td></tr></table></figure><p>将 TimescaleDB 添加到数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE EXTENSION IF NOT EXISTS timescaledb;</span><br></pre></td></tr></table></figure><p>检查是否已安装 TimescaleDB</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\dx</span><br></pre></td></tr></table></figure><p>您将看到已安装扩展的列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List of installed extensions</span><br><span class="line">Name     | Version |   Schema   |                                      Description                                      </span><br><span class="line">-------------+---------+------------+---------------------------------------------------------------------------------------</span><br><span class="line">plpgsql     | 1.0     | pg_catalog | PL/pgSQL procedural language</span><br><span class="line">timescaledb | 2.17.2  | public     | Enables scalable inserts and complex queries for time-series data (Community Edition)</span><br></pre></td></tr></table></figure><p>查看分区情况</p><p>查看分区表的概览信息，可以查询<code>timescaledb_information.hypertables</code>视图。这将显示所有已创建的超表（即被转换为支持时间序列数据存储的表）的元数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM timescaledb_information.hypertables;</span><br></pre></td></tr></table></figure><p>postgresql启用socket连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/pgsql/17/data/postgresql.conf</span><br><span class="line"></span><br><span class="line">取消注释以下选项并重启：</span><br><span class="line">unix_socket_directories = &#x27;/run/postgresql&#x27; # comma-separated list of directories</span><br></pre></td></tr></table></figure><hr><h1 id="安装zabbix"><a href="#安装zabbix" class="headerlink" title="安装zabbix"></a>安装zabbix</h1><h2 id="安装Zabbix源"><a href="#安装Zabbix源" class="headerlink" title="安装Zabbix源"></a>安装Zabbix源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/8/x86_64/zabbix-release-latest-7.0.el8.noarch.rpm</span><br><span class="line">dnf clean all</span><br></pre></td></tr></table></figure><p>切换PHP的DNF模块版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf module switch-to php:8.2</span><br></pre></td></tr></table></figure><p>安装Zabbix server, frontend, agent2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install zabbix-server-pgsql zabbix-web-pgsql zabbix-nginx-conf zabbix-sql-scripts zabbix-selinux-policy zabbix-agent2</span><br></pre></td></tr></table></figure><p>安装Zabbix agent 2插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dnf install zabbix-agent2-plugin-mongodb zabbix-agent2-plugin-mssql zabbix-agent2-plugin-postgresql</span><br><span class="line"></span><br><span class="line">yum install zabbix-agent2-plugin-*</span><br></pre></td></tr></table></figure><p>导入初始架构和数据，系统将提示您输入新创建的密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz | sudo -u zabbix psql zabbix_db</span><br></pre></td></tr></table></figure><p>源码安装zabbix导入初始架构和数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd database/postgresql</span><br><span class="line">cat schema.sql | sudo -u zabbix psql zabbix_db</span><br><span class="line"># 如果您正在为 Zabbix 代理创建数据库，请在此处停止</span><br><span class="line">cat images.sql | sudo -u zabbix psql zabbix_db</span><br><span class="line">cat data.sql | sudo -u zabbix psql zabbix_db</span><br></pre></td></tr></table></figure><p>对于新安装，运行 postgresql&#x2F;timescaledb&#x2F;schema.sql 脚本。 该脚本必须在使用初始模式&#x2F;数据创建常规 PostgreSQL 数据库之后运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/share/zabbix-sql-scripts/postgresql/timescaledb/schema.sql | sudo -u zabbix psql zabbix_db</span><br></pre></td></tr></table></figure><h2 id="为Zabbix-server配置数据库"><a href="#为Zabbix-server配置数据库" class="headerlink" title="为Zabbix server配置数据库"></a>为Zabbix server配置数据库</h2><p>编辑配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/zabbix/zabbix_server.conf</span><br><span class="line"></span><br><span class="line">DBPassword=password</span><br></pre></td></tr></table></figure><p>启动Zabbix server和agent进程</p><p>启动Zabbix server和agent进程，并为它们设置开机自启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent2 nginx php-fpm</span><br><span class="line">systemctl enable zabbix-server zabbix-agent2 nginx php-fpm</span><br><span class="line">systemctl status zabbix-server zabbix-agent2 nginx php-fpm</span><br></pre></td></tr></table></figure><hr><p>报错解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">报错信息</span><br><span class="line">/usr/sbin/zabbix_server: /lib64/libpq.so.5: no version information available (required by /usr/sbin/zabbix_server)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装nginx&quot;&gt;&lt;a href=&quot;#安装nginx&quot; class=&quot;headerlink&quot; title=&quot;安装nginx&quot;&gt;&lt;/a&gt;安装nginx&lt;/h1&gt;&lt;h2 id=&quot;安装yum-utils&quot;&gt;&lt;a href=&quot;#安装yum-utils&quot; class=&quot;he</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Linux操作记录8--为AmazonLinux2做OSPatch</title>
    <link href="https://maydaychen.github.io/2025/06/21/Linux%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%958--%E4%B8%BAAmazonLinux2%E5%81%9AOSPatch/"/>
    <id>https://maydaychen.github.io/2025/06/21/Linux%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%958--%E4%B8%BAAmazonLinux2%E5%81%9AOSPatch/</id>
    <published>2025-06-21T06:08:48.000Z</published>
    <updated>2025-07-01T05:49:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>在每次漏洞扫描之后，每一个运维人都会怀着激动而又紧张的心情来看这一份报告，毕竟这决定了他们的工作量<br>那么，我们会怎么给每一台服务器打补丁呢？这边记录一下工作中用到的两种方法</p><h1 id="手动Patch"><a href="#手动Patch" class="headerlink" title="手动Patch"></a>手动Patch</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 除了Amazon Linux2023</span><br><span class="line">sudo yum update</span><br><span class="line"># Amazon Linux2023</span><br><span class="line">dnf upgrade --releasever=2023.7.20250623</span><br><span class="line"></span><br><span class="line"># 2. reboot</span><br><span class="line"></span><br><span class="line"># 3. execute the 3 command below</span><br><span class="line">uname -r</span><br><span class="line">rpm -q kernel</span><br><span class="line">sudo package-cleanup --oldkernels --count=1 -y</span><br><span class="line">## For Amazon Linux2023</span><br><span class="line">sudo dnf remove --oldinstallonly --setopt installonly_limit=2 kernel -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 4. check the running status of each service(fail2ban/xxx)</span><br><span class="line"># 5. test to login to other servers</span><br></pre></td></tr></table></figure><h1 id="AWS-自动Patch"><a href="#AWS-自动Patch" class="headerlink" title="AWS 自动Patch"></a>AWS 自动Patch</h1><p><a href="https://ap-southeast-1.console.aws.amazon.com/systems-manager/home?region=ap-southeast-1#welcome">https://ap-southeast-1.console.aws.amazon.com/systems-manager/home?region=ap-southeast-1#welcome</a><br>参考这个网址上的内容，使用AWS Patch manager</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在每次漏洞扫描之后，每一个运维人都会怀着激动而又紧张的心情来看这一份报告，毕竟这决定了他们的工作量&lt;br&gt;那么，我们会怎么给每一台服务器打补丁呢？这边记录一下工作中用到的两种方法&lt;/p&gt;
&lt;h1 id=&quot;手动Patch&quot;&gt;&lt;a href=&quot;#手动Patch&quot; class=&quot;</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://maydaychen.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix进阶10--设置MFA登录</title>
    <link href="https://maydaychen.github.io/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/"/>
    <id>https://maydaychen.github.io/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/</id>
    <published>2025-06-20T02:42:54.000Z</published>
    <updated>2025-07-26T09:51:10.189Z</updated>
    
    <content type="html"><![CDATA[<p>当我们需要将Zabbix或者Grafana暴露在公网之时，为账号设置MFA就变得非常重要了，毕竟相比于密码，MFA可以说是更加安全一些<br>上一篇我们说了怎么为Grafana设置MFA，这一篇我们来说一下如何为Zabbix设置MFA<br>从Zabbix 6.0开始，MFA的功能就成了built-in功能，我们也不需要接入任何的第三方，直接使用即可</p><h1 id="添加MFA选项"><a href="#添加MFA选项" class="headerlink" title="添加MFA选项"></a>添加MFA选项</h1><img src="/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/MFA1.png" class="" title="图片"><p>进入User-&gt; Authentication,勾选“Enable multi-factor authentication”,并且添加一个Method如下</p><img src="/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/MFA2.png" class="" title="图片"><h1 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h1><p>我们需要在Zabbix中创建一个用户组，并且做如下操作：</p><ul><li>把需要设置MFA的用户都添加到该组中</li><li>Multi-factor authentication选择刚才我们创建的method<img src="/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/MFA3.png" class="" title="图片">保存过后，用户的下一次登录需要启用MFA，并且在每次登录时必须输入MFA</li></ul><h1 id="登录设置MFA"><a href="#登录设置MFA" class="headerlink" title="登录设置MFA"></a>登录设置MFA</h1><img src="/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/MFA4.png" class="" title="图片">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当我们需要将Zabbix或者Grafana暴露在公网之时，为账号设置MFA就变得非常重要了，毕竟相比于密码，MFA可以说是更加安全一些&lt;br&gt;上一篇我们说了怎么为Grafana设置MFA，这一篇我们来说一下如何为Zabbix设置MFA&lt;br&gt;从Zabbix 6.0开始，MF</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Grafana使用日志10--接入keycloak验证</title>
    <link href="https://maydaychen.github.io/2025/06/19/Grafana%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%9710--%E6%8E%A5%E5%85%A5keycloak%E9%AA%8C%E8%AF%81/"/>
    <id>https://maydaychen.github.io/2025/06/19/Grafana%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%9710--%E6%8E%A5%E5%85%A5keycloak%E9%AA%8C%E8%AF%81/</id>
    <published>2025-06-19T02:40:34.000Z</published>
    <updated>2025-06-20T02:42:45.726Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，在Grafana中自带的账号体系是没有办法支持MFA的，只能通过第三方来支持MFA，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;众所周知，在Grafana中自带的账号体系是没有办法支持MFA的，只能通过第三方来支持MFA，&lt;/p&gt;
</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Grafana" scheme="https://maydaychen.github.io/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix踩坑记录5--监控Windows文件导致IO过高的经验记录</title>
    <link href="https://maydaychen.github.io/2025/04/14/Zabbix%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%955--%E7%9B%91%E6%8E%A7Windows%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4IO%E8%BF%87%E9%AB%98%E7%9A%84%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/"/>
    <id>https://maydaychen.github.io/2025/04/14/Zabbix%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%955--%E7%9B%91%E6%8E%A7Windows%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4IO%E8%BF%87%E9%AB%98%E7%9A%84%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/</id>
    <published>2025-04-14T09:06:41.000Z</published>
    <updated>2025-07-26T10:03:32.074Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows中，如果增加logrt之类的监控，会导致CPU一场上升，经过了数日的调查，终于找到了解决方案，在此记录一下</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于需要在windows中添加对transaction的监控，而transaction的log是被记录在一个总的folder中的，现在如果在这个folder中加入了很多的monitoring item，会导致IO一场升高，最终导致CPU的异常使用</p><h1 id="调查"><a href="#调查" class="headerlink" title="调查"></a>调查</h1><p>调查中发现，由于创建了很多的日志监控，但是每一个日志文件都在同一个文件夹中，换句话说，那个文件夹有几百个文件！<br>即使用Windows自带的搜索功能搜索文件，需要耗费很久，而我们有几百个这样的监控项，导致了每一个item都在疯狂耗费资源搜索，从而导致了CPU飙升</p><h1 id="优化项"><a href="#优化项" class="headerlink" title="优化项"></a>优化项</h1><p>经过这件事之后，在Windows服务器中，如果我们还有日志监控相关的需求，我们会要求developer将log单独存放在一个文件夹中，并定时清理，保证文件夹的文件数量一定是相对较少，对系统搜索不会产生什么影响的<br>这时候发现，确实CPU的使用率下降了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Windows中，如果增加logrt之类的监控，会导致CPU一场上升，经过了数日的调查，终于找到了解决方案，在此记录一下&lt;/p&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;由</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix进阶9--处理Prometheus行协议格式数据</title>
    <link href="https://maydaychen.github.io/2025/04/01/Zabbix%E8%BF%9B%E9%98%B69--%E5%A4%84%E7%90%86Prometheus%E8%A1%8C%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/"/>
    <id>https://maydaychen.github.io/2025/04/01/Zabbix%E8%BF%9B%E9%98%B69--%E5%A4%84%E7%90%86Prometheus%E8%A1%8C%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/</id>
    <published>2025-04-01T02:43:48.000Z</published>
    <updated>2025-07-26T09:51:10.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在K8S环境中，所有的metric都是通过&#x2F;metrics API来获取，大部分的API都返回了prometheus行协议格式的数据，因此我们需要针对返回的格式做进一步处理</p><h1 id="详细操作"><a href="#详细操作" class="headerlink" title="详细操作"></a>详细操作</h1><h2 id="Item"><a href="#Item" class="headerlink" title="Item"></a>Item</h2><h2 id="Preprocessing"><a href="#Preprocessing" class="headerlink" title="Preprocessing"></a>Preprocessing</h2><p>在这一步我们需要选择Prometheus pattern，然后在Parameters中通过PromQL语句去查询<br>最后在右边有一些方法可选，下面是具体的</p><table><thead><tr><th>序号</th><th>名称</th><th>用途</th></tr></thead><tbody><tr><td>1</td><td>value</td><td>返回指标的值（当匹配到多行记录时，会引发错误）</td></tr><tr><td>2</td><td>label</td><td>在标签字段中指定的标签返回值（当匹配到多个指标时，会引发错误）</td></tr><tr><td>3</td><td>sum</td><td>返回值的总和</td></tr><tr><td>4</td><td>min</td><td>返回最小值</td></tr><tr><td>5</td><td>max</td><td>返回最大值</td></tr><tr><td>6</td><td>avg</td><td>返回平均值</td></tr><tr><td>7</td><td>count</td><td>返回值的计数</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在K8S环境中，所有的metric都是通过&amp;#x2F;metrics API来获取，大部分的API都返回了prometheus行协议格式的数</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Mac软件推荐1--ProNotes让你用上更好用的记事本</title>
    <link href="https://maydaychen.github.io/2025/03/05/Mac%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%901--ProNotes%E8%AE%A9%E4%BD%A0%E7%94%A8%E4%B8%8A%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E4%BA%8B%E6%9C%AC/"/>
    <id>https://maydaychen.github.io/2025/03/05/Mac%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%901--ProNotes%E8%AE%A9%E4%BD%A0%E7%94%A8%E4%B8%8A%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E4%BA%8B%E6%9C%AC/</id>
    <published>2025-03-05T05:25:34.000Z</published>
    <updated>2025-03-05T05:27:27.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p><a href="https://www.pronotes.app/">https://www.pronotes.app/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;h1 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址&quot;&gt;&lt;/a&gt;下载地址&lt;/h</summary>
      
    
    
    
    <category term="Tools" scheme="https://maydaychen.github.io/categories/Tools/"/>
    
    
    <category term="MacOS" scheme="https://maydaychen.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew常用操作记录</title>
    <link href="https://maydaychen.github.io/2025/03/01/Homebrew%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>https://maydaychen.github.io/2025/03/01/Homebrew%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</id>
    <published>2025-03-01T01:57:52.000Z</published>
    <updated>2025-03-01T02:22:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自身操作"><a href="#自身操作" class="headerlink" title="自身操作"></a>自身操作</h1><h2 id="Homebrew更新自身"><a href="#Homebrew更新自身" class="headerlink" title="Homebrew更新自身"></a>Homebrew更新自身</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><h1 id="软件包操作"><a href="#软件包操作" class="headerlink" title="软件包操作"></a>软件包操作</h1><h2 id="列出所有的软件包"><a href="#列出所有的软件包" class="headerlink" title="列出所有的软件包"></a>列出所有的软件包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><h2 id="查看单个软件包信息"><a href="#查看单个软件包信息" class="headerlink" title="查看单个软件包信息"></a>查看单个软件包信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info python@3.12</span><br></pre></td></tr></table></figure><h2 id="列出所有可以更新的软件包"><a href="#列出所有可以更新的软件包" class="headerlink" title="列出所有可以更新的软件包"></a>列出所有可以更新的软件包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew outdated</span><br></pre></td></tr></table></figure><h2 id="更新所有软件包"><a href="#更新所有软件包" class="headerlink" title="更新所有软件包"></a>更新所有软件包</h2><p>如果你想一次性更新所有已安装的软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade</span><br></pre></td></tr></table></figure><p>这个命令会更新所有软件包</p><h2 id="更新单个软件包"><a href="#更新单个软件包" class="headerlink" title="更新单个软件包"></a>更新单个软件包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade python@3.12</span><br></pre></td></tr></table></figure><h2 id="清理旧版本"><a href="#清理旧版本" class="headerlink" title="清理旧版本"></a>清理旧版本</h2><p>注：新版本的homebrew从日志来看upgrade之后能够自动运行cleanup命令，所以可以自动清理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup</span><br></pre></td></tr></table></figure><p>这会删除Homebrew不再使用的旧版本软件，并节省磁盘空间。<br>如果你想检查可以清理多少空间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup -n</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自身操作&quot;&gt;&lt;a href=&quot;#自身操作&quot; class=&quot;headerlink&quot; title=&quot;自身操作&quot;&gt;&lt;/a&gt;自身操作&lt;/h1&gt;&lt;h2 id=&quot;Homebrew更新自身&quot;&gt;&lt;a href=&quot;#Homebrew更新自身&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="开发" scheme="https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Grafana使用日志9--Zabbix插件可配置参数学习</title>
    <link href="https://maydaychen.github.io/2025/02/25/Grafana%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%979--Zabbix%E6%8F%92%E4%BB%B6%E5%8F%AF%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%AD%A6%E4%B9%A0/"/>
    <id>https://maydaychen.github.io/2025/02/25/Grafana%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%979--Zabbix%E6%8F%92%E4%BB%B6%E5%8F%AF%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-02-25T08:54:29.000Z</published>
    <updated>2025-02-25T10:02:09.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><img src="/2025/02/25/Grafana%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%979--Zabbix%E6%8F%92%E4%BB%B6%E5%8F%AF%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%AD%A6%E4%B9%A0/1.png" class="" title="图片"><ol><li>Max data points（最大数据点数）<br>定义：表示在查询时间范围内返回的最大数据点数。<br>作用：用于控制查询结果的精度和数据量。如果数据点过多，Grafana会自动对数据进行降采样（downsampling），以减少数据量并提高性能。<br>示例：<br>   如果时间范围是7天，Max data points设置为1000，则Grafana会尝试将7天的数据压缩为最多1000个点。<br>   如果原始数据点超过1000，Grafana会通过聚合（如平均值、最大值等）来减少数据点数量。</li><li>Min interval（最小间隔）<br>定义：表示查询的最小时间间隔。<br>作用：用于限制查询的时间粒度，避免查询过于频繁或返回过多数据。<br>示例：<br>   如果 Min interval 设置为 1m，则查询的时间间隔不会小于1分钟。<br>   如果时间范围较大（如1年），Grafana会根据 Min interval 自动调整查询的时间间隔。</li><li>Interval（间隔）<br>定义：表示查询的时间间隔。<br>作用：用于指定查询的时间粒度。较小的间隔会返回更多的数据点，较大的间隔会返回较少的数据点。<br>示例：<br>   如果 Interval 设置为 5m，则每5分钟查询一次数据。<br>   如果 Interval 设置为 1h，则每小时查询一次数据。</li><li>Relative time（相对时间）<br>定义：表示查询的时间范围，相对于当前时间。如果设置了这个时间，那么这个panel跟右上角的time range选择就脱节了，只会显示固定time range的数据<br>作用：用于动态设置查询的时间范围。<br>示例：<br>   如果 Relative time 设置为 now-7d，则查询的时间范围是从当前时间往前推7天到当前时间。<br>   如果 Relative time 设置为 now-1h，则查询的时间范围是从当前时间往前推1小时到当前时间。</li><li>Time shift（时间偏移）<br>定义：表示将查询的时间范围整体偏移一定的时间。<br>作用：用于比较不同时间段的数据。<br>示例：<br>   如果 Time shift 设置为 1d，则查询的时间范围会整体往前偏移1天。<br>   例如，原始时间范围是 now-7d 到 now，加上 Time shift 后，时间范围变为 now-8d 到 now-1d。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;详解&quot;&gt;&lt;a href=&quot;#详解&quot; class=&quot;headerlink&quot; title=&quot;详解&quot;&gt;&lt;/a&gt;详解&lt;/h1&gt;&lt;h2 id=&quot;全局配置&quot;&gt;&lt;a href=&quot;#全局配置&quot; class=&quot;headerlink&quot; title=&quot;全局配置&quot;&gt;&lt;/a&gt;全局配置&lt;/h</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Grafana" scheme="https://maydaychen.github.io/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix进阶8--使用history.push推送数据</title>
    <link href="https://maydaychen.github.io/2025/02/25/Zabbix%E8%BF%9B%E9%98%B68--%E4%BD%BF%E7%94%A8history-push%E6%8E%A8%E9%80%81%E6%95%B0%E6%8D%AE/"/>
    <id>https://maydaychen.github.io/2025/02/25/Zabbix%E8%BF%9B%E9%98%B68--%E4%BD%BF%E7%94%A8history-push%E6%8E%A8%E9%80%81%E6%95%B0%E6%8D%AE/</id>
    <published>2025-02-25T07:12:02.000Z</published>
    <updated>2025-02-25T09:36:37.000Z</updated>
    
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>AWS知识点记录1--HTTPCode_ELB_4XX_Count和HTTPCode_Target_4XX_Count的区别</title>
    <link href="https://maydaychen.github.io/2025/02/24/AWS%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%951--HTTPCode-ELB-4XX-Count%E5%92%8CHTTPCode-Target-4XX-Count%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://maydaychen.github.io/2025/02/24/AWS%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%951--HTTPCode-ELB-4XX-Count%E5%92%8CHTTPCode-Target-4XX-Count%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2025-02-24T09:27:53.000Z</published>
    <updated>2025-02-24T09:38:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h1><p>这两个metric在AWS中到底代表了什么？</p><h1 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h1><p>这是用于帮助诊断错误所在的2种度量标准，用于诊断4XX错误。</p><p>HTTPCode_ELB_4XX_Count – 这是从ELB返回的4XX个错误的数量。<br>HTTPCode_Target_4XX_Count – 这只是从应用服务器返回的4XX错误。</p><p>也就是说，HTTPCode_ELB_4XX_Count是来自负载均衡器的4xx响应代码的计数，而不是目标的计数，例如，在负载均衡器也不知道在哪里转发请求的情况下,ELB会直接报错4XX<br>类似地，HTTPCode_Target_4XX_Count只表示来自目标组的4xx响应的计数，而不是负载均衡器，例如访问application被拒绝，此时爆出的403等错误就属于HTTPCode_Target_4XX_Count</p><p>参考链接： <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html">https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;提问&quot;&gt;&lt;a href=&quot;#提问&quot; class=&quot;headerlink&quot; title=&quot;提问&quot;&gt;&lt;/a&gt;提问&lt;/h1&gt;&lt;p&gt;这两个metric在AWS中到底代表了什么？&lt;/p&gt;
&lt;h1 id=&quot;回答&quot;&gt;&lt;a href=&quot;#回答&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="AWS" scheme="https://maydaychen.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix监控万物6--监控Nginx</title>
    <link href="https://maydaychen.github.io/2025/02/24/Zabbix%E7%9B%91%E6%8E%A7%E4%B8%87%E7%89%A96--%E7%9B%91%E6%8E%A7Nginx/"/>
    <id>https://maydaychen.github.io/2025/02/24/Zabbix%E7%9B%91%E6%8E%A7%E4%B8%87%E7%89%A96--%E7%9B%91%E6%8E%A7Nginx/</id>
    <published>2025-02-24T07:01:16.000Z</published>
    <updated>2025-02-24T15:34:20.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在项目中使用Nginx之后，有时候我们需要知道Nginx具体的工作情况，这时候就需要使用zabbix进行Nginx的相关监控<br>这边我们有两种方法</p><ol><li>使用普通的http请求的方式获取基本信息</li><li>如果使用了Nginx Plus，就可以通过Nginx Plus的接口获取更多的信息</li></ol><h1 id="普通方式"><a href="#普通方式" class="headerlink" title="普通方式"></a>普通方式</h1><p>参考链接： <a href="https://www.zabbix.com/integrations/nginx#nginx_agent">https://www.zabbix.com/integrations/nginx#nginx_agent</a></p><h2 id="确认nginx是否开启with-http-stub-status-module模块"><a href="#确认nginx是否开启with-http-stub-status-module模块" class="headerlink" title="确认nginx是否开启with-http_stub_status_module模块"></a>确认nginx是否开启with-http_stub_status_module模块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V 2&gt;&amp;1 | grep -o with-http_stub_status_module</span><br></pre></td></tr></table></figure><p>如果出现with-http_stub_status_module，说明已经开启了该module，即可进行下一步</p><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>在80端口对应的配置项里加入如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location = /basic_status &#123;</span><br><span class="line">        stub_status;</span><br><span class="line">        allow 127.0.0.1;</span><br><span class="line">        allow ::1;</span><br><span class="line">        deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改宏变量（可选）"><a href="#修改宏变量（可选）" class="headerlink" title="修改宏变量（可选）"></a>修改宏变量（可选）</h2><p>默认情况下，不需要修改任何宏变量，因为他就是指向了localhost&#x2F;basic_status<br>不过如果修改了端口或者location的话，需要修改对应的配置</p><h1 id="Nginx-Plus方式"><a href="#Nginx-Plus方式" class="headerlink" title="Nginx Plus方式"></a>Nginx Plus方式</h1><p>这个方式比较厉害，能看到的东西非常多，但是有个巨大的问题，就是这不是免费的！<br>如果没有用这个的话，建议可以直接放弃<br>参考链接： <a href="https://www.zabbix.com/integrations/nginx#nginx_plus_http">https://www.zabbix.com/integrations/nginx#nginx_plus_http</a></p><h2 id="配置-重启nginx"><a href="#配置-重启nginx" class="headerlink" title="配置&#x2F;重启nginx"></a>配置&#x2F;重启nginx</h2><p>添加如下配置</p><img src="/2025/02/24/Zabbix%E7%9B%91%E6%8E%A7%E4%B8%87%E7%89%A96--%E7%9B%91%E6%8E%A7Nginx/plus_0.png" class="" title="图片"><p>保存并重启nginx<br>restart&#x2F;reload nginx之后，我们可以尝试访问如下页面，可以看到是有数据传输的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&lt;IP&gt;:8080/dashboard.html#upstreams</span><br></pre></td></tr></table></figure><img src="/2025/02/24/Zabbix%E7%9B%91%E6%8E%A7%E4%B8%87%E7%89%A96--%E7%9B%91%E6%8E%A7Nginx/plus_1.png" class="" title="图片"><h2 id="绑定template"><a href="#绑定template" class="headerlink" title="绑定template"></a>绑定template</h2><p>这一步非常简单，就把这个template绑定到对应的host上去即可</p><h2 id="修改宏变量"><a href="#修改宏变量" class="headerlink" title="修改宏变量"></a>修改宏变量</h2><p>我们需要把template中的这个宏改成如下格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;location&gt;/`.</span><br></pre></td></tr></table></figure><img src="/2025/02/24/Zabbix%E7%9B%91%E6%8E%A7%E4%B8%87%E7%89%A96--%E7%9B%91%E6%8E%A7Nginx/plus_2.png" class="" title="图片"><h2 id="刷新即可"><a href="#刷新即可" class="headerlink" title="刷新即可"></a>刷新即可</h2><p>能看到已经自动添加了很多很多的监控项了，基本上每一个stream，每一个zone都有对应的监控，功能比单纯的status监控多得多</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在项目中使用Nginx之后，有时候我们需要知道Nginx具体的工作情况，这时候就需要使用zabbix进行Nginx的相关监控&lt;br&gt;这边我们</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix进阶7--接入DeepSeek分析问题并提供解决方案</title>
    <link href="https://maydaychen.github.io/2025/02/24/Zabbix%E8%BF%9B%E9%98%B67--%E6%8E%A5%E5%85%A5DeepSeek%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98%E5%B9%B6%E6%8F%90%E4%BE%9B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://maydaychen.github.io/2025/02/24/Zabbix%E8%BF%9B%E9%98%B67--%E6%8E%A5%E5%85%A5DeepSeek%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98%E5%B9%B6%E6%8F%90%E4%BE%9B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2025-02-24T05:54:53.000Z</published>
    <updated>2025-02-25T03:08:23.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于现在AI的爆火，怎么有效使用AI来提高我们的工作成了很关键的一点，用好了，工作都能少做很多，所以我们尝试在Zabbix中接入DeepSeek来获取报警的相关知识<br>参考文章： <a href="https://blog.zabbix.com/creating-a-personal-assistant-in-zabbix-with-artificial-intelligence/29596/">https://blog.zabbix.com/creating-a-personal-assistant-in-zabbix-with-artificial-intelligence/29596/</a><br>文章中使用了Gemini,而我们这回选择改成Deepseek，看能不能实现相同的功能</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="创建script"><a href="#创建script" class="headerlink" title="创建script"></a>创建script</h2><p>Alert -&gt; Script<br>创建一个手动执行的script，也就是说只有当你手动选择执行script的时候才能够运行该脚本</p><img src="/2025/02/24/Zabbix%E8%BF%9B%E9%98%B67--%E6%8E%A5%E5%85%A5DeepSeek%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98%E5%B9%B6%E6%8F%90%E4%BE%9B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Zabbix_AI_1.png" class="" title="图片"><h2 id="修改timeout"><a href="#修改timeout" class="headerlink" title="修改timeout"></a>修改timeout</h2><p>timeout参数必须修改，尤其是推理模型的时候，因为可能网络问题或者性能问题，默认的30s timeout时间是不够的，所以咱们尽可能改大一点，60s最大</p><h2 id="修改Parameters参数"><a href="#修改Parameters参数" class="headerlink" title="修改Parameters参数"></a>修改Parameters参数</h2><p>在Parameters中输入以下两个参数：</p><ul><li>alert_subject， {TRIGGER.NAME}, 即alert的名称，用来分析报错原因，所以alert的名称需要设置的正确</li><li>api_key: API token， sk-xxxxx</li><li>model: 模型名称</li></ul><h2 id="编辑脚本内容"><a href="#编辑脚本内容" class="headerlink" title="编辑脚本内容"></a>编辑脚本内容</h2><p>在Script中输入以下内容<br>值得一说的是，这个是接入了阿里云的deepseep，如果你接入的是其他的平台，记得修改API地址以及接口格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">var DeepSeek = &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    setParams: function (params) &#123;</span><br><span class="line">        if (typeof params !== &#x27;object&#x27;) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        DeepSeek.params = params;</span><br><span class="line">        if (typeof DeepSeek.params.api_key !== &#x27;string&#x27; || DeepSeek.params.api_key === &#x27;&#x27;) &#123;</span><br><span class="line">            throw &#x27;API key for DeepSeek is required.&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        DeepSeek.params.url = &#x27;https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions&#x27;;</span><br><span class="line">    &#125;,</span><br><span class="line">    request: function (data) &#123;</span><br><span class="line">        if (!DeepSeek.params.api_key) &#123;</span><br><span class="line">            throw &#x27;API key is missing.&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        var request = new HttpRequest();</span><br><span class="line">request.addHeader(&#x27;Content-Type: application/json&#x27;);</span><br><span class="line">        request.addHeader(&#x27;Authorization: Bearer &#x27; + DeepSeek.params.api_key);</span><br><span class="line">        var response = request.post(DeepSeek.params.url, JSON.stringify(data));</span><br><span class="line"></span><br><span class="line">        if (request.getStatus() &lt; 200 || request.getStatus() &gt;= 300) &#123;</span><br><span class="line">            throw &#x27;DeepSeek API request failed with status code &#x27; + request.getStatus() + &#x27;.&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            response = JSON.parse(response);</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            Zabbix.log(4, &#x27;[ DeepSeek Webhook ] Failed to parse response.&#x27;);</span><br><span class="line">            response = null;</span><br><span class="line">        &#125;</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    var params = JSON.parse(value),</span><br><span class="line">        data = &#123;&#125;,</span><br><span class="line">        result = &quot;&quot;,</span><br><span class="line">        required_params = [&#x27;alert_subject&#x27;];</span><br><span class="line"></span><br><span class="line">    Object.keys(params).forEach(function (key) &#123;</span><br><span class="line">        if (required_params.indexOf(key) !== -1 &amp;&amp; params[key] === &#x27;&#x27;) &#123;</span><br><span class="line">            throw &#x27;Parameter &quot;&#x27; + key + &#x27;&quot; cannot be empty.&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        &quot;model&quot;: &quot;deepseek-v3&quot;,  // 指定模型</span><br><span class="line">        &quot;messages&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;role&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;content&quot;: &quot;Alert : &quot; + params.alert_subject + &quot; occurred on Zabbix. &quot; +</span><br><span class="line">                    &quot;Suggest possible causes and solutions to resolve this issue. &quot; +</span><br><span class="line">                    &quot;Provide concise points (10 lines max) including root causes, debug commands, and mitigation steps.&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    DeepSeek.setParams(&#123;api_key: params.api_key&#125;);</span><br><span class="line">Zabbix.log(3, &#x27;[ DeepSeek debug ] &#x27; + data);</span><br><span class="line">    var response = DeepSeek.request(data);</span><br><span class="line"></span><br><span class="line">    if (response &amp;&amp; response.choices &amp;&amp; response.choices.length &gt; 0) &#123;</span><br><span class="line">        result = response.choices[0].message.content.trim();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw &#x27;No valid response from DeepSeek.&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line"></span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">    Zabbix.log(3, &#x27;[ DeepSeek Webhook ] ERROR: &#x27; + error);</span><br><span class="line">    throw &#x27;Sending failed: &#x27; + error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试脚本是否工作"><a href="#测试脚本是否工作" class="headerlink" title="测试脚本是否工作"></a>测试脚本是否工作</h2><p>Monitoring -&gt; Problems中，随便找一个问题，点击问题，会出现刚刚创建的script选项</p><img src="/2025/02/24/Zabbix%E8%BF%9B%E9%98%B67--%E6%8E%A5%E5%85%A5DeepSeek%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98%E5%B9%B6%E6%8F%90%E4%BE%9B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Zabbix_AI_2.png" class="" title="图片"><img src="/2025/02/24/Zabbix%E8%BF%9B%E9%98%B67--%E6%8E%A5%E5%85%A5DeepSeek%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98%E5%B9%B6%E6%8F%90%E4%BE%9B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Zabbix_AI_3.png" class="" title="图片"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个个人感觉只是一个初阶版，只能根据该问题的title进行分析并给出对应的建议，无法结合其他信息进一步分析<br>而且，由于网络问题，API很容易超时，导致无法展示结果，因此对API的性能和网络有较高要求</p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>目前在Zabbix界面上，Webhook可配置的最大超时时间为60s，不过由于Deepseek思考时间可能较长(即便配置成V3依旧超时)，再加上第三方API的网络性能问题，往往60s也是不够的<br>这种情况下，可通过数据库方式直接配置为300s</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据脚本名称更新脚本超时时间为300s</span></span><br><span class="line">mysql -uzabbix -p</span><br><span class="line">use zabbix;</span><br><span class="line">update scripts set timeout=&#x27;300s&#x27; where name =&#x27;&#123;&#123;Script Name&#125;&#125;&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;由于现在AI的爆火，怎么有效使用AI来提高我们的工作成了很关键的一点，用好了，工作都能少做很多，所以我们尝试在Zabbix中接入DeepSe</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix踩坑记录4--HttpRequest，header添加无效</title>
    <link href="https://maydaychen.github.io/2025/02/24/Zabbix%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%954--HttpRequest%EF%BC%8Cheader%E6%B7%BB%E5%8A%A0%E6%97%A0%E6%95%88/"/>
    <id>https://maydaychen.github.io/2025/02/24/Zabbix%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%954--HttpRequest%EF%BC%8Cheader%E6%B7%BB%E5%8A%A0%E6%97%A0%E6%95%88/</id>
    <published>2025-02-24T03:13:30.000Z</published>
    <updated>2025-02-24T15:04:10.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在试图尝试通过Zabbix接入DeepSeek API的时候，由于使用了HTTP的方式，所以需要使用Zabbix 自带的HttpRequest库进行请求，产生了下面的问题</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl</span><br><span class="line">curl -X POST https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions \</span><br><span class="line">-H &quot;Authorization: Bearer $DASHSCOPE_API_KEY&quot; \</span><br><span class="line">-H &quot;Content-Type: application/json&quot; \</span><br><span class="line">-d &#x27;&#123;</span><br><span class="line">    &quot;model&quot;: &quot;deepseek-r1&quot;,</span><br><span class="line">    &quot;messages&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot;: &quot;user&quot;, </span><br><span class="line">            &quot;content&quot;: &quot;9.9和9.11谁大&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>这是阿里云的DeepSeek API的请求示例，可以看到必须加入两个header，即必须把API_KEY放进去，所以我写了如下的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.addHeader(&#x27;Content-Type&#x27;,&#x27;application/json&#x27;);</span><br><span class="line">request.addHeader(&#x27;Authorization&#x27;,&#x27;Bearer xxx&#x27;);</span><br></pre></td></tr></table></figure><p>但是收获了如下的error</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">250751:20250224:105524.139 [ DeepSeek Webhook ] Received response with status code 401</span><br><span class="line">&#123;&quot;error&quot;:&#123;&quot;message&quot;:&quot;You didn&#x27;t provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY). &quot;,&quot;type&quot;:&quot;invalid_request_error&quot;,&quot;param&quot;:null,&quot;code&quot;:null&#125;,&quot;request_id&quot;:&quot;327c1ff0-1ec2-9a60-b95b-9516ab2d2745&quot;&#125;</span><br></pre></td></tr></table></figure><p>显示没有找到对应的key</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>从中文文档中，很难发现问题出在了哪里<br><img src="/Zabbix%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%952--HttpRequest%EF%BC%8Cheader%E6%B7%BB%E5%8A%A0%E6%97%A0%E6%95%88/Zabbix_header_1.png" alt="图片"><br>但是直到我去查他的代码示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.addHeader(&#x27;Content-Type: application/json&#x27;);</span><br></pre></td></tr></table></figure><p>作为对比</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.addHeader(&#x27;Content-Type&#x27;,&#x27;application/json&#x27;);</span><br></pre></td></tr></table></figure><p>有没有发现哪里不太一样？根本就不是key-value的模式！<br>然后我就去转成了英文的文档，英文文档很明显的写了只需要输入value，所以根本就不是key-value的格式<br><img src="/Zabbix%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%952--HttpRequest%EF%BC%8Cheader%E6%B7%BB%E5%8A%A0%E6%97%A0%E6%95%88/Zabbix_header_2.png" alt="图片"></p><p>于是修改代码，请求成功！<br><img src="/Zabbix%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%952--HttpRequest%EF%BC%8Cheader%E6%B7%BB%E5%8A%A0%E6%97%A0%E6%95%88/Zabbix_header_3.png" alt="图片"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不说别的，少看中文文档，能帮自己减少很多坑！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在试图尝试通过Zabbix接入DeepSeek API的时候，由于使用了HTTP的方式，所以需要使用Zabbix 自带的HttpReques</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus发送报警1--如何发送报警到Teams</title>
    <link href="https://maydaychen.github.io/2025/02/15/Prometheus%E5%8F%91%E9%80%81%E6%8A%A5%E8%AD%A61--%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%8A%A5%E8%AD%A6%E5%88%B0Teams/"/>
    <id>https://maydaychen.github.io/2025/02/15/Prometheus%E5%8F%91%E9%80%81%E6%8A%A5%E8%AD%A61--%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%8A%A5%E8%AD%A6%E5%88%B0Teams/</id>
    <published>2025-02-15T06:20:49.000Z</published>
    <updated>2025-04-01T02:39:23.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MS-Teams中创建webhook"><a href="#MS-Teams中创建webhook" class="headerlink" title="MS Teams中创建webhook"></a>MS Teams中创建webhook</h1><p>参考地址：<br><a href="https://learn.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-incoming-webhook?tabs=newteams,dotnet">https://learn.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-incoming-webhook?tabs=newteams%2Cdotnet</a></p><h1 id="配置AlertManager"><a href="#配置AlertManager" class="headerlink" title="配置AlertManager"></a>配置AlertManager</h1><p>分为两个版本，旧版本和新版本</p><h2 id="老版本"><a href="#老版本" class="headerlink" title="老版本"></a>老版本</h2><p>老版本请参考这个工具<br><a href="https://github.com/prometheus-msteams/prometheus-msteams">https://github.com/prometheus-msteams/prometheus-msteams</a></p><h2 id="新版本"><a href="#新版本" class="headerlink" title="新版本"></a>新版本</h2><p>在新版本中，我们就可以直接使用teams配置来<br><a href="https://prometheus.io/docs/alerting/latest/configuration/#msteams_config">https://prometheus.io/docs/alerting/latest/configuration/#msteams_config</a></p><h3 id="配置receiver"><a href="#配置receiver" class="headerlink" title="配置receiver"></a>配置receiver</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">      - name: &#x27;teams&#x27;</span><br><span class="line">        msteams_configs:</span><br><span class="line">          - webhook_url: &#x27;&#123;&#123; webhook_url &#125;&#125;&#x27;</span><br><span class="line">            title: &#x27;&#123;&#123; template &quot;teams_alert_title&quot; . &#125;&#125;&#x27;</span><br><span class="line">            text: &#x27;&#123;&#123; template &quot;teams_alert_message&quot; . &#125;&#125;&#x27;</span><br><span class="line">templateFiles:</span><br><span class="line">teams_alert_title.tmpl: |-</span><br><span class="line">&#123;&#123; define &quot;teams_alert_title&quot; &#125;&#125;[&#123;&#123; .Status | toUpper &#125;&#125;] &#123;&#123; .CommonLabels.alertname &#125;&#125;&#123;&#123;- end &#125;&#125;</span><br><span class="line">teams_alert_message.tmpl: |-</span><br><span class="line">&#123;&#123; define &quot;teams_alert_message&quot; &#125;&#125;</span><br><span class="line">&#123;&#123; range .Alerts &#125;&#125;</span><br><span class="line">*Environment:* megatron-dev-eks-cluster</span><br><span class="line">*Namespace:* &#123;&#123; .Labels.namespace &#125;&#125;</span><br><span class="line">*Pod:* &#123;&#123; .Labels.pod &#125;&#125;</span><br><span class="line">*Summary:* &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class="line">*Description:* &#123;&#123; .Annotations.description &#125;&#125;</span><br><span class="line">*Runbook_Url:* &#123;&#123; .Annotations.runbook_url &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br></pre></td></tr></table></figure><p>webhook_url 为在Teams中创建的webhook<br>我们可以直接使用这个template，也可以加一些其他的内容</p><h3 id="配置route"><a href="#配置route" class="headerlink" title="配置route"></a>配置route</h3><pre><code>  routes:  - receiver: &#39;xxx&#39;    continue: true  - receiver: &#39;teams&#39;</code></pre><h3 id="测试是否可行"><a href="#测试是否可行" class="headerlink" title="测试是否可行"></a>测试是否可行</h3><p>经过上面的配置，在Teams中我们确实可以收到对应的alert，因此配置成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MS-Teams中创建webhook&quot;&gt;&lt;a href=&quot;#MS-Teams中创建webhook&quot; class=&quot;headerlink&quot; title=&quot;MS Teams中创建webhook&quot;&gt;&lt;/a&gt;MS Teams中创建webhook&lt;/h1&gt;&lt;p&gt;参考地址：&lt;</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Prometheus" scheme="https://maydaychen.github.io/tags/Prometheus/"/>
    
  </entry>
  
</feed>
