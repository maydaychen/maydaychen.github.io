<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexotest</title>
  
  <subtitle>hei</subtitle>
  <link href="https://maydaychen.github.io/atom.xml" rel="self"/>
  
  <link href="https://maydaychen.github.io/"/>
  <updated>2025-08-16T08:09:05.166Z</updated>
  <id>https://maydaychen.github.io/</id>
  
  <author>
    <name>Maydaychen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AI尝试笔记4--通过n8n发送信息</title>
    <link href="https://maydaychen.github.io/2025/08/16/AI%E5%B0%9D%E8%AF%95%E7%AC%94%E8%AE%B04-%E9%80%9A%E8%BF%87n8n%E5%8F%91%E9%80%81%E4%BF%A1%E6%81%AF/"/>
    <id>https://maydaychen.github.io/2025/08/16/AI%E5%B0%9D%E8%AF%95%E7%AC%94%E8%AE%B04-%E9%80%9A%E8%BF%87n8n%E5%8F%91%E9%80%81%E4%BF%A1%E6%81%AF/</id>
    <published>2025-08-16T06:48:30.000Z</published>
    <updated>2025-08-16T08:09:05.166Z</updated>
    
    <content type="html"><![CDATA[<p>从来没想过通过TG发送消息竟然这么简单,下面记录一下通过TG发送消息的详细步骤</p><h1 id="创建机器人"><a href="#创建机器人" class="headerlink" title="创建机器人"></a>创建机器人</h1><p>我们只需要找到一个叫做BotFather的账号，然后输入&#x2F;newbot<br>他会要求你输入以下内容</p><ul><li>机器人的名字</li><li>机器人的用户名（必须以_bot结尾）<img src="/2025/08/16/AI%E5%B0%9D%E8%AF%95%E7%AC%94%E8%AE%B04-%E9%80%9A%E8%BF%87n8n%E5%8F%91%E9%80%81%E4%BF%A1%E6%81%AF/1.png" class="" title="图片">之后如果创建成功，会给你返回一个token，请务必记住这个token，因为n8n中需要</li></ul><h1 id="n8n设置Credential"><a href="#n8n设置Credential" class="headerlink" title="n8n设置Credential"></a>n8n设置Credential</h1><p>在n8n中创建一个credential，选择telegram，然后会要求你输入一个Access Token<br>将刚才BotFather给你的token输入即可</p><img src="/2025/08/16/AI%E5%B0%9D%E8%AF%95%E7%AC%94%E8%AE%B04-%E9%80%9A%E8%BF%87n8n%E5%8F%91%E9%80%81%E4%BF%A1%E6%81%AF/2.png" class="" title="图片"><h1 id="发送消息到群聊"><a href="#发送消息到群聊" class="headerlink" title="发送消息到群聊"></a>发送消息到群聊</h1><p>如果想要让这个Bot自动发送消息，需要配置一个chatid<br>创建群聊的操作这里就不多说， 跟微信什么的都是一样的<br>在创建群聊之后，我们在浏览器端访问API<br><a href="https://api.telegram.org/bot[token]/getUpdates">https://api.telegram.org/bot[token]/getUpdates</a><br>将[token]换成刚才我们获取到的Token，API会返回一个JSON<br>其中”id”这个字段就是我们想要的，如果是群聊的话会以‘-’开头<br>切记在n8n中将这个‘-’也粘贴进去，不然会报找不到chatid</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从来没想过通过TG发送消息竟然这么简单,下面记录一下通过TG发送消息的详细步骤&lt;/p&gt;
&lt;h1 id=&quot;创建机器人&quot;&gt;&lt;a href=&quot;#创建机器人&quot; class=&quot;headerlink&quot; title=&quot;创建机器人&quot;&gt;&lt;/a&gt;创建机器人&lt;/h1&gt;&lt;p&gt;我们只需要找到一个叫做</summary>
      
    
    
    
    <category term="AI" scheme="https://maydaychen.github.io/categories/AI/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac优化记录4--修改系统路由表</title>
    <link href="https://maydaychen.github.io/2025/08/15/Mac%E4%BC%98%E5%8C%96%E8%AE%B0%E5%BD%954-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E8%B7%AF%E7%94%B1%E8%A1%A8/"/>
    <id>https://maydaychen.github.io/2025/08/15/Mac%E4%BC%98%E5%8C%96%E8%AE%B0%E5%BD%954-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E8%B7%AF%E7%94%B1%E8%A1%A8/</id>
    <published>2025-08-15T09:16:36.000Z</published>
    <updated>2025-08-15T09:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于项目需要使用VPN软件才能连接到特定的环境，但是连接VPN之后，内网的服务就连不上了，就导致了没法连接打印机或者是内网的服务器，故而产生了这个文章，研究了怎么在连接VPN的同时还能够连接到本地的服务器</p><h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><p>这里我才用的是修改路由表的方式，将需要连接的内网ip强制转成走本地路由</p><h2 id="查询当前路由表"><a href="#查询当前路由表" class="headerlink" title="查询当前路由表"></a>查询当前路由表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -rn</span><br></pre></td></tr></table></figure><p>可以看到这样的结果,我已经让GPT给我解析了一下</p><img src="/2025/08/15/Mac%E4%BC%98%E5%8C%96%E8%AE%B0%E5%BD%954-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E8%B7%AF%E7%94%B1%E8%A1%A8/1.png" class="" title="图片"><p>可以看到，现在默认所有的目标网段都走了VPN了，这就导致了无法连接内网</p><p>关键点<br>第一条 default（VPN）：<br>网关：10.11.11.6（VPN 服务器分配的虚拟网关）。<br>接口：utun23（VPN 虚拟接口）。<br>Flags：UGScg（U&#x3D;启用，G&#x3D;网关，S&#x3D;静态，c&#x3D;克隆，g&#x3D;网关缓存）。<br>优先级更高：因为 g（网关缓存）标志表示它是系统当前生效的默认路由。</p><p>第二条 default（本地）：<br>网关：10.0.95.254（本地路由器或光猫的 IP）。<br>接口：en0（物理网卡，如 Wi-Fi&#x2F;以太网）。<br>Flags：UGScIg（I&#x3D;间接路由，通常表示备用路由）。<br>优先级更低：I 标志表明它是备选路由，仅在主路由失效时使用。</p><h2 id="配置新路由规则"><a href="#配置新路由规则" class="headerlink" title="配置新路由规则"></a>配置新路由规则</h2><p>以10.0.199.111为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo route -n add 10.0.199.111/32 10.0.95.254</span><br></pre></td></tr></table></figure><p>&#x2F;32 表示精确匹配单个 IP。<br>10.0.95.254 需替换为你的实际本地网关（通过 netstat -rn | grep default 确认）。</p><h2 id="验证路由是否生效"><a href="#验证路由是否生效" class="headerlink" title="验证路由是否生效"></a>验证路由是否生效</h2><p>继续使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -rn</span><br></pre></td></tr></table></figure><p>可以看到如下一条</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.0.199.111/32    10.0.95.254        UGSc                  en0 </span><br></pre></td></tr></table></figure><p>表示验证通过</p><h2 id="重启后路由被覆盖"><a href="#重启后路由被覆盖" class="headerlink" title="重启后路由被覆盖"></a>重启后路由被覆盖</h2><p>当电脑重启之后，再次无法连接，原因在于路由表被重新覆盖<br>这时候只需要创建一个脚本，在重启之后运行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除可能冲突的路由</span></span><br><span class="line">sudo route -n delete 10.0.199.111/32 10.11.11.1 2&gt;/dev/null</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加本地路由</span></span><br><span class="line">sudo route -n add 10.0.199.111/32 10.0.95.254</span><br><span class="line">echo &quot;已强制 10.0.199.111 走本地网络&quot;</span><br></pre></td></tr></table></figure><p>将脚本保存为fix_route.sh并运行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x fix_route.sh</span><br><span class="line">./fix_route.sh</span><br></pre></td></tr></table></figure><h2 id="开机自动修改路由表"><a href="#开机自动修改路由表" class="headerlink" title="开机自动修改路由表"></a>开机自动修改路由表</h2><p>如果想开机自动修改的话，可以直接使用cron</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加一行</span></span><br><span class="line">@reboot /path/fix_route.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;由于项目需要使用VPN软件才能连接到特定的环境，但是连接VPN之后，内网的服务就连不上了，就导致了没法连接打印机或者是内网的服务器，故而产生</summary>
      
    
    
    
    <category term="Tools" scheme="https://maydaychen.github.io/categories/Tools/"/>
    
    
    <category term="MacOS" scheme="https://maydaychen.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>AWS使用日志2--Config使用相关</title>
    <link href="https://maydaychen.github.io/2025/08/14/AWS%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%972-Config%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/"/>
    <id>https://maydaychen.github.io/2025/08/14/AWS%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%972-Config%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/</id>
    <published>2025-08-14T09:50:46.000Z</published>
    <updated>2025-08-15T09:08:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Config"><a href="#什么是Config" class="headerlink" title="什么是Config"></a>什么是Config</h1><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p>为了更好地管理您的资源配置并检测资源的错误配置，您需随时详细了解存在哪些资源以及这些资源的配置方式。无论何时创建、修改或删除资源，您都可以使用 AWS Config 通知您，而不必通过轮询对每个资源的调用来监控这些更改。<br>您可以使用 AWS Config 规则来评估 AWS 资源的配置设置。当 AWS Config 检测到某个资源违反了您的某条规则中的条件时，会将该资源 AWS Config 标记为不合规并发送通知。 AWS Config 在创建、更改或删除您的资源时持续对其进行评估。</p><h2 id="审计与合规性"><a href="#审计与合规性" class="headerlink" title="审计与合规性"></a>审计与合规性</h2><p>您使用的数据可能需要频繁审计，以确保其符合内部策略与最佳实践。为了证实合规性，您需要了解资源的历史配置。此信息由提供 AWS Config。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>AWS 账户: 你需要一个活跃 AWS 账户的。有关更多信息，请参阅注册 AWS。</li><li>Amazon S3 存储桶：您需要一个 S3 存储桶来接收配置快照和历史记录的数据。有关更多信息，请参阅 Amazon S3 存储桶的权限。</li><li>Amazon SNS 主题：当您的配置快照和历史记录发生变化时，您需要 Amazon SNS 才能收到通知。有关更多信息，请参阅 Amazon SNS 主题的权限。</li><li>IAM 角色：您需要一个 IAM 角色，该角色有权访问 AWS Config。有关更多信息，请参阅 IAM 角色的权限。</li><li>资源类型：您可以决定 AWS Config 要记录哪些资源类型。有关更多信息，请参阅录制 AWS 资源。</li></ul><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="配置Config"><a href="#配置Config" class="headerlink" title="配置Config"></a>配置Config</h2><p>默认情况下，Config会记录当前账号的所有region下的所有资源，如果你觉得太多的话，可以进行修改，配置项在Settings这个tab中</p><p>可以看到，setting分为上下两部分</p><ul><li>data and delivery，是数据的保存时长以及存储的S3 bucket，以及事件发送到哪一个SNS</li><li>Recorder， 用来设置我们要设置哪些事件</li></ul><h3 id="Data-and-delivery"><a href="#Data-and-delivery" class="headerlink" title="Data and delivery"></a>Data and delivery</h3><p>这里面设置这么几项</p><ul><li>数据的保存时间，默认7年，也可以设置自定义,以天为单位</li><li>S3 bucket,即日志的保存位置，可以选择其他账号</li><li>SNS topic，即如果有事件生成，要发送到哪一个SNS，也可以选择其他账号</li></ul><h3 id="Recorder"><a href="#Recorder" class="headerlink" title="Recorder"></a>Recorder</h3><p>在这里可以配置需要记录哪些资源<br>可以选择全部资源，也可以选择指定资源<br>另外还需要选择资源记录的频率</p><ul><li>Daily，每天只记录一次</li><li>Continuous,持续记录，没有间隔<br>另外，默认所有资源的所有频率都是Continuous</li></ul><h2 id="查看Resource"><a href="#查看Resource" class="headerlink" title="查看Resource"></a>查看Resource</h2><p>点击左上方的Resources，就可以看到这个账号下所有的Resources啦，可以根据category跟type以及compliance进行检索<br>以S3 bucket资源为例</p><p>点击即可进入详情<br>在详情中就可以看到很多详细的信息,如创建时间等</p><p>如果下拉的话，还能看到这个资源的相关合规性检测，例如图中就可以看到很多的不合规</p><p>如果点击右上角的Resource Timeline，就能看到针对该资源的所有event，例如修改了配置之类的</p><h2 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h2><p>高级查询功能提供了单一查询终端节点和强大的查询语言以获得当前资源状态元数据，而无需执行特定于服务的描述 API 调用。<br>可以使用配置Aggregator跨多个账户和AWS区域从中央账户运行相同的查询</p><p>创建query其实也很简单，如果需要查询aggregator中的所有数据，就选择对应的aggregator即可<br>然后写入具体的查询语句，即可查询到相关信息</p><img src="/2025/08/14/AWS%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%972-Config%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/query-create.png" class="" title="图片"><h2 id="AWS-Config-与标签的关联"><a href="#AWS-Config-与标签的关联" class="headerlink" title="AWS Config 与标签的关联"></a>AWS Config 与标签的关联</h2><ul><li>标签作为规则条件: 您可以在 AWS Config 规则中使用标签作为条件，例如：</li><li>检查特定资源是否具有特定标签。</li><li>检查特定资源是否具有特定的标签值。</li><li>检查资源标签是否符合您的预定义策略。</li><li>标签用于修复操作: 在某些情况下，AWS Config 规则可以利用标签来执行修复操作。例如，如果一个资源没有必要的标签，AWS Config 规则可以自动添加标签到该资源。</li><li>标签用于资源过滤: 您可以使用标签来过滤您的资源，例如，在 AWS 控制台中查看所有带有特定标签的 EC2 实例，或者在 AWS Config 中查看所有带有特定标签的资源配置历史记录。</li><li>标签用于访问控制: 您可以利用标签来实现基于标签的访问控制，例如，只允许特定用户或组访问带有特定标签的资源。</li></ul><p>例子:</p><p>假设您希望确保所有 EC2 实例都具有 “Environment” 标签，并且其值为 “Production” 或<br>“Development”。您可以创建一个 AWS Config 规则，检查所有 EC2 实例是否具有 “Environment”<br>标签，并且其值为 “Production” 或<br>“Development”。如果某个实例没有标签或标签值不符合要求，该规则可以触发一个修复操作，自动添加或修改标签。</p><h1 id="Config-中的aggregator"><a href="#Config-中的aggregator" class="headerlink" title="Config 中的aggregator"></a>Config 中的aggregator</h1><p>如果我们是单一账号，那么这个功能可能没什么用，但是如果我们使用了control tower或者存在多个账号统一管理，我们就可以使用Aggregator这个功能，将所有的账号的config rule聚合过来集中查看，而不需要每个账号查看<br>但是需要注意，在eventbridge中无法触发aggregator中的complaint变化，只能触发当前账号的rule</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是Config&quot;&gt;&lt;a href=&quot;#什么是Config&quot; class=&quot;headerlink&quot; title=&quot;什么是Config&quot;&gt;&lt;/a&gt;什么是Config&lt;/h1&gt;&lt;h2 id=&quot;资源管理&quot;&gt;&lt;a href=&quot;#资源管理&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="AWS" scheme="https://maydaychen.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>AWS使用日志1--如何一个浏览器多账户同时登录</title>
    <link href="https://maydaychen.github.io/2025/08/14/AWS%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%971-%E5%A6%82%E4%BD%95%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%B4%A6%E6%88%B7%E5%90%8C%E6%97%B6%E7%99%BB%E5%BD%95/"/>
    <id>https://maydaychen.github.io/2025/08/14/AWS%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%971-%E5%A6%82%E4%BD%95%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%B4%A6%E6%88%B7%E5%90%8C%E6%97%B6%E7%99%BB%E5%BD%95/</id>
    <published>2025-08-14T07:08:57.000Z</published>
    <updated>2025-08-16T08:09:05.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于现在所有的账号都在同一个control tower下，导致了一个账号登录后，另一个账号的页面就全部过期了，非常影响效率<br>这时候我发现可以启用AWS的multi-session support，就可以同时登录多个账户或者角色<br>但是限制上限为5</p><p>参考文章：<br><a href="https://docs.aws.amazon.com/zh_cn/awsconsolehelpdocs/latest/gsg/multisession.html">https://docs.aws.amazon.com/zh_cn/awsconsolehelpdocs/latest/gsg/multisession.html</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><img src="/2025/08/14/AWS%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%971-%E5%A6%82%E4%BD%95%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%B4%A6%E6%88%B7%E5%90%8C%E6%97%B6%E7%99%BB%E5%BD%95/img.png" class="" title="img.png"><p>点击那个turn on multi-session support，待页面刷新后即可多账户切换</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;由于现在所有的账号都在同一个control tower下，导致了一个账号登录后，另一个账号的页面就全部过期了，非常影响效率&lt;br&gt;这时候我发</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="AWS" scheme="https://maydaychen.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix进阶12--如何使用ZabbixAPI</title>
    <link href="https://maydaychen.github.io/2025/08/13/Zabbix%E8%BF%9B%E9%98%B612--%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ZabbixAPI/"/>
    <id>https://maydaychen.github.io/2025/08/13/Zabbix%E8%BF%9B%E9%98%B612--%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ZabbixAPI/</id>
    <published>2025-08-13T03:32:42.000Z</published>
    <updated>2025-08-13T06:24:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>一旦您设置了前端，就可以使用远程 HTTP 请求来调用 API。为此，您需要发送 HTTP POST 请求到前端目录中的 api_jsonrpc.php 文件。例如，如果您的 Zabbix 前端安装在 <a href="https://example.com/zabbix">https://example.com/zabbix</a> 下，调用 apiinfo.version 方法的 HTTP 请求可能看起来像这样： :::</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST \</span><br><span class="line">--url &#x27;https://example.com/zabbix/api_jsonrpc.php&#x27; \</span><br><span class="line">--header &#x27;Content-Type: application/json-rpc&#x27; \</span><br><span class="line">--data &#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;apiinfo.version&quot;,&quot;params&quot;:&#123;&#125;,&quot;id&quot;:1&#125;&#x27;</span><br></pre></td></tr></table></figure><p>请求必须将 Content-Type 头部设置为以下值之一：application&#x2F;json-rpc、application&#x2F;json 或 application&#x2F;jsonrequest。</p><h1 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h1><p>有两种方式来获取token，一种是通过用户名密码登陆，另一种是直接创建一个api</p><h2 id="使用账号密码获取token"><a href="#使用账号密码获取token" class="headerlink" title="使用账号密码获取token"></a>使用账号密码获取token</h2><p>通过接口调用的方式来获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST \</span><br><span class="line">         --url &#x27;https://example.com/zabbix/api_jsonrpc.php&#x27; \</span><br><span class="line">         --header &#x27;Content-Type: application/json-rpc&#x27; \</span><br><span class="line">         --data &#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;user.login&quot;,&quot;params&quot;:&#123;&quot;username&quot;:&quot;Admin&quot;,&quot;password&quot;:&quot;zabbix&quot;&#125;,&quot;id&quot;:1&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一旦您设置了前端，就可以使用远程 HTTP 请求来调用 API。为此，您需要发送 HTTP POST 请求到前端目录中的 api_jsonrpc.php 文件。例如，如果您的 Zabbix 前端安装在 &lt;a href=&quot;https://example.com/zabbix&quot;</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>瞎折腾1--Glance安装及优雅地使用面板</title>
    <link href="https://maydaychen.github.io/2025/08/09/%E7%9E%8E%E6%8A%98%E8%85%BE1-Glance%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8%E9%9D%A2%E6%9D%BF/"/>
    <id>https://maydaychen.github.io/2025/08/09/%E7%9E%8E%E6%8A%98%E8%85%BE1-Glance%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8%E9%9D%A2%E6%9D%BF/</id>
    <published>2025-08-09T06:42:59.000Z</published>
    <updated>2025-08-09T06:52:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="功能记录"><a href="#功能记录" class="headerlink" title="功能记录"></a>功能记录</h1><h2 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h2><p>首先需要创建一个secret key，如果是docker创建的，那就运行这个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm glanceapp/glance secret:make</span><br></pre></td></tr></table></figure><p>会生成一个key，需要填写在配置文件中<br>然后就配置我们的账号密码,可以直接配置在glance.yml的第一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auth:</span><br><span class="line">  secret-key: &#123;刚才生成的secret key&#125;# this must be set to a random value generated using the secret:make CLI command</span><br><span class="line">  users:</span><br><span class="line">    admin:</span><br><span class="line">      password: 123456</span><br><span class="line">    svilen:</span><br><span class="line">      password: 123456</span><br></pre></td></tr></table></figure><p>之后在登录的时候，就会要求输入用户名密码<br><img src="/%E7%9E%8E%E6%8A%98%E8%85%BE1--Glance%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8%E9%9D%A2%E6%9D%BF/auth.png" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;功能记录&quot;&gt;&lt;a href=&quot;#功能记录&quot; class=&quot;headerlink&quot; title=&quot;功能记录&quot;&gt;&lt;/a&gt;功能记录&lt;/h1&gt;&lt;h2 id=&quot;登录验证&quot;&gt;&lt;a href=&quot;#登录验证&quot; class=&quot;headerlink&quot; title=&quot;登录验证&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Tools" scheme="https://maydaychen.github.io/categories/Tools/"/>
    
    
    <category term="NAS" scheme="https://maydaychen.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>Linux操作记录9--MariaDB升级笔记</title>
    <link href="https://maydaychen.github.io/2025/07/26/Linux%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%959--MariaDB%E5%8D%87%E7%BA%A7%E7%AC%94%E8%AE%B0/"/>
    <id>https://maydaychen.github.io/2025/07/26/Linux%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%959--MariaDB%E5%8D%87%E7%BA%A7%E7%AC%94%E8%AE%B0/</id>
    <published>2025-07-26T09:30:09.000Z</published>
    <updated>2025-07-26T09:33:44.715Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章告诉你怎么从Amazon Linux2023自带的仓库里的老旧10.5升级到新的官方库的10.11</p><h1 id="从10-5到10-11"><a href="#从10-5到10-11" class="headerlink" title="从10.5到10.11"></a>从10.5到10.11</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h3 id="备份数据库数据"><a href="#备份数据库数据" class="headerlink" title="备份数据库数据"></a>备份数据库数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p --all-databases &gt; all_databases.sql</span><br></pre></td></tr></table></figure><h3 id="备份数据库配置文件"><a href="#备份数据库配置文件" class="headerlink" title="备份数据库配置文件"></a>备份数据库配置文件</h3><p>如 &#x2F;etc&#x2F;my.cnf、&#x2F;etc&#x2F;my.cnf.d&#x2F;</p><h3 id="备份数据目录"><a href="#备份数据目录" class="headerlink" title="备份数据目录"></a>备份数据目录</h3><p>如cd &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;</p><h2 id="更换MariaDB仓库"><a href="#更换MariaDB仓库" class="headerlink" title="更换MariaDB仓库"></a>更换MariaDB仓库</h2><p>创建&#x2F;etc&#x2F;yum.repos.d&#x2F;MariaDB.repo， 内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># MariaDB 10.11 RedHatEnterpriseLinux repository list - created 2025-06-30 09:25 UTC</span><br><span class="line"># https://mariadb.org/download/</span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line"># rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.</span><br><span class="line"># baseurl = https://rpm.mariadb.org/10.11/rhel/$releasever/$basearch</span><br><span class="line">baseurl = https://mirrors.neusoft.edu.cn/mariadb/yum/10.11/rhel/$releasever/$basearch</span><br><span class="line"># gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgkey = https://mirrors.neusoft.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck = 1</span><br></pre></td></tr></table></figure><h2 id="停止相关应用"><a href="#停止相关应用" class="headerlink" title="停止相关应用"></a>停止相关应用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop zabbix-server</span><br><span class="line">systemctl stop mysql</span><br></pre></td></tr></table></figure><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf clean all</span><br><span class="line">sudo dnf makecache</span><br><span class="line">sudo dnf upgrade</span><br></pre></td></tr></table></figure><h2 id="运行升级脚本"><a href="#运行升级脚本" class="headerlink" title="运行升级脚本"></a>运行升级脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysql</span><br><span class="line">sudo mysql_upgrade</span><br></pre></td></tr></table></figure><h3 id="这个命令是什么"><a href="#这个命令是什么" class="headerlink" title="这个命令是什么"></a>这个命令是什么</h3><p>sudo mysql_upgrade 命令用于升级 MySQL 或 MariaDB 数据库的系统表和数据结构，以确保它们与新安装的数据库服务器版本兼容。</p><p>主要作用<br>检查并修复系统表（如 mysql 库中的权限表）<br>升级系统表结构到新版本要求<br>检查和修复所有数据库表的兼容性<br>什么时候需要用？<br>数据库主版本升级后（如 10.5 → 10.11）<br>重大小版本升级后</p><p>总结：<br>mysql_upgrade 是数据库升级后必做的一步，确保数据和权限表与新版本兼容、正常运行</p><h1 id="10-11升级11-4"><a href="#10-11升级11-4" class="headerlink" title="10.11升级11.4"></a>10.11升级11.4</h1><p><a href="https://mariadb.com/docs/server/server-management/install-and-upgrade-mariadb/upgrading/upgrading-from-to-specific-versions/upgrading-from-mariadb-10-11-to-mariadb-11-4">https://mariadb.com/docs/server/server-management/install-and-upgrade-mariadb/upgrading/upgrading-from-to-specific-versions/upgrading-from-mariadb-10-11-to-mariadb-11-4</a></p><h2 id="备份-1"><a href="#备份-1" class="headerlink" title="备份"></a>备份</h2><h3 id="备份数据库数据-1"><a href="#备份数据库数据-1" class="headerlink" title="备份数据库数据"></a>备份数据库数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p --all-databases &gt; all_databases.sql</span><br></pre></td></tr></table></figure><h3 id="备份数据库配置文件-1"><a href="#备份数据库配置文件-1" class="headerlink" title="备份数据库配置文件"></a>备份数据库配置文件</h3><p>如 &#x2F;etc&#x2F;my.cnf、&#x2F;etc&#x2F;my.cnf.d&#x2F;</p><h3 id="备份数据目录-1"><a href="#备份数据目录-1" class="headerlink" title="备份数据目录"></a>备份数据目录</h3><p>如cd &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;</p><h2 id="更换MariaDB仓库-1"><a href="#更换MariaDB仓库-1" class="headerlink" title="更换MariaDB仓库"></a>更换MariaDB仓库</h2><p>创建&#x2F;etc&#x2F;yum.repos.d&#x2F;MariaDB.repo， 内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># MariaDB 11.4 RedHatEnterpriseLinux repository list - created 2025-07-01 06:13 UTC</span><br><span class="line"># https://mariadb.org/download/</span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line"># rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.</span><br><span class="line">baseurl = https://rpm.mariadb.org/11.4/rhel/$releasever/$basearch</span><br><span class="line"># baseurl = https://mirrors.neusoft.edu.cn/mariadb/yum/11.4/rhel/$releasever/$basearch</span><br><span class="line">gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line"># gpgkey = https://mirrors.neusoft.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck = 1</span><br></pre></td></tr></table></figure><h2 id="停止相关应用-1"><a href="#停止相关应用-1" class="headerlink" title="停止相关应用"></a>停止相关应用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop zabbix-server</span><br><span class="line">systemctl stop mysql</span><br></pre></td></tr></table></figure><h2 id="升级-1"><a href="#升级-1" class="headerlink" title="升级"></a>升级</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf clean all</span><br><span class="line">sudo dnf makecache</span><br><span class="line">sudo dnf upgrade</span><br></pre></td></tr></table></figure><h2 id="运行升级脚本-1"><a href="#运行升级脚本-1" class="headerlink" title="运行升级脚本"></a>运行升级脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysql</span><br><span class="line">sudo mariadb-upgrade</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>暂时非常顺利</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章告诉你怎么从Amazon Linux2023自带的仓库里的老旧10.5升级到新的官方库的10.11&lt;/p&gt;
&lt;h1 id=&quot;从10-5到10-11&quot;&gt;&lt;a href=&quot;#从10-5到10-11&quot; class=&quot;headerlink&quot; title=&quot;从10.5到10.</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://maydaychen.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>NAS杂记5--群晖NAS安装GitLab及问题记录</title>
    <link href="https://maydaychen.github.io/2025/07/26/NAS%E6%9D%82%E8%AE%B05--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85GitLab%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://maydaychen.github.io/2025/07/26/NAS%E6%9D%82%E8%AE%B05--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85GitLab%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2025-07-26T09:23:28.000Z</published>
    <updated>2025-07-26T09:49:17.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>需要在群晖NAS上搭建GitLab，以便上传自己的代码，同时可以通过外网访问，而不是局限于本地网络</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>正好群晖的镜像仓库里就有这个gitlab，所以直接下载就好啦</p><img src="/2025/07/26/NAS%E6%9D%82%E8%AE%B05--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85GitLab%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/1.png" class="" title="图片"><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><table><thead><tr><th>配置项</th><th>值</th></tr></thead><tbody><tr><td><code>external_url</code></td><td><code>https://&#123;domain&#125;:&#123;port&#125;</code></td></tr><tr><td><code>gitlab_rails[&#39;gitlab_shell_ssh_port&#39;]</code></td><td><code>18778</code></td></tr><tr><td><code>nginx[&#39;redirect_http_to_https&#39;]</code></td><td><code>true</code></td></tr><tr><td><code>nginx[&#39;redirect_http_to_https_port&#39;]</code></td><td><code>80</code></td></tr><tr><td><code>nginx[&#39;ssl_certificate&#39;]</code></td><td><code>/etc/gitlab/ssl/&#123;domain&#125;.crt</code></td></tr><tr><td><code>nginx[&#39;ssl_certificate_key&#39;]</code></td><td><code>/etc/gitlab/ssl/&#123;domain&#125;.key</code></td></tr><tr><td><code>nginx[&#39;listen_port&#39;]</code></td><td><code>443</code></td></tr></tbody></table><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>由于GitLab项目较为庞大，因此可能需要等很久，建议耐心等待</p><h2 id="配置端口转发"><a href="#配置端口转发" class="headerlink" title="配置端口转发"></a>配置端口转发</h2><p>如果你跟我一样需要用Nginx做端口转发，那建议你看一下我下面的一个问题，说不定你也会遇到哦</p><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="密码在哪"><a href="#密码在哪" class="headerlink" title="密码在哪"></a>密码在哪</h2><p>初始用户名为root，密码在&#x2F;etc&#x2F;gitlab&#x2F;initial_root_password文件下面，在文件管理里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Password: xxxxx</span><br></pre></td></tr></table></figure><p>切记密码只有24小时有效，使用后需要重新修改密码</p><h2 id="GitLab死活跳不到-port格式"><a href="#GitLab死活跳不到-port格式" class="headerlink" title="GitLab死活跳不到:port格式"></a>GitLab死活跳不到:port格式</h2><p>需要修改前置Nginx服务器的一个配置，把port信息差UN过去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Host $host:$server_port;</span><br></pre></td></tr></table></figure><h2 id="无法生成Access-Token"><a href="#无法生成Access-Token" class="headerlink" title="无法生成Access Token"></a>无法生成Access Token</h2><p>需要启用HTTPS，单纯的HTTTP会显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">An error occurred while fetching the tokens.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;需要在群晖NAS上搭建GitLab，以便上传自己的代码，同时可以通过外网访问，而不是局限于本地网络&lt;/p&gt;
&lt;h1 id=&quot;实践&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="Tools" scheme="https://maydaychen.github.io/categories/Tools/"/>
    
    
    <category term="NAS" scheme="https://maydaychen.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>NAS杂记4--群晖NAS安装N8N及问题记录</title>
    <link href="https://maydaychen.github.io/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://maydaychen.github.io/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2025-07-25T14:34:17.000Z</published>
    <updated>2025-07-26T09:33:20.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>群晖NAS（已安装Docker套件）</li><li>网络环境：本地局域网</li><li>存储空间：至少1GB可用空间</li></ul><h1 id="搭建N8N"><a href="#搭建N8N" class="headerlink" title="搭建N8N"></a>搭建N8N</h1><h2 id="创建持久化文件夹"><a href="#创建持久化文件夹" class="headerlink" title="创建持久化文件夹"></a>创建持久化文件夹</h2><p>首先，在群晖的File Station中，前往docker文件夹，创建一个名为n8n的文件夹，并在其下新建一个名为n8n_data的子文件夹</p><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/1.png" class="" title="图片"><h3 id="设置读取权限"><a href="#设置读取权限" class="headerlink" title="设置读取权限"></a>设置读取权限</h3><p>需要设置everyone可以写入</p><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/2.png" class="" title="图片"><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>直接在container manager中搜索n8n，直接下载即可</p><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/3.png" class="" title="图片"><h2 id="设置端口映射"><a href="#设置端口映射" class="headerlink" title="设置端口映射"></a>设置端口映射</h2><p>这里左边需要设置映射到你自己想要用的端口，右边是n8n自身用的端口<br>建议都设成一个值，方便以后设置webhook访问</p><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/4.png" class="" title="图片"><h2 id="挂载持久化文件夹"><a href="#挂载持久化文件夹" class="headerlink" title="挂载持久化文件夹"></a>挂载持久化文件夹</h2><p>将我们刚才设置的n8n_data文件夹映射到&#x2F;home&#x2F;node&#x2F;.n8n路径</p><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/5.png" class="" title="图片"><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><table><thead><tr><th>变量名</th><th>值</th></tr></thead><tbody><tr><td>GENERIC_TIMEZONE</td><td>Asia&#x2F;Shanghai</td></tr><tr><td>N8N_HOST</td><td>domain</td></tr><tr><td>N8N_SECURE_COOKIE</td><td>false</td></tr><tr><td>N8N_PROTOCOL</td><td>https</td></tr><tr><td>N8N_PORT</td><td>15678</td></tr></tbody></table><img src="/2025/07/25/NAS%E6%9D%82%E8%AE%B04--%E7%BE%A4%E6%99%96NAS%E5%AE%89%E8%A3%85N8N%E5%8F%8A%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/6.png" class="" title="图片"><h2 id="直接启动即可"><a href="#直接启动即可" class="headerlink" title="直接启动即可"></a>直接启动即可</h2><p>然后访问NAS的IP加上对应的端口，即可访问n8n主页</p><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="Error-Command-“start”-not-found"><a href="#Error-Command-“start”-not-found" class="headerlink" title="Error: Command “start” not found"></a>Error: Command “start” not found</h2><p>就是docker持久化的那个文件没有权限，参考<a href="https://www.aigc1.com/doc/1647">这个网站</a><br>需要设置everyone都可以写入，然后就不会启动失败了</p><h2 id="Lost-connection-to-the-server"><a href="#Lost-connection-to-the-server" class="headerlink" title="Lost connection to the server"></a>Lost connection to the server</h2><p>参考： <a href="https://community.n8n.io/t/connection-lost-using-nginx-reverse-proxy-n8n-1-16/32962">https://community.n8n.io/t/connection-lost-using-nginx-reverse-proxy-n8n-1-16/32962</a><br> 要修改一下Nginx配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Connection &#x27;Upgrade&#x27;;</span><br><span class="line">proxy_set_header Upgrade $http_upgrade;</span><br></pre></td></tr></table></figure><h3 id="释义："><a href="#释义：" class="headerlink" title="释义："></a>释义：</h3><p>proxy_set_header Connection ‘Upgrade’;告诉上游服务器：“我这个请求希望升级连接（比如从 HTTP 升级为 WebSocket）”。<br>proxy_set_header Upgrade $http_upgrade;将客户端请求中的 Upgrade 头（如 websocket）转发给后端服务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;群晖NAS（已安装Docker套件）&lt;/li&gt;
&lt;li&gt;网络环境：本地局域网&lt;/li&gt;
&lt;li&gt;存储空间：至少1</summary>
      
    
    
    
    <category term="Tools" scheme="https://maydaychen.github.io/categories/Tools/"/>
    
    
    <category term="NAS" scheme="https://maydaychen.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix进阶11--在ARM下安装Zabbix server</title>
    <link href="https://maydaychen.github.io/2025/06/27/Zabbix%E8%BF%9B%E9%98%B611--%E5%9C%A8ARM%E4%B8%8B%E5%AE%89%E8%A3%85Zabbix-server/"/>
    <id>https://maydaychen.github.io/2025/06/27/Zabbix%E8%BF%9B%E9%98%B611--%E5%9C%A8ARM%E4%B8%8B%E5%AE%89%E8%A3%85Zabbix-server/</id>
    <published>2025-06-27T05:58:48.000Z</published>
    <updated>2025-07-26T09:56:08.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><h2 id="安装yum-utils"><a href="#安装yum-utils" class="headerlink" title="安装yum-utils"></a>安装yum-utils</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install yum-utils</span><br></pre></td></tr></table></figure><h2 id="创建nginx官方镜像源"><a href="#创建nginx官方镜像源" class="headerlink" title="创建nginx官方镜像源"></a>创建nginx官方镜像源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/etc/yum.repos.d/nginx.repo</span><br><span class="line"></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br></pre></td></tr></table></figure><h2 id="安装nginx-1"><a href="#安装nginx-1" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><hr><h1 id="安装PostgreSQL-TimescaleDB"><a href="#安装PostgreSQL-TimescaleDB" class="headerlink" title="安装PostgreSQL+TimescaleDB"></a>安装PostgreSQL+TimescaleDB</h1><h2 id="PostgreSQL安装"><a href="#PostgreSQL安装" class="headerlink" title="PostgreSQL安装"></a>PostgreSQL安装</h2><p>Install the repository RPM:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br></pre></td></tr></table></figure><p>Disable the built-in PostgreSQL module:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf -qy module disable postgresql</span><br></pre></td></tr></table></figure><p>Install PostgreSQL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install -y postgresql17-server</span><br></pre></td></tr></table></figure><p>Optionally initialize the database and enable automatic start:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/pgsql-17/bin/postgresql-17-setup initdb</span><br><span class="line">sudo systemctl enable postgresql-17</span><br><span class="line">sudo systemctl start postgresql-17</span><br><span class="line">sudo systemctl status postgresql-17</span><br></pre></td></tr></table></figure><h2 id="TimescaleDB安装："><a href="#TimescaleDB安装：" class="headerlink" title="TimescaleDB安装："></a>TimescaleDB安装：</h2><p>添加 TimescaleDB 存储库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/yum.repos.d/timescale_timescaledb.repo &lt;&lt;EOL</span><br><span class="line">[timescale_timescaledb]</span><br><span class="line">name=timescale_timescaledb</span><br><span class="line">baseurl=https://packagecloud.io/timescale/timescaledb/el/$(rpm -E %&#123;rhel&#125;)/\$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packagecloud.io/timescale/timescaledb/gpgkey</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line">EOL</span><br></pre></td></tr></table></figure><p>更新本地仓库列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>安装 TimescaleDB</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install timescaledb-2-postgresql-17</span><br></pre></td></tr></table></figure><p>为 TimescaleDB 优化 PostgreSQL 实例</p><p>这个命令执行后全部输入Yes会将配置修改为推荐的设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo timescaledb-tune --pg-config=/usr/pgsql-17/bin/pg_config</span><br></pre></td></tr></table></figure><p>重启Postgresql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart postgresql-17</span><br><span class="line">sudo systemctl status postgresql-17</span><br></pre></td></tr></table></figure><p>以 postgres 身份登录 PostgreSQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql</span><br></pre></td></tr></table></figure><p>设置 postgres 的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\password postgres</span><br></pre></td></tr></table></figure><p>设置密码后，键入 \q 退出</p><p>强制使用密码登录</p><p>配置认证方法：</p><p>在 pg_hba.conf 文件中配置认证方法。</p><p>这个文件通常位于 PostgreSQL 数据目录中</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/pgsql/17/data/pg_hba.conf</span><br></pre></td></tr></table></figure><p>你需要为相应的用户和数据库配置使用密码认证的方法。</p><p>例如，要允许所有用户使用密码认证登录，可以添加或修改以下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host    all             all             0.0.0.0/0               md5</span><br></pre></td></tr></table></figure><p>这里 md5 表示使用 MD5 加密的密码进行认证。你也可以使用 scram-sha-256，这是 PostgreSQL 17 推荐的认证方法 。</p><p>重启 PostgreSQL 服务：</p><p>修改 pg_hba.conf 文件后，需要重启 PostgreSQL 服务以使更改生效。</p><p>在大多数系统上，你可以使用以下命令来重启服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart postgresql-17</span><br></pre></td></tr></table></figure><p>或者根据你的系统环境使用相应的命令。</p><p>测试连接：使用新设置的密码测试连接，以确保配置正确。</p><p>可以使用 psql 命令行工具连接到数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql</span><br><span class="line">psql -U postgres -h localhost -d postgres</span><br></pre></td></tr></table></figure><p>系统会提示你输入密码，这时应该输入你为 postgres 用户设置的密码。</p><p>请注意，出于安全考虑，不建议在生产环境中使用 trust 方法，因为它允许任何用户无需密码即可连接到数据库。始终使用密码认证，并确保密码足够复杂，以防止未经授权的访问 。</p><p>创建初始数据库</p><p>在数据库主机上运行以下代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres createuser --pwprompt zabbix</span><br><span class="line">sudo -u postgres createdb -O zabbix zabbix_db</span><br></pre></td></tr></table></figure><p>切换到zabbix_db</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\c zabbix_db</span><br></pre></td></tr></table></figure><p>将 TimescaleDB 添加到数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE EXTENSION IF NOT EXISTS timescaledb;</span><br></pre></td></tr></table></figure><p>检查是否已安装 TimescaleDB</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\dx</span><br></pre></td></tr></table></figure><p>您将看到已安装扩展的列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List of installed extensions</span><br><span class="line">Name     | Version |   Schema   |                                      Description                                      </span><br><span class="line">-------------+---------+------------+---------------------------------------------------------------------------------------</span><br><span class="line">plpgsql     | 1.0     | pg_catalog | PL/pgSQL procedural language</span><br><span class="line">timescaledb | 2.17.2  | public     | Enables scalable inserts and complex queries for time-series data (Community Edition)</span><br></pre></td></tr></table></figure><p>查看分区情况</p><p>查看分区表的概览信息，可以查询<code>timescaledb_information.hypertables</code>视图。这将显示所有已创建的超表（即被转换为支持时间序列数据存储的表）的元数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM timescaledb_information.hypertables;</span><br></pre></td></tr></table></figure><p>postgresql启用socket连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/pgsql/17/data/postgresql.conf</span><br><span class="line"></span><br><span class="line">取消注释以下选项并重启：</span><br><span class="line">unix_socket_directories = &#x27;/run/postgresql&#x27; # comma-separated list of directories</span><br></pre></td></tr></table></figure><hr><h1 id="安装zabbix"><a href="#安装zabbix" class="headerlink" title="安装zabbix"></a>安装zabbix</h1><h2 id="安装Zabbix源"><a href="#安装Zabbix源" class="headerlink" title="安装Zabbix源"></a>安装Zabbix源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/8/x86_64/zabbix-release-latest-7.0.el8.noarch.rpm</span><br><span class="line">dnf clean all</span><br></pre></td></tr></table></figure><p>切换PHP的DNF模块版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf module switch-to php:8.2</span><br></pre></td></tr></table></figure><p>安装Zabbix server, frontend, agent2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install zabbix-server-pgsql zabbix-web-pgsql zabbix-nginx-conf zabbix-sql-scripts zabbix-selinux-policy zabbix-agent2</span><br></pre></td></tr></table></figure><p>安装Zabbix agent 2插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dnf install zabbix-agent2-plugin-mongodb zabbix-agent2-plugin-mssql zabbix-agent2-plugin-postgresql</span><br><span class="line"></span><br><span class="line">yum install zabbix-agent2-plugin-*</span><br></pre></td></tr></table></figure><p>导入初始架构和数据，系统将提示您输入新创建的密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz | sudo -u zabbix psql zabbix_db</span><br></pre></td></tr></table></figure><p>源码安装zabbix导入初始架构和数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd database/postgresql</span><br><span class="line">cat schema.sql | sudo -u zabbix psql zabbix_db</span><br><span class="line"># 如果您正在为 Zabbix 代理创建数据库，请在此处停止</span><br><span class="line">cat images.sql | sudo -u zabbix psql zabbix_db</span><br><span class="line">cat data.sql | sudo -u zabbix psql zabbix_db</span><br></pre></td></tr></table></figure><p>对于新安装，运行 postgresql&#x2F;timescaledb&#x2F;schema.sql 脚本。 该脚本必须在使用初始模式&#x2F;数据创建常规 PostgreSQL 数据库之后运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/share/zabbix-sql-scripts/postgresql/timescaledb/schema.sql | sudo -u zabbix psql zabbix_db</span><br></pre></td></tr></table></figure><h2 id="为Zabbix-server配置数据库"><a href="#为Zabbix-server配置数据库" class="headerlink" title="为Zabbix server配置数据库"></a>为Zabbix server配置数据库</h2><p>编辑配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/zabbix/zabbix_server.conf</span><br><span class="line"></span><br><span class="line">DBPassword=password</span><br></pre></td></tr></table></figure><p>启动Zabbix server和agent进程</p><p>启动Zabbix server和agent进程，并为它们设置开机自启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent2 nginx php-fpm</span><br><span class="line">systemctl enable zabbix-server zabbix-agent2 nginx php-fpm</span><br><span class="line">systemctl status zabbix-server zabbix-agent2 nginx php-fpm</span><br></pre></td></tr></table></figure><hr><p>报错解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">报错信息</span><br><span class="line">/usr/sbin/zabbix_server: /lib64/libpq.so.5: no version information available (required by /usr/sbin/zabbix_server)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装nginx&quot;&gt;&lt;a href=&quot;#安装nginx&quot; class=&quot;headerlink&quot; title=&quot;安装nginx&quot;&gt;&lt;/a&gt;安装nginx&lt;/h1&gt;&lt;h2 id=&quot;安装yum-utils&quot;&gt;&lt;a href=&quot;#安装yum-utils&quot; class=&quot;he</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Linux操作记录8--为AmazonLinux2做OSPatch</title>
    <link href="https://maydaychen.github.io/2025/06/21/Linux%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%958--%E4%B8%BAAmazonLinux2%E5%81%9AOSPatch/"/>
    <id>https://maydaychen.github.io/2025/06/21/Linux%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%958--%E4%B8%BAAmazonLinux2%E5%81%9AOSPatch/</id>
    <published>2025-06-21T06:08:48.000Z</published>
    <updated>2025-07-01T05:49:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>在每次漏洞扫描之后，每一个运维人都会怀着激动而又紧张的心情来看这一份报告，毕竟这决定了他们的工作量<br>那么，我们会怎么给每一台服务器打补丁呢？这边记录一下工作中用到的两种方法</p><h1 id="手动Patch"><a href="#手动Patch" class="headerlink" title="手动Patch"></a>手动Patch</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 除了Amazon Linux2023</span><br><span class="line">sudo yum update</span><br><span class="line"># Amazon Linux2023</span><br><span class="line">dnf upgrade --releasever=2023.7.20250623</span><br><span class="line"></span><br><span class="line"># 2. reboot</span><br><span class="line"></span><br><span class="line"># 3. execute the 3 command below</span><br><span class="line">uname -r</span><br><span class="line">rpm -q kernel</span><br><span class="line">sudo package-cleanup --oldkernels --count=1 -y</span><br><span class="line">## For Amazon Linux2023</span><br><span class="line">sudo dnf remove --oldinstallonly --setopt installonly_limit=2 kernel -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 4. check the running status of each service(fail2ban/xxx)</span><br><span class="line"># 5. test to login to other servers</span><br></pre></td></tr></table></figure><h1 id="AWS-自动Patch"><a href="#AWS-自动Patch" class="headerlink" title="AWS 自动Patch"></a>AWS 自动Patch</h1><p><a href="https://ap-southeast-1.console.aws.amazon.com/systems-manager/home?region=ap-southeast-1#welcome">https://ap-southeast-1.console.aws.amazon.com/systems-manager/home?region=ap-southeast-1#welcome</a><br>参考这个网址上的内容，使用AWS Patch manager</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在每次漏洞扫描之后，每一个运维人都会怀着激动而又紧张的心情来看这一份报告，毕竟这决定了他们的工作量&lt;br&gt;那么，我们会怎么给每一台服务器打补丁呢？这边记录一下工作中用到的两种方法&lt;/p&gt;
&lt;h1 id=&quot;手动Patch&quot;&gt;&lt;a href=&quot;#手动Patch&quot; class=&quot;</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://maydaychen.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix进阶10--设置MFA登录</title>
    <link href="https://maydaychen.github.io/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/"/>
    <id>https://maydaychen.github.io/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/</id>
    <published>2025-06-20T02:42:54.000Z</published>
    <updated>2025-07-26T09:51:10.189Z</updated>
    
    <content type="html"><![CDATA[<p>当我们需要将Zabbix或者Grafana暴露在公网之时，为账号设置MFA就变得非常重要了，毕竟相比于密码，MFA可以说是更加安全一些<br>上一篇我们说了怎么为Grafana设置MFA，这一篇我们来说一下如何为Zabbix设置MFA<br>从Zabbix 6.0开始，MFA的功能就成了built-in功能，我们也不需要接入任何的第三方，直接使用即可</p><h1 id="添加MFA选项"><a href="#添加MFA选项" class="headerlink" title="添加MFA选项"></a>添加MFA选项</h1><img src="/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/MFA1.png" class="" title="图片"><p>进入User-&gt; Authentication,勾选“Enable multi-factor authentication”,并且添加一个Method如下</p><img src="/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/MFA2.png" class="" title="图片"><h1 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h1><p>我们需要在Zabbix中创建一个用户组，并且做如下操作：</p><ul><li>把需要设置MFA的用户都添加到该组中</li><li>Multi-factor authentication选择刚才我们创建的method<img src="/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/MFA3.png" class="" title="图片">保存过后，用户的下一次登录需要启用MFA，并且在每次登录时必须输入MFA</li></ul><h1 id="登录设置MFA"><a href="#登录设置MFA" class="headerlink" title="登录设置MFA"></a>登录设置MFA</h1><img src="/2025/06/20/Zabbix%E8%BF%9B%E9%98%B610--%E8%AE%BE%E7%BD%AEMFA%E7%99%BB%E5%BD%95/MFA4.png" class="" title="图片">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当我们需要将Zabbix或者Grafana暴露在公网之时，为账号设置MFA就变得非常重要了，毕竟相比于密码，MFA可以说是更加安全一些&lt;br&gt;上一篇我们说了怎么为Grafana设置MFA，这一篇我们来说一下如何为Zabbix设置MFA&lt;br&gt;从Zabbix 6.0开始，MF</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Grafana使用日志10--接入keycloak验证</title>
    <link href="https://maydaychen.github.io/2025/06/19/Grafana%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%9710--%E6%8E%A5%E5%85%A5keycloak%E9%AA%8C%E8%AF%81/"/>
    <id>https://maydaychen.github.io/2025/06/19/Grafana%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%9710--%E6%8E%A5%E5%85%A5keycloak%E9%AA%8C%E8%AF%81/</id>
    <published>2025-06-19T02:40:34.000Z</published>
    <updated>2025-06-20T02:42:45.726Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，在Grafana中自带的账号体系是没有办法支持MFA的，只能通过第三方来支持MFA，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;众所周知，在Grafana中自带的账号体系是没有办法支持MFA的，只能通过第三方来支持MFA，&lt;/p&gt;
</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Grafana" scheme="https://maydaychen.github.io/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix踩坑记录5--监控Windows文件导致IO过高的经验记录</title>
    <link href="https://maydaychen.github.io/2025/04/14/Zabbix%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%955--%E7%9B%91%E6%8E%A7Windows%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4IO%E8%BF%87%E9%AB%98%E7%9A%84%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/"/>
    <id>https://maydaychen.github.io/2025/04/14/Zabbix%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%955--%E7%9B%91%E6%8E%A7Windows%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4IO%E8%BF%87%E9%AB%98%E7%9A%84%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/</id>
    <published>2025-04-14T09:06:41.000Z</published>
    <updated>2025-07-26T10:03:32.074Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows中，如果增加logrt之类的监控，会导致CPU一场上升，经过了数日的调查，终于找到了解决方案，在此记录一下</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于需要在windows中添加对transaction的监控，而transaction的log是被记录在一个总的folder中的，现在如果在这个folder中加入了很多的monitoring item，会导致IO一场升高，最终导致CPU的异常使用</p><h1 id="调查"><a href="#调查" class="headerlink" title="调查"></a>调查</h1><p>调查中发现，由于创建了很多的日志监控，但是每一个日志文件都在同一个文件夹中，换句话说，那个文件夹有几百个文件！<br>即使用Windows自带的搜索功能搜索文件，需要耗费很久，而我们有几百个这样的监控项，导致了每一个item都在疯狂耗费资源搜索，从而导致了CPU飙升</p><h1 id="优化项"><a href="#优化项" class="headerlink" title="优化项"></a>优化项</h1><p>经过这件事之后，在Windows服务器中，如果我们还有日志监控相关的需求，我们会要求developer将log单独存放在一个文件夹中，并定时清理，保证文件夹的文件数量一定是相对较少，对系统搜索不会产生什么影响的<br>这时候发现，确实CPU的使用率下降了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Windows中，如果增加logrt之类的监控，会导致CPU一场上升，经过了数日的调查，终于找到了解决方案，在此记录一下&lt;/p&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;由</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix进阶9--处理Prometheus行协议格式数据</title>
    <link href="https://maydaychen.github.io/2025/04/01/Zabbix%E8%BF%9B%E9%98%B69--%E5%A4%84%E7%90%86Prometheus%E8%A1%8C%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/"/>
    <id>https://maydaychen.github.io/2025/04/01/Zabbix%E8%BF%9B%E9%98%B69--%E5%A4%84%E7%90%86Prometheus%E8%A1%8C%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/</id>
    <published>2025-04-01T02:43:48.000Z</published>
    <updated>2025-07-26T09:51:10.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在K8S环境中，所有的metric都是通过&#x2F;metrics API来获取，大部分的API都返回了prometheus行协议格式的数据，因此我们需要针对返回的格式做进一步处理</p><h1 id="详细操作"><a href="#详细操作" class="headerlink" title="详细操作"></a>详细操作</h1><h2 id="Item"><a href="#Item" class="headerlink" title="Item"></a>Item</h2><h2 id="Preprocessing"><a href="#Preprocessing" class="headerlink" title="Preprocessing"></a>Preprocessing</h2><p>在这一步我们需要选择Prometheus pattern，然后在Parameters中通过PromQL语句去查询<br>最后在右边有一些方法可选，下面是具体的</p><table><thead><tr><th>序号</th><th>名称</th><th>用途</th></tr></thead><tbody><tr><td>1</td><td>value</td><td>返回指标的值（当匹配到多行记录时，会引发错误）</td></tr><tr><td>2</td><td>label</td><td>在标签字段中指定的标签返回值（当匹配到多个指标时，会引发错误）</td></tr><tr><td>3</td><td>sum</td><td>返回值的总和</td></tr><tr><td>4</td><td>min</td><td>返回最小值</td></tr><tr><td>5</td><td>max</td><td>返回最大值</td></tr><tr><td>6</td><td>avg</td><td>返回平均值</td></tr><tr><td>7</td><td>count</td><td>返回值的计数</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在K8S环境中，所有的metric都是通过&amp;#x2F;metrics API来获取，大部分的API都返回了prometheus行协议格式的数</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Mac软件推荐1--ProNotes让你用上更好用的记事本</title>
    <link href="https://maydaychen.github.io/2025/03/05/Mac%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%901--ProNotes%E8%AE%A9%E4%BD%A0%E7%94%A8%E4%B8%8A%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E4%BA%8B%E6%9C%AC/"/>
    <id>https://maydaychen.github.io/2025/03/05/Mac%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%901--ProNotes%E8%AE%A9%E4%BD%A0%E7%94%A8%E4%B8%8A%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E4%BA%8B%E6%9C%AC/</id>
    <published>2025-03-05T05:25:34.000Z</published>
    <updated>2025-03-05T05:27:27.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p><a href="https://www.pronotes.app/">https://www.pronotes.app/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;h1 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址&quot;&gt;&lt;/a&gt;下载地址&lt;/h</summary>
      
    
    
    
    <category term="Tools" scheme="https://maydaychen.github.io/categories/Tools/"/>
    
    
    <category term="MacOS" scheme="https://maydaychen.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew常用操作记录</title>
    <link href="https://maydaychen.github.io/2025/03/01/Homebrew%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>https://maydaychen.github.io/2025/03/01/Homebrew%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</id>
    <published>2025-03-01T01:57:52.000Z</published>
    <updated>2025-03-01T02:22:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自身操作"><a href="#自身操作" class="headerlink" title="自身操作"></a>自身操作</h1><h2 id="Homebrew更新自身"><a href="#Homebrew更新自身" class="headerlink" title="Homebrew更新自身"></a>Homebrew更新自身</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><h1 id="软件包操作"><a href="#软件包操作" class="headerlink" title="软件包操作"></a>软件包操作</h1><h2 id="列出所有的软件包"><a href="#列出所有的软件包" class="headerlink" title="列出所有的软件包"></a>列出所有的软件包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><h2 id="查看单个软件包信息"><a href="#查看单个软件包信息" class="headerlink" title="查看单个软件包信息"></a>查看单个软件包信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info python@3.12</span><br></pre></td></tr></table></figure><h2 id="列出所有可以更新的软件包"><a href="#列出所有可以更新的软件包" class="headerlink" title="列出所有可以更新的软件包"></a>列出所有可以更新的软件包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew outdated</span><br></pre></td></tr></table></figure><h2 id="更新所有软件包"><a href="#更新所有软件包" class="headerlink" title="更新所有软件包"></a>更新所有软件包</h2><p>如果你想一次性更新所有已安装的软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade</span><br></pre></td></tr></table></figure><p>这个命令会更新所有软件包</p><h2 id="更新单个软件包"><a href="#更新单个软件包" class="headerlink" title="更新单个软件包"></a>更新单个软件包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade python@3.12</span><br></pre></td></tr></table></figure><h2 id="清理旧版本"><a href="#清理旧版本" class="headerlink" title="清理旧版本"></a>清理旧版本</h2><p>注：新版本的homebrew从日志来看upgrade之后能够自动运行cleanup命令，所以可以自动清理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup</span><br></pre></td></tr></table></figure><p>这会删除Homebrew不再使用的旧版本软件，并节省磁盘空间。<br>如果你想检查可以清理多少空间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup -n</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自身操作&quot;&gt;&lt;a href=&quot;#自身操作&quot; class=&quot;headerlink&quot; title=&quot;自身操作&quot;&gt;&lt;/a&gt;自身操作&lt;/h1&gt;&lt;h2 id=&quot;Homebrew更新自身&quot;&gt;&lt;a href=&quot;#Homebrew更新自身&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="开发" scheme="https://maydaychen.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Grafana使用日志9--Zabbix插件可配置参数学习</title>
    <link href="https://maydaychen.github.io/2025/02/25/Grafana%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%979--Zabbix%E6%8F%92%E4%BB%B6%E5%8F%AF%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%AD%A6%E4%B9%A0/"/>
    <id>https://maydaychen.github.io/2025/02/25/Grafana%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%979--Zabbix%E6%8F%92%E4%BB%B6%E5%8F%AF%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-02-25T08:54:29.000Z</published>
    <updated>2025-02-25T10:02:09.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><img src="/2025/02/25/Grafana%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%979--Zabbix%E6%8F%92%E4%BB%B6%E5%8F%AF%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%AD%A6%E4%B9%A0/1.png" class="" title="图片"><ol><li>Max data points（最大数据点数）<br>定义：表示在查询时间范围内返回的最大数据点数。<br>作用：用于控制查询结果的精度和数据量。如果数据点过多，Grafana会自动对数据进行降采样（downsampling），以减少数据量并提高性能。<br>示例：<br>   如果时间范围是7天，Max data points设置为1000，则Grafana会尝试将7天的数据压缩为最多1000个点。<br>   如果原始数据点超过1000，Grafana会通过聚合（如平均值、最大值等）来减少数据点数量。</li><li>Min interval（最小间隔）<br>定义：表示查询的最小时间间隔。<br>作用：用于限制查询的时间粒度，避免查询过于频繁或返回过多数据。<br>示例：<br>   如果 Min interval 设置为 1m，则查询的时间间隔不会小于1分钟。<br>   如果时间范围较大（如1年），Grafana会根据 Min interval 自动调整查询的时间间隔。</li><li>Interval（间隔）<br>定义：表示查询的时间间隔。<br>作用：用于指定查询的时间粒度。较小的间隔会返回更多的数据点，较大的间隔会返回较少的数据点。<br>示例：<br>   如果 Interval 设置为 5m，则每5分钟查询一次数据。<br>   如果 Interval 设置为 1h，则每小时查询一次数据。</li><li>Relative time（相对时间）<br>定义：表示查询的时间范围，相对于当前时间。如果设置了这个时间，那么这个panel跟右上角的time range选择就脱节了，只会显示固定time range的数据<br>作用：用于动态设置查询的时间范围。<br>示例：<br>   如果 Relative time 设置为 now-7d，则查询的时间范围是从当前时间往前推7天到当前时间。<br>   如果 Relative time 设置为 now-1h，则查询的时间范围是从当前时间往前推1小时到当前时间。</li><li>Time shift（时间偏移）<br>定义：表示将查询的时间范围整体偏移一定的时间。<br>作用：用于比较不同时间段的数据。<br>示例：<br>   如果 Time shift 设置为 1d，则查询的时间范围会整体往前偏移1天。<br>   例如，原始时间范围是 now-7d 到 now，加上 Time shift 后，时间范围变为 now-8d 到 now-1d。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;详解&quot;&gt;&lt;a href=&quot;#详解&quot; class=&quot;headerlink&quot; title=&quot;详解&quot;&gt;&lt;/a&gt;详解&lt;/h1&gt;&lt;h2 id=&quot;全局配置&quot;&gt;&lt;a href=&quot;#全局配置&quot; class=&quot;headerlink&quot; title=&quot;全局配置&quot;&gt;&lt;/a&gt;全局配置&lt;/h</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Grafana" scheme="https://maydaychen.github.io/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix进阶8--使用history.push推送数据</title>
    <link href="https://maydaychen.github.io/2025/02/25/Zabbix%E8%BF%9B%E9%98%B68--%E4%BD%BF%E7%94%A8history-push%E6%8E%A8%E9%80%81%E6%95%B0%E6%8D%AE/"/>
    <id>https://maydaychen.github.io/2025/02/25/Zabbix%E8%BF%9B%E9%98%B68--%E4%BD%BF%E7%94%A8history-push%E6%8E%A8%E9%80%81%E6%95%B0%E6%8D%AE/</id>
    <published>2025-02-25T07:12:02.000Z</published>
    <updated>2025-02-25T09:36:37.000Z</updated>
    
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="监控" scheme="https://maydaychen.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="Zabbix" scheme="https://maydaychen.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>AWS知识点记录1--HTTPCode_ELB_4XX_Count和HTTPCode_Target_4XX_Count的区别</title>
    <link href="https://maydaychen.github.io/2025/02/24/AWS%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%951--HTTPCode-ELB-4XX-Count%E5%92%8CHTTPCode-Target-4XX-Count%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://maydaychen.github.io/2025/02/24/AWS%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%951--HTTPCode-ELB-4XX-Count%E5%92%8CHTTPCode-Target-4XX-Count%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2025-02-24T09:27:53.000Z</published>
    <updated>2025-02-24T09:38:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h1><p>这两个metric在AWS中到底代表了什么？</p><h1 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h1><p>这是用于帮助诊断错误所在的2种度量标准，用于诊断4XX错误。</p><p>HTTPCode_ELB_4XX_Count – 这是从ELB返回的4XX个错误的数量。<br>HTTPCode_Target_4XX_Count – 这只是从应用服务器返回的4XX错误。</p><p>也就是说，HTTPCode_ELB_4XX_Count是来自负载均衡器的4xx响应代码的计数，而不是目标的计数，例如，在负载均衡器也不知道在哪里转发请求的情况下,ELB会直接报错4XX<br>类似地，HTTPCode_Target_4XX_Count只表示来自目标组的4xx响应的计数，而不是负载均衡器，例如访问application被拒绝，此时爆出的403等错误就属于HTTPCode_Target_4XX_Count</p><p>参考链接： <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html">https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;提问&quot;&gt;&lt;a href=&quot;#提问&quot; class=&quot;headerlink&quot; title=&quot;提问&quot;&gt;&lt;/a&gt;提问&lt;/h1&gt;&lt;p&gt;这两个metric在AWS中到底代表了什么？&lt;/p&gt;
&lt;h1 id=&quot;回答&quot;&gt;&lt;a href=&quot;#回答&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="运维" scheme="https://maydaychen.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="AWS" scheme="https://maydaychen.github.io/tags/AWS/"/>
    
  </entry>
  
</feed>
